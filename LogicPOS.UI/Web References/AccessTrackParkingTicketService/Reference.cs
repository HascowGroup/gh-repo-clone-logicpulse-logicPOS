//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace logicpos.AccessTrackParkingTicketService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="TimeServiceSoap", Namespace="http://tempuri.org/")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(object[]))]
    public partial class TimeService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback getAllWarningsOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAllTaskManagementProfileOperationCompleted;
        
        private System.Threading.SendOrPostCallback addTaskManagementProfileOperationCompleted;
        
        private System.Threading.SendOrPostCallback changeTaskManagementProfileOperationCompleted;
        
        private System.Threading.SendOrPostCallback deleteTaskManagementProfileOperationCompleted;
        
        private System.Threading.SendOrPostCallback getEmployeesWithFingerPrintOperationCompleted;
        
        private System.Threading.SendOrPostCallback addEmployeesFingerPrintBioMiniOperationCompleted;
        
        private System.Threading.SendOrPostCallback addEmployeesFingerPrintBioMini2OperationCompleted;
        
        private System.Threading.SendOrPostCallback getEmployeesFingerPrintBioMiniOperationCompleted;
        
        private System.Threading.SendOrPostCallback addEmployeesMovimentBioMiniOperationCompleted;
        
        private System.Threading.SendOrPostCallback employeesTransitDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback getEmployeesAbsencesDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback getJustificationFromDatabaseOperationCompleted;
        
        private System.Threading.SendOrPostCallback saveJustificationToDatabaseOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateAbsencesApprovedAdminOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateAbsencesApprovedOperationCompleted;
        
        private System.Threading.SendOrPostCallback deleteEmployeeAbsencesWithJustificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback getTrackingRequestsByIdGeneralOperationCompleted;
        
        private System.Threading.SendOrPostCallback addTrackingRequestsOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateTrackingRequestsApprovedOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateTrackingRequestsDeletedOperationCompleted;
        
        private System.Threading.SendOrPostCallback getEmployeesAbsencesDetailsWithStatesOperationCompleted;
        
        private System.Threading.SendOrPostCallback addOrUpdateEmployeeSimpleOperationCompleted;
        
        private System.Threading.SendOrPostCallback addEmployeeVacationsTPFOperationCompleted;
        
        private System.Threading.SendOrPostCallback deleteEmployeeVacationsTPFOperationCompleted;
        
        private System.Threading.SendOrPostCallback sendysGetEmployeeDatePeriodResumeOperationCompleted;
        
        private System.Threading.SendOrPostCallback sendysGetHoursPackageResumeOperationCompleted;
        
        private System.Threading.SendOrPostCallback sendysCalcWorkHoursOperationCompleted;
        
        private System.Threading.SendOrPostCallback sendysAddAbsencesOperationCompleted;
        
        private System.Threading.SendOrPostCallback sendysGetEmployeesMovimentsFromDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback sendysAddMovimentOperationCompleted;
        
        private System.Threading.SendOrPostCallback sendysGetMovimentsWithStatesOperationCompleted;
        
        private System.Threading.SendOrPostCallback sendysUpdateMovimentOperationCompleted;
        
        private System.Threading.SendOrPostCallback sendysGetHoursPackageTotalOperationCompleted;
        
        private System.Threading.SendOrPostCallback addInTicketOperationCompleted;
        
        private System.Threading.SendOrPostCallback getCardInformationOperationCompleted;
        
        private System.Threading.SendOrPostCallback addInCardOperationCompleted;
        
        private System.Threading.SendOrPostCallback getTicketInformationOperationCompleted;
        
        private System.Threading.SendOrPostCallback payTicketOperationCompleted;
        
        private System.Threading.SendOrPostCallback payCardOperationCompleted;
        
        private System.Threading.SendOrPostCallback isTicketValidOperationCompleted;
        
        private System.Threading.SendOrPostCallback ticketExitOperationCompleted;
        
        private System.Threading.SendOrPostCallback isCardValidOperationCompleted;
        
        private System.Threading.SendOrPostCallback getDateTimeOperationCompleted;
        
        private System.Threading.SendOrPostCallback addTaskMoveOperationCompleted;
        
        private System.Threading.SendOrPostCallback addUpdateAccessZonesOperationCompleted;
        
        private System.Threading.SendOrPostCallback activateCardInAccessZoneOperationCompleted;
        
        private System.Threading.SendOrPostCallback disableCardInAccessZoneOperationCompleted;
        
        private System.Threading.SendOrPostCallback getMovimentsOperationCompleted;
        
        private System.Threading.SendOrPostCallback addMovimentOperationCompleted;
        
        private System.Threading.SendOrPostCallback addMovimentFromTimeTrackMobileOperationCompleted;
        
        private System.Threading.SendOrPostCallback addMovimentFromMobilePhoneOperationCompleted;
        
        private System.Threading.SendOrPostCallback setMovimentIgnoredOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateMovimentTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateMovimentTypeAndDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateMovimentWorkCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateManualyClassifiedOperationCompleted;
        
        private System.Threading.SendOrPostCallback getMovimentOperationCompleted;
        
        private System.Threading.SendOrPostCallback getMovimentFromDeviceOperationCompleted;
        
        private System.Threading.SendOrPostCallback getLastMovimentFromDateTimeOperationCompleted;
        
        private System.Threading.SendOrPostCallback getLastMovimentLogFromDateTimeOperationCompleted;
        
        private System.Threading.SendOrPostCallback getLastMovimentFromDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback getLastMovimentFromDateFiltredByMovimentTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback getLastEmployeeMovimentsOperationCompleted;
        
        private System.Threading.SendOrPostCallback getLastMovimentsOperationCompleted;
        
        private System.Threading.SendOrPostCallback getLastEmployeeMovimentsFromintervalOperationCompleted;
        
        private System.Threading.SendOrPostCallback getLastEmployeeMovimentsWorkCodeFromintervalOperationCompleted;
        
        private System.Threading.SendOrPostCallback getEmployeeAllMovimentsFromintervalOperationCompleted;
        
        private System.Threading.SendOrPostCallback getMovimentsFromIntervalByDepOperationCompleted;
        
        private System.Threading.SendOrPostCallback getMovimentsFromIntervalByEmplOperationCompleted;
        
        private System.Threading.SendOrPostCallback addMovimentsLogsOperationCompleted;
        
        private System.Threading.SendOrPostCallback getMovimentLogOperationCompleted;
        
        private System.Threading.SendOrPostCallback getDeviceLastMovimentLogOperationCompleted;
        
        private System.Threading.SendOrPostCallback getEmployeeAllMovimentsLogsFromintervalOperationCompleted;
        
        private System.Threading.SendOrPostCallback addMovimentSuggestedOperationCompleted;
        
        private System.Threading.SendOrPostCallback getExceptionSuggestedMovsOperationCompleted;
        
        private System.Threading.SendOrPostCallback getGprsMovimentNotTratedOperationCompleted;
        
        private System.Threading.SendOrPostCallback setGPRSMovimentIgnoredOperationCompleted;
        
        private System.Threading.SendOrPostCallback getLastStepOperationCompleted;
        
        private System.Threading.SendOrPostCallback getPreviousRespOperationCompleted;
        
        private System.Threading.SendOrPostCallback getProcessActStateOperationCompleted;
        
        private System.Threading.SendOrPostCallback getProcessDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAllVacationsOperationCompleted;
        
        private System.Threading.SendOrPostCallback getUseridEmployeeOperationCompleted;
        
        private System.Threading.SendOrPostCallback getStateTypesOperationCompleted;
        
        private System.Threading.SendOrPostCallback changeStateOperationCompleted;
        
        private System.Threading.SendOrPostCallback initializeProcHistoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback newNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback getProcessDataAbsencesOperationCompleted;
        
        private System.Threading.SendOrPostCallback addGprsMovimentOperationCompleted;
        
        private System.Threading.SendOrPostCallback insertHourBalanceDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback getRealHourBalanceByEmployeeBetweenDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback getRealHourBalanceByEmployeeDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback getRealHourBalanceByEmployeeDateTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback insertHourPackageRealTimeDBOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateHourPackageRealDBOperationCompleted;
        
        private System.Threading.SendOrPostCallback deleteHourPackageRealDBOperationCompleted;
        
        private System.Threading.SendOrPostCallback getRealHourBalanceByEmployeeTotalByTypeDTOperationCompleted;
        
        private System.Threading.SendOrPostCallback getRealHourBalanceByEmployeeTotalByTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback getRealHourBalanceByEmployeeTotalOperationCompleted;
        
        private System.Threading.SendOrPostCallback insertHourPackageRealTimeResumeDBOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateHourPackageRealResumeDBOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateHourPackageRealResumeOfEmpAndTypeDBOperationCompleted;
        
        private System.Threading.SendOrPostCallback deleteHourPackageRealResumeDBOperationCompleted;
        
        private System.Threading.SendOrPostCallback hasConstructionOperationCompleted;
        
        private System.Threading.SendOrPostCallback newOrUpdateConstructionOperationCompleted;
        
        private System.Threading.SendOrPostCallback getCentroCustoNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback delCentrosCustoOperationCompleted;
        
        private System.Threading.SendOrPostCallback changeCentrosCustoOperationCompleted;
        
        private System.Threading.SendOrPostCallback addCentrosCustoOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAllCentrosCustoOperationCompleted;
        
        private System.Threading.SendOrPostCallback addConstructionsEmployeesOperationCompleted;
        
        private System.Threading.SendOrPostCallback delConstructionsEmployeesOperationCompleted;
        
        private System.Threading.SendOrPostCallback getConstructionsEmployeesByIdConstructionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback getDevicesByNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback delConstructionsDevicesOperationCompleted;
        
        private System.Threading.SendOrPostCallback addConstructionsDevicesOperationCompleted;
        
        private System.Threading.SendOrPostCallback getConstructionDevicesByIdConstructionsAndIdDevicesOperationCompleted;
        
        private System.Threading.SendOrPostCallback getConstructionDevicesByDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback getConstructionDevicesByIdDevicesOperationCompleted;
        
        private System.Threading.SendOrPostCallback getConstructionDevicesByIdConstructionOperationCompleted;
        
        private System.Threading.SendOrPostCallback getEmployeesInMobileDeviceOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAllEmployeesDetailsToMobileOperationCompleted;
        
        private System.Threading.SendOrPostCallback addEmployeesInMobileOperationCompleted;
        
        private System.Threading.SendOrPostCallback delEmployeesInMobileOperationCompleted;
        
        private System.Threading.SendOrPostCallback getMovimentsFromMobileOperationCompleted;
        
        private System.Threading.SendOrPostCallback getVacationsTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback getVersionFingerPrintOperationCompleted;
        
        private System.Threading.SendOrPostCallback addEmployeesInGPRSOperationCompleted;
        
        private System.Threading.SendOrPostCallback delEmployeesInGPRSOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAllEmployeesDetailsToGPRSOperationCompleted;
        
        private System.Threading.SendOrPostCallback getEmployeesInGPRSOperationCompleted;
        
        private System.Threading.SendOrPostCallback addProfileMonthScheduleOperationCompleted;
        
        private System.Threading.SendOrPostCallback addEmployeeProfileOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateEmployeeProfileOperationCompleted;
        
        private System.Threading.SendOrPostCallback deleteEmployeeProfileOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAllProfileMonthSchedulesOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAllProfileYearMonthSchedulesOperationCompleted;
        
        private System.Threading.SendOrPostCallback getProfileMonthSchedulesOperationCompleted;
        
        private System.Threading.SendOrPostCallback getEmployeeProfileByDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback getTodayIdMonthSchedulesOperationCompleted;
        
        private System.Threading.SendOrPostCallback addSchedulesOperationCompleted;
        
        private System.Threading.SendOrPostCallback delScheduleOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateSchedulesOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAllSchedulesOperationCompleted;
        
        private System.Threading.SendOrPostCallback getScheduleFromEnrollNumberAndDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback getScalesFromEmployeeBetweenDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback setScaleFromEmployeeDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback delAllScalesFromEmployeeDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback getScheduleOperationCompleted;
        
        private System.Threading.SendOrPostCallback getScheduleByNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAllSchedulesProfileMonthOperationCompleted;
        
        private System.Threading.SendOrPostCallback getTodayIdScheduleOperationCompleted;
        
        private System.Threading.SendOrPostCallback getDateIdSchedulesOperationCompleted;
        
        private System.Threading.SendOrPostCallback getEmployeeScheduleFromDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback getEmployeeShiftScheduleFromDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback addSchedulesBreaksOperationCompleted;
        
        private System.Threading.SendOrPostCallback delSchedulesBreaksOperationCompleted;
        
        private System.Threading.SendOrPostCallback delRelationSchedulesBreaksOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAllSchedulesBreaksOperationCompleted;
        
        private System.Threading.SendOrPostCallback getSchedulesBreaksOperationCompleted;
        
        private System.Threading.SendOrPostCallback addSchedulesChangesOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateSchedulesChangesOperationCompleted;
        
        private System.Threading.SendOrPostCallback delSchedulesChangesOperationCompleted;
        
        private System.Threading.SendOrPostCallback getEmployeeScheduleChangeFromDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback addWorkResumeOperationCompleted;
        
        private System.Threading.SendOrPostCallback delWorkResumeOperationCompleted;
        
        private System.Threading.SendOrPostCallback changeWorkResumeOperationCompleted;
        
        private System.Threading.SendOrPostCallback changeWorkResumeClosedStateOperationCompleted;
        
        private System.Threading.SendOrPostCallback getEmployeeDateResumeOperationCompleted;
        
        private System.Threading.SendOrPostCallback getEmployeeDatePeriodResumeOperationCompleted;
        
        private System.Threading.SendOrPostCallback getDatePeriodResumeByDepOperationCompleted;
        
        private System.Threading.SendOrPostCallback addExtraHoursOperationCompleted;
        
        private System.Threading.SendOrPostCallback delExtraHoursOperationCompleted;
        
        private System.Threading.SendOrPostCallback delExtraHoursFromEmployeeOnDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback getEmployeeExtraHoursOperationCompleted;
        
        private System.Threading.SendOrPostCallback getEmployeeDatePeriodExtraHoursOperationCompleted;
        
        private System.Threading.SendOrPostCallback getEmployeeDatePeriodExtraHoursFromWorkResumeOperationCompleted;
        
        private System.Threading.SendOrPostCallback addScheduleSequenceOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateScheduleSequenceOperationCompleted;
        
        private System.Threading.SendOrPostCallback delScheduleSequenceOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAllScheduleSequenceOperationCompleted;
        
        private System.Threading.SendOrPostCallback getScheduleSequenceOperationCompleted;
        
        private System.Threading.SendOrPostCallback addSSElementOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateSSElementOperationCompleted;
        
        private System.Threading.SendOrPostCallback delSSElementOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAllSSElementFromScheduleSequenceOperationCompleted;
        
        private System.Threading.SendOrPostCallback setMonthScheduleIdScheduleInDayOperationCompleted;
        
        private System.Threading.SendOrPostCallback getProfileIdScheduleAndIdMonthScheduleFromDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback getPcMovementsLogsOperationCompleted;
        
        private System.Threading.SendOrPostCallback addPcMovimentLogOperationCompleted;
        
        private System.Threading.SendOrPostCallback setImportedPcMovOperationCompleted;
        
        private System.Threading.SendOrPostCallback getEnrollNumberOperationCompleted;
        
        private System.Threading.SendOrPostCallback getIdDeviceByCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAllDevicesOperationCompleted;
        
        private System.Threading.SendOrPostCallback getIpServerOperationCompleted;
        
        private System.Threading.SendOrPostCallback addDevicesOperationCompleted;
        
        private System.Threading.SendOrPostCallback changeDevicesOperationCompleted;
        
        private System.Threading.SendOrPostCallback getIdDeviceFromMachineNumberOperationCompleted;
        
        private System.Threading.SendOrPostCallback getIpDeviceFromIdDeviceOperationCompleted;
        
        private System.Threading.SendOrPostCallback delDeviceOperationCompleted;
        
        private System.Threading.SendOrPostCallback addDeviceEmployeesOperationCompleted;
        
        private System.Threading.SendOrPostCallback changeDeviceEmployeesOperationCompleted;
        
        private System.Threading.SendOrPostCallback delDeviceEmployeesOperationCompleted;
        
        private System.Threading.SendOrPostCallback getLastDeviceEnrollNumberOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAllDeviceEmployeesOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAllDeviceEmployeesFromDeviceOperationCompleted;
        
        private System.Threading.SendOrPostCallback getDeviceEmployeesFromEnrollNumberOperationCompleted;
        
        private System.Threading.SendOrPostCallback getNextMovimentFromDateTimeOperationCompleted;
        
        private System.Threading.SendOrPostCallback translateMovimentsTableDBOperationCompleted;
        
        private System.Threading.SendOrPostCallback getEmployeeExceptionFromDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback getNotTratedExceptionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback getEmployeeExceptionFromDateIntervalOperationCompleted;
        
        private System.Threading.SendOrPostCallback addExceptionOperationCompleted;
        
        private System.Threading.SendOrPostCallback changeExceptionOperationCompleted;
        
        private System.Threading.SendOrPostCallback setExceptionTratedOperationCompleted;
        
        private System.Threading.SendOrPostCallback setExceptionIgnoredOperationCompleted;
        
        private System.Threading.SendOrPostCallback deleteVacationsResumeOperationCompleted;
        
        private System.Threading.SendOrPostCallback getEmployeeFingerPrintOperationCompleted;
        
        private System.Threading.SendOrPostCallback getEmployeeFacesOperationCompleted;
        
        private System.Threading.SendOrPostCallback getFingerPrintOperationCompleted;
        
        private System.Threading.SendOrPostCallback getRelationShipEmployeesFingerprintsOperationCompleted;
        
        private System.Threading.SendOrPostCallback addFingerPrintOperationCompleted;
        
        private System.Threading.SendOrPostCallback delFingerPrintOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateFingerPrintOperationCompleted;
        
        private System.Threading.SendOrPostCallback delEmployeeFingerPrintOperationCompleted;
        
        private System.Threading.SendOrPostCallback getRfidCardOperationCompleted;
        
        private System.Threading.SendOrPostCallback addRfidCardsOperationCompleted;
        
        private System.Threading.SendOrPostCallback getEmployeeRfidCardsOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateRfidCardOperationCompleted;
        
        private System.Threading.SendOrPostCallback getEmployeeCardNumberOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAllEmployeeCardNumberOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAllSkillsOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAllProfessionalCategoriesOperationCompleted;
        
        private System.Threading.SendOrPostCallback addSkillsOperationCompleted;
        
        private System.Threading.SendOrPostCallback changeSkillsOperationCompleted;
        
        private System.Threading.SendOrPostCallback delSkillsOperationCompleted;
        
        private System.Threading.SendOrPostCallback getScaleServiceSkillsOperationCompleted;
        
        private System.Threading.SendOrPostCallback delAllScaleServiceSkillsOperationCompleted;
        
        private System.Threading.SendOrPostCallback getScalesServicesSchedulesOperationCompleted;
        
        private System.Threading.SendOrPostCallback getEmployeeScalesOperationCompleted;
        
        private System.Threading.SendOrPostCallback delAllScaleServiceSchedulesOperationCompleted;
        
        private System.Threading.SendOrPostCallback addScaleServiceSchedulesOperationCompleted;
        
        private System.Threading.SendOrPostCallback addScaleServiceSkillsOperationCompleted;
        
        private System.Threading.SendOrPostCallback getEmployeeSkillsOperationCompleted;
        
        private System.Threading.SendOrPostCallback delEmployeeSkillOperationCompleted;
        
        private System.Threading.SendOrPostCallback addEmployeeSkillOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateEmployeeSkillsOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAllContractsOperationCompleted;
        
        private System.Threading.SendOrPostCallback addContractsOperationCompleted;
        
        private System.Threading.SendOrPostCallback changeContractsOperationCompleted;
        
        private System.Threading.SendOrPostCallback delContractsOperationCompleted;
        
        private System.Threading.SendOrPostCallback getEmployeeContractsOperationCompleted;
        
        private System.Threading.SendOrPostCallback delEmployeeContractsOperationCompleted;
        
        private System.Threading.SendOrPostCallback addEmployeeContractsOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateEmployeeContractsOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateEmployeeOperationalSkillsOperationCompleted;
        
        private System.Threading.SendOrPostCallback getEmployeeOperationalSkillsOperationCompleted;
        
        private System.Threading.SendOrPostCallback delEmployeeOperationalSkillOperationCompleted;
        
        private System.Threading.SendOrPostCallback addEmployeeOperationalSkillOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAllCareerFunctionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback addCareerFunctionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback changeCareerFunctionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback delCareerFunctionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback getEmployeeCareerFunctionOperationCompleted;
        
        private System.Threading.SendOrPostCallback delEmployeeCareerFunctionOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateEmployeeCareerFunctionOperationCompleted;
        
        private System.Threading.SendOrPostCallback addEmployeeCareerFunctionOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAllAptitudeExamsOperationCompleted;
        
        private System.Threading.SendOrPostCallback addAptitudeExamsOperationCompleted;
        
        private System.Threading.SendOrPostCallback changeAptitudeExamsOperationCompleted;
        
        private System.Threading.SendOrPostCallback delAptitudeExamsOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAllAptitudeExamsEmployeeOperationCompleted;
        
        private System.Threading.SendOrPostCallback delEmployeeAptitudeExamOperationCompleted;
        
        private System.Threading.SendOrPostCallback addEmployeeAptitudeExamsOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateEmployeeExamsOperationCompleted;
        
        private System.Threading.SendOrPostCallback getEmployeeDocumentsOperationCompleted;
        
        private System.Threading.SendOrPostCallback addEmployeeDocumentsOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateEmployeeDocumentsOperationCompleted;
        
        private System.Threading.SendOrPostCallback delEmployeeDocumentsOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAllTrainingOperationCompleted;
        
        private System.Threading.SendOrPostCallback addTrainingOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateTrainingOperationCompleted;
        
        private System.Threading.SendOrPostCallback delTrainingOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAllActivationsEmployOperationCompleted;
        
        private System.Threading.SendOrPostCallback delEmployeeActivationOperationCompleted;
        
        private System.Threading.SendOrPostCallback addEmployeeActivationOperationCompleted;
        
        private System.Threading.SendOrPostCallback delBreakOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateBreaksOperationCompleted;
        
        private System.Threading.SendOrPostCallback addMonthSchedulesOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateMonthSchedulesOperationCompleted;
        
        private System.Threading.SendOrPostCallback delWorkPlaneOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAllMonthSchedulesOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAllscalesServicesOperationCompleted;
        
        private System.Threading.SendOrPostCallback getScalesServicesOperationCompleted;
        
        private System.Threading.SendOrPostCallback getScalesServicesEmployeeOperationCompleted;
        
        private System.Threading.SendOrPostCallback delScalesServicesOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateScalesServicesOperationCompleted;
        
        private System.Threading.SendOrPostCallback addScalesServicesOperationCompleted;
        
        private System.Threading.SendOrPostCallback delEmployeeScalesServicesOperationCompleted;
        
        private System.Threading.SendOrPostCallback getScalesServicesOfEmployeeOperationCompleted;
        
        private System.Threading.SendOrPostCallback setEmployeeScalesServicesOperationCompleted;
        
        private System.Threading.SendOrPostCallback addUsersOperationCompleted;
        
        private System.Threading.SendOrPostCallback changeUsersOperationCompleted;
        
        private System.Threading.SendOrPostCallback changeUsersPassOperationCompleted;
        
        private System.Threading.SendOrPostCallback delUsersOperationCompleted;
        
        private System.Threading.SendOrPostCallback getUsersOperationCompleted;
        
        private System.Threading.SendOrPostCallback getUsersByLoginOperationCompleted;
        
        private System.Threading.SendOrPostCallback getUserIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback getIdEmployeeOperationCompleted;
        
        private System.Threading.SendOrPostCallback getIdEmployeeByNumberOperationCompleted;
        
        private System.Threading.SendOrPostCallback addUsersDepartmentOperationCompleted;
        
        private System.Threading.SendOrPostCallback changeUsersDepartmentOperationCompleted;
        
        private System.Threading.SendOrPostCallback delUsersDepartmentOperationCompleted;
        
        private System.Threading.SendOrPostCallback getUserDepartmentsOperationCompleted;
        
        private System.Threading.SendOrPostCallback getUserFunctionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback getUserRolesOperationCompleted;
        
        private System.Threading.SendOrPostCallback addUserRolesOperationCompleted;
        
        private System.Threading.SendOrPostCallback addUserFunctionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback delUserRolesOperationCompleted;
        
        private System.Threading.SendOrPostCallback delAllUserRolesOperationCompleted;
        
        private System.Threading.SendOrPostCallback delUserFunctionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAllOperationalRequirementsOperationCompleted;
        
        private System.Threading.SendOrPostCallback addOperationalRequirementsOperationCompleted;
        
        private System.Threading.SendOrPostCallback changeOperationalRequirementsOperationCompleted;
        
        private System.Threading.SendOrPostCallback delOperationalRequirementsOperationCompleted;
        
        private System.Threading.SendOrPostCallback getOperatRequirementsServiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback delOperatRequirementsServiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback addOperatRequirementsServiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateOperatRequirementsServiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback delAbsencesFromDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback delEmployeeAbsencesRelationFromDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback addOrUpdateEmployeeOperationCompleted;
        
        private System.Threading.SendOrPostCallback addOrUpdateEmployeeFCPOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateEmployeeOperationCompleted;
        
        private System.Threading.SendOrPostCallback delEmployeeOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAllFingerPrintsOperationCompleted;
        
        private System.Threading.SendOrPostCallback getEmployeeByNumberAndPasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAllEmployeesOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAllEmployeesDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback getEmployeesDetailsByIdDepartmentOperationCompleted;
        
        private System.Threading.SendOrPostCallback getPictureFromDatabaseOperationCompleted;
        
        private System.Threading.SendOrPostCallback getEmployeeOperationCompleted;
        
        private System.Threading.SendOrPostCallback getEmployeeFromNumberOperationCompleted;
        
        private System.Threading.SendOrPostCallback changeEmployeeProfileOperationCompleted;
        
        private System.Threading.SendOrPostCallback changeEmployeeDeviceParamOperationCompleted;
        
        private System.Threading.SendOrPostCallback getEmployeeLastNumberOperationCompleted;
        
        private System.Threading.SendOrPostCallback getEmployeeProfileOperationCompleted;
        
        private System.Threading.SendOrPostCallback getEmployeeAllProfilesOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAllProfileEmployeesOperationCompleted;
        
        private System.Threading.SendOrPostCallback saveEmployeePictureOperationCompleted;
        
        private System.Threading.SendOrPostCallback getEmployeePictureOperationCompleted;
        
        private System.Threading.SendOrPostCallback getEmployeeAbsencesOperationCompleted;
        
        private System.Threading.SendOrPostCallback getEmployeeAbsencesApprovedOperationCompleted;
        
        private System.Threading.SendOrPostCallback addEmployeeAbsencesOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateAbsencesOperationCompleted;
        
        private System.Threading.SendOrPostCallback delEmployeeAbsencesOperationCompleted;
        
        private System.Threading.SendOrPostCallback getEmployeesOnAbsencesFromDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback getEmployeeMonthAbsencesOperationCompleted;
        
        private System.Threading.SendOrPostCallback getEmployeeAbsencesFromDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback getEmployeeAbsencesFromBeginDateAndEndDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback getEmployeeDatePeriodAbsencesOperationCompleted;
        
        private System.Threading.SendOrPostCallback getEmployeeDatePeriodAbsencesByReasonOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAllAbsencesWDetailsYearOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAllAbsencesWDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAllAbsencesOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAllAbsencesApprovedOperationCompleted;
        
        private System.Threading.SendOrPostCallback getLastInsertedAbsenceOperationCompleted;
        
        private System.Threading.SendOrPostCallback getEmployeeVacationsOperationCompleted;
        
        private System.Threading.SendOrPostCallback getEmployeeVacationsByPeriodOperationCompleted;
        
        private System.Threading.SendOrPostCallback getEmployeeVacationsByPeriodToPrimaveraOperationCompleted;
        
        private System.Threading.SendOrPostCallback getEmployeeMonthVacationsOperationCompleted;
        
        private System.Threading.SendOrPostCallback addEmployeeVacationsOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateVacationsOperationCompleted;
        
        private System.Threading.SendOrPostCallback delEmployeeVacationsOperationCompleted;
        
        private System.Threading.SendOrPostCallback getEmployeesOnVacationsFromDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback getEmployeeVacationFromDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback getEmployeeVacationFromBeginAndEndDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback getEmployeeDatePeriodVacationsOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAllVacationsYearOperationCompleted;
        
        private System.Threading.SendOrPostCallback getVacationsApprovedOperationCompleted;
        
        private System.Threading.SendOrPostCallback getEmployeeAllMonthVacationsOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAllVacationsOrderByIdVacationsOperationCompleted;
        
        private System.Threading.SendOrPostCallback getEmployeeAllVacationsResumeOperationCompleted;
        
        private System.Threading.SendOrPostCallback getEmployeeYearVacationsResumeOperationCompleted;
        
        private System.Threading.SendOrPostCallback addVacationsResumeOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateVacationsResumeOperationCompleted;
        
        private System.Threading.SendOrPostCallback getSecurityTokenOperationCompleted;
        
        private System.Threading.SendOrPostCallback removeSecurityTokenOperationCompleted;
        
        private System.Threading.SendOrPostCallback pingOperationCompleted;
        
        private System.Threading.SendOrPostCallback backupDataBaseOperationCompleted;
        
        private System.Threading.SendOrPostCallback backupDBOperationCompleted;
        
        private System.Threading.SendOrPostCallback restoreDBOperationCompleted;
        
        private System.Threading.SendOrPostCallback runUpdateScriptOperationCompleted;
        
        private System.Threading.SendOrPostCallback translateRolesTableDBOperationCompleted;
        
        private System.Threading.SendOrPostCallback translateExceptionsTableDBOperationCompleted;
        
        private System.Threading.SendOrPostCallback hasEmployeesOperationCompleted;
        
        private System.Threading.SendOrPostCallback unboundUsersDepartOperationCompleted;
        
        private System.Threading.SendOrPostCallback hasuserOperationCompleted;
        
        private System.Threading.SendOrPostCallback getDepartmentNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback getDepartmentByNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback getDepartmentByNameAndFatherOperationCompleted;
        
        private System.Threading.SendOrPostCallback unboundEmployeesDepartOperationCompleted;
        
        private System.Threading.SendOrPostCallback addDepartmentOperationCompleted;
        
        private System.Threading.SendOrPostCallback addAcademicDegreeOperationCompleted;
        
        private System.Threading.SendOrPostCallback changeAcademicDegreeOperationCompleted;
        
        private System.Threading.SendOrPostCallback delAcademicDegreeOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAllAcademicDegreeOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAllBreakTypesOperationCompleted;
        
        private System.Threading.SendOrPostCallback addBreakTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback changeBreakTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback delBreakTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAllCitiesOperationCompleted;
        
        private System.Threading.SendOrPostCallback getCitiesByNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback addCityOperationCompleted;
        
        private System.Threading.SendOrPostCallback changeCityOperationCompleted;
        
        private System.Threading.SendOrPostCallback delCityOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAllCountriesOperationCompleted;
        
        private System.Threading.SendOrPostCallback getCountryByNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback addCountryOperationCompleted;
        
        private System.Threading.SendOrPostCallback changeCountryOperationCompleted;
        
        private System.Threading.SendOrPostCallback delCountryOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAllDepartmentsOperationCompleted;
        
        private System.Threading.SendOrPostCallback changeDepartmentOperationCompleted;
        
        private System.Threading.SendOrPostCallback changeDepartmentNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback delDepartmentOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAllDevicesTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAllExceptionTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAllFunctionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback addFunctionsRolesOperationCompleted;
        
        private System.Threading.SendOrPostCallback delFunctionsRolesOperationCompleted;
        
        private System.Threading.SendOrPostCallback getRoleFunctionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAllHolidaysOperationCompleted;
        
        private System.Threading.SendOrPostCallback getHolidaysByIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback addHolidaysOperationCompleted;
        
        private System.Threading.SendOrPostCallback changeHolidaysOperationCompleted;
        
        private System.Threading.SendOrPostCallback getHolidayFromDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback delHolidaysOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAllMovimentsTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAllNationalitiesOperationCompleted;
        
        private System.Threading.SendOrPostCallback getNationalitiesByNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback addNationalityOperationCompleted;
        
        private System.Threading.SendOrPostCallback changeNationalityOperationCompleted;
        
        private System.Threading.SendOrPostCallback delNationalityOperationCompleted;
        
        private System.Threading.SendOrPostCallback changeParametersOperationCompleted;
        
        private System.Threading.SendOrPostCallback changeParametersByNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback setParametersDefaultOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAllParametersOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAllProfilesOperationCompleted;
        
        private System.Threading.SendOrPostCallback addProfileOperationCompleted;
        
        private System.Threading.SendOrPostCallback changeProfileOperationCompleted;
        
        private System.Threading.SendOrPostCallback delProfileOperationCompleted;
        
        private System.Threading.SendOrPostCallback getProfileWorktypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAllReasonsOperationCompleted;
        
        private System.Threading.SendOrPostCallback addReasonsOperationCompleted;
        
        private System.Threading.SendOrPostCallback changeReasonsOperationCompleted;
        
        private System.Threading.SendOrPostCallback delReasonsOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAllRolesOperationCompleted;
        
        private System.Threading.SendOrPostCallback addRolesOperationCompleted;
        
        private System.Threading.SendOrPostCallback changeRolesOperationCompleted;
        
        private System.Threading.SendOrPostCallback delRolesOperationCompleted;
        
        private System.Threading.SendOrPostCallback getStatisticsFromDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback addStatisticOperationCompleted;
        
        private System.Threading.SendOrPostCallback changeStatisticsOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAllTypeExtraHoursOperationCompleted;
        
        private System.Threading.SendOrPostCallback changeTypeExtraHoursOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAllUsersOperationCompleted;
        
        private System.Threading.SendOrPostCallback getUserDataOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public TimeService() {
            this.Url = global::logicpos.Properties.Settings.Default.logicpos_AccessTrackParkingTicketService_TimeService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event getAllWarningsCompletedEventHandler getAllWarningsCompleted;
        
        /// <remarks/>
        public event getAllTaskManagementProfileCompletedEventHandler getAllTaskManagementProfileCompleted;
        
        /// <remarks/>
        public event addTaskManagementProfileCompletedEventHandler addTaskManagementProfileCompleted;
        
        /// <remarks/>
        public event changeTaskManagementProfileCompletedEventHandler changeTaskManagementProfileCompleted;
        
        /// <remarks/>
        public event deleteTaskManagementProfileCompletedEventHandler deleteTaskManagementProfileCompleted;
        
        /// <remarks/>
        public event getEmployeesWithFingerPrintCompletedEventHandler getEmployeesWithFingerPrintCompleted;
        
        /// <remarks/>
        public event addEmployeesFingerPrintBioMiniCompletedEventHandler addEmployeesFingerPrintBioMiniCompleted;
        
        /// <remarks/>
        public event addEmployeesFingerPrintBioMini2CompletedEventHandler addEmployeesFingerPrintBioMini2Completed;
        
        /// <remarks/>
        public event getEmployeesFingerPrintBioMiniCompletedEventHandler getEmployeesFingerPrintBioMiniCompleted;
        
        /// <remarks/>
        public event addEmployeesMovimentBioMiniCompletedEventHandler addEmployeesMovimentBioMiniCompleted;
        
        /// <remarks/>
        public event employeesTransitDataCompletedEventHandler employeesTransitDataCompleted;
        
        /// <remarks/>
        public event getEmployeesAbsencesDetailsCompletedEventHandler getEmployeesAbsencesDetailsCompleted;
        
        /// <remarks/>
        public event getJustificationFromDatabaseCompletedEventHandler getJustificationFromDatabaseCompleted;
        
        /// <remarks/>
        public event saveJustificationToDatabaseCompletedEventHandler saveJustificationToDatabaseCompleted;
        
        /// <remarks/>
        public event updateAbsencesApprovedAdminCompletedEventHandler updateAbsencesApprovedAdminCompleted;
        
        /// <remarks/>
        public event updateAbsencesApprovedCompletedEventHandler updateAbsencesApprovedCompleted;
        
        /// <remarks/>
        public event deleteEmployeeAbsencesWithJustificationCompletedEventHandler deleteEmployeeAbsencesWithJustificationCompleted;
        
        /// <remarks/>
        public event getTrackingRequestsByIdGeneralCompletedEventHandler getTrackingRequestsByIdGeneralCompleted;
        
        /// <remarks/>
        public event addTrackingRequestsCompletedEventHandler addTrackingRequestsCompleted;
        
        /// <remarks/>
        public event updateTrackingRequestsApprovedCompletedEventHandler updateTrackingRequestsApprovedCompleted;
        
        /// <remarks/>
        public event updateTrackingRequestsDeletedCompletedEventHandler updateTrackingRequestsDeletedCompleted;
        
        /// <remarks/>
        public event getEmployeesAbsencesDetailsWithStatesCompletedEventHandler getEmployeesAbsencesDetailsWithStatesCompleted;
        
        /// <remarks/>
        public event addOrUpdateEmployeeSimpleCompletedEventHandler addOrUpdateEmployeeSimpleCompleted;
        
        /// <remarks/>
        public event addEmployeeVacationsTPFCompletedEventHandler addEmployeeVacationsTPFCompleted;
        
        /// <remarks/>
        public event deleteEmployeeVacationsTPFCompletedEventHandler deleteEmployeeVacationsTPFCompleted;
        
        /// <remarks/>
        public event sendysGetEmployeeDatePeriodResumeCompletedEventHandler sendysGetEmployeeDatePeriodResumeCompleted;
        
        /// <remarks/>
        public event sendysGetHoursPackageResumeCompletedEventHandler sendysGetHoursPackageResumeCompleted;
        
        /// <remarks/>
        public event sendysCalcWorkHoursCompletedEventHandler sendysCalcWorkHoursCompleted;
        
        /// <remarks/>
        public event sendysAddAbsencesCompletedEventHandler sendysAddAbsencesCompleted;
        
        /// <remarks/>
        public event sendysGetEmployeesMovimentsFromDateCompletedEventHandler sendysGetEmployeesMovimentsFromDateCompleted;
        
        /// <remarks/>
        public event sendysAddMovimentCompletedEventHandler sendysAddMovimentCompleted;
        
        /// <remarks/>
        public event sendysGetMovimentsWithStatesCompletedEventHandler sendysGetMovimentsWithStatesCompleted;
        
        /// <remarks/>
        public event sendysUpdateMovimentCompletedEventHandler sendysUpdateMovimentCompleted;
        
        /// <remarks/>
        public event sendysGetHoursPackageTotalCompletedEventHandler sendysGetHoursPackageTotalCompleted;
        
        /// <remarks/>
        public event addInTicketCompletedEventHandler addInTicketCompleted;
        
        /// <remarks/>
        public event getCardInformationCompletedEventHandler getCardInformationCompleted;
        
        /// <remarks/>
        public event addInCardCompletedEventHandler addInCardCompleted;
        
        /// <remarks/>
        public event getTicketInformationCompletedEventHandler getTicketInformationCompleted;
        
        /// <remarks/>
        public event payTicketCompletedEventHandler payTicketCompleted;
        
        /// <remarks/>
        public event payCardCompletedEventHandler payCardCompleted;
        
        /// <remarks/>
        public event isTicketValidCompletedEventHandler isTicketValidCompleted;
        
        /// <remarks/>
        public event ticketExitCompletedEventHandler ticketExitCompleted;
        
        /// <remarks/>
        public event isCardValidCompletedEventHandler isCardValidCompleted;
        
        /// <remarks/>
        public event getDateTimeCompletedEventHandler getDateTimeCompleted;
        
        /// <remarks/>
        public event addTaskMoveCompletedEventHandler addTaskMoveCompleted;
        
        /// <remarks/>
        public event addUpdateAccessZonesCompletedEventHandler addUpdateAccessZonesCompleted;
        
        /// <remarks/>
        public event activateCardInAccessZoneCompletedEventHandler activateCardInAccessZoneCompleted;
        
        /// <remarks/>
        public event disableCardInAccessZoneCompletedEventHandler disableCardInAccessZoneCompleted;
        
        /// <remarks/>
        public event getMovimentsCompletedEventHandler getMovimentsCompleted;
        
        /// <remarks/>
        public event addMovimentCompletedEventHandler addMovimentCompleted;
        
        /// <remarks/>
        public event addMovimentFromTimeTrackMobileCompletedEventHandler addMovimentFromTimeTrackMobileCompleted;
        
        /// <remarks/>
        public event addMovimentFromMobilePhoneCompletedEventHandler addMovimentFromMobilePhoneCompleted;
        
        /// <remarks/>
        public event setMovimentIgnoredCompletedEventHandler setMovimentIgnoredCompleted;
        
        /// <remarks/>
        public event updateMovimentTypeCompletedEventHandler updateMovimentTypeCompleted;
        
        /// <remarks/>
        public event updateMovimentTypeAndDateCompletedEventHandler updateMovimentTypeAndDateCompleted;
        
        /// <remarks/>
        public event updateMovimentWorkCodeCompletedEventHandler updateMovimentWorkCodeCompleted;
        
        /// <remarks/>
        public event updateManualyClassifiedCompletedEventHandler updateManualyClassifiedCompleted;
        
        /// <remarks/>
        public event getMovimentCompletedEventHandler getMovimentCompleted;
        
        /// <remarks/>
        public event getMovimentFromDeviceCompletedEventHandler getMovimentFromDeviceCompleted;
        
        /// <remarks/>
        public event getLastMovimentFromDateTimeCompletedEventHandler getLastMovimentFromDateTimeCompleted;
        
        /// <remarks/>
        public event getLastMovimentLogFromDateTimeCompletedEventHandler getLastMovimentLogFromDateTimeCompleted;
        
        /// <remarks/>
        public event getLastMovimentFromDateCompletedEventHandler getLastMovimentFromDateCompleted;
        
        /// <remarks/>
        public event getLastMovimentFromDateFiltredByMovimentTypeCompletedEventHandler getLastMovimentFromDateFiltredByMovimentTypeCompleted;
        
        /// <remarks/>
        public event getLastEmployeeMovimentsCompletedEventHandler getLastEmployeeMovimentsCompleted;
        
        /// <remarks/>
        public event getLastMovimentsCompletedEventHandler getLastMovimentsCompleted;
        
        /// <remarks/>
        public event getLastEmployeeMovimentsFromintervalCompletedEventHandler getLastEmployeeMovimentsFromintervalCompleted;
        
        /// <remarks/>
        public event getLastEmployeeMovimentsWorkCodeFromintervalCompletedEventHandler getLastEmployeeMovimentsWorkCodeFromintervalCompleted;
        
        /// <remarks/>
        public event getEmployeeAllMovimentsFromintervalCompletedEventHandler getEmployeeAllMovimentsFromintervalCompleted;
        
        /// <remarks/>
        public event getMovimentsFromIntervalByDepCompletedEventHandler getMovimentsFromIntervalByDepCompleted;
        
        /// <remarks/>
        public event getMovimentsFromIntervalByEmplCompletedEventHandler getMovimentsFromIntervalByEmplCompleted;
        
        /// <remarks/>
        public event addMovimentsLogsCompletedEventHandler addMovimentsLogsCompleted;
        
        /// <remarks/>
        public event getMovimentLogCompletedEventHandler getMovimentLogCompleted;
        
        /// <remarks/>
        public event getDeviceLastMovimentLogCompletedEventHandler getDeviceLastMovimentLogCompleted;
        
        /// <remarks/>
        public event getEmployeeAllMovimentsLogsFromintervalCompletedEventHandler getEmployeeAllMovimentsLogsFromintervalCompleted;
        
        /// <remarks/>
        public event addMovimentSuggestedCompletedEventHandler addMovimentSuggestedCompleted;
        
        /// <remarks/>
        public event getExceptionSuggestedMovsCompletedEventHandler getExceptionSuggestedMovsCompleted;
        
        /// <remarks/>
        public event getGprsMovimentNotTratedCompletedEventHandler getGprsMovimentNotTratedCompleted;
        
        /// <remarks/>
        public event setGPRSMovimentIgnoredCompletedEventHandler setGPRSMovimentIgnoredCompleted;
        
        /// <remarks/>
        public event getLastStepCompletedEventHandler getLastStepCompleted;
        
        /// <remarks/>
        public event getPreviousRespCompletedEventHandler getPreviousRespCompleted;
        
        /// <remarks/>
        public event getProcessActStateCompletedEventHandler getProcessActStateCompleted;
        
        /// <remarks/>
        public event getProcessDataCompletedEventHandler getProcessDataCompleted;
        
        /// <remarks/>
        public event getAllVacationsCompletedEventHandler getAllVacationsCompleted;
        
        /// <remarks/>
        public event getUseridEmployeeCompletedEventHandler getUseridEmployeeCompleted;
        
        /// <remarks/>
        public event getStateTypesCompletedEventHandler getStateTypesCompleted;
        
        /// <remarks/>
        public event changeStateCompletedEventHandler changeStateCompleted;
        
        /// <remarks/>
        public event initializeProcHistoryCompletedEventHandler initializeProcHistoryCompleted;
        
        /// <remarks/>
        public event newNotificationCompletedEventHandler newNotificationCompleted;
        
        /// <remarks/>
        public event getProcessDataAbsencesCompletedEventHandler getProcessDataAbsencesCompleted;
        
        /// <remarks/>
        public event addGprsMovimentCompletedEventHandler addGprsMovimentCompleted;
        
        /// <remarks/>
        public event insertHourBalanceDateCompletedEventHandler insertHourBalanceDateCompleted;
        
        /// <remarks/>
        public event getRealHourBalanceByEmployeeBetweenDateCompletedEventHandler getRealHourBalanceByEmployeeBetweenDateCompleted;
        
        /// <remarks/>
        public event getRealHourBalanceByEmployeeDateCompletedEventHandler getRealHourBalanceByEmployeeDateCompleted;
        
        /// <remarks/>
        public event getRealHourBalanceByEmployeeDateTypeCompletedEventHandler getRealHourBalanceByEmployeeDateTypeCompleted;
        
        /// <remarks/>
        public event insertHourPackageRealTimeDBCompletedEventHandler insertHourPackageRealTimeDBCompleted;
        
        /// <remarks/>
        public event updateHourPackageRealDBCompletedEventHandler updateHourPackageRealDBCompleted;
        
        /// <remarks/>
        public event deleteHourPackageRealDBCompletedEventHandler deleteHourPackageRealDBCompleted;
        
        /// <remarks/>
        public event getRealHourBalanceByEmployeeTotalByTypeDTCompletedEventHandler getRealHourBalanceByEmployeeTotalByTypeDTCompleted;
        
        /// <remarks/>
        public event getRealHourBalanceByEmployeeTotalByTypeCompletedEventHandler getRealHourBalanceByEmployeeTotalByTypeCompleted;
        
        /// <remarks/>
        public event getRealHourBalanceByEmployeeTotalCompletedEventHandler getRealHourBalanceByEmployeeTotalCompleted;
        
        /// <remarks/>
        public event insertHourPackageRealTimeResumeDBCompletedEventHandler insertHourPackageRealTimeResumeDBCompleted;
        
        /// <remarks/>
        public event updateHourPackageRealResumeDBCompletedEventHandler updateHourPackageRealResumeDBCompleted;
        
        /// <remarks/>
        public event updateHourPackageRealResumeOfEmpAndTypeDBCompletedEventHandler updateHourPackageRealResumeOfEmpAndTypeDBCompleted;
        
        /// <remarks/>
        public event deleteHourPackageRealResumeDBCompletedEventHandler deleteHourPackageRealResumeDBCompleted;
        
        /// <remarks/>
        public event hasConstructionCompletedEventHandler hasConstructionCompleted;
        
        /// <remarks/>
        public event newOrUpdateConstructionCompletedEventHandler newOrUpdateConstructionCompleted;
        
        /// <remarks/>
        public event getCentroCustoNameCompletedEventHandler getCentroCustoNameCompleted;
        
        /// <remarks/>
        public event delCentrosCustoCompletedEventHandler delCentrosCustoCompleted;
        
        /// <remarks/>
        public event changeCentrosCustoCompletedEventHandler changeCentrosCustoCompleted;
        
        /// <remarks/>
        public event addCentrosCustoCompletedEventHandler addCentrosCustoCompleted;
        
        /// <remarks/>
        public event getAllCentrosCustoCompletedEventHandler getAllCentrosCustoCompleted;
        
        /// <remarks/>
        public event addConstructionsEmployeesCompletedEventHandler addConstructionsEmployeesCompleted;
        
        /// <remarks/>
        public event delConstructionsEmployeesCompletedEventHandler delConstructionsEmployeesCompleted;
        
        /// <remarks/>
        public event getConstructionsEmployeesByIdConstructionsCompletedEventHandler getConstructionsEmployeesByIdConstructionsCompleted;
        
        /// <remarks/>
        public event getDevicesByNameCompletedEventHandler getDevicesByNameCompleted;
        
        /// <remarks/>
        public event delConstructionsDevicesCompletedEventHandler delConstructionsDevicesCompleted;
        
        /// <remarks/>
        public event addConstructionsDevicesCompletedEventHandler addConstructionsDevicesCompleted;
        
        /// <remarks/>
        public event getConstructionDevicesByIdConstructionsAndIdDevicesCompletedEventHandler getConstructionDevicesByIdConstructionsAndIdDevicesCompleted;
        
        /// <remarks/>
        public event getConstructionDevicesByDateCompletedEventHandler getConstructionDevicesByDateCompleted;
        
        /// <remarks/>
        public event getConstructionDevicesByIdDevicesCompletedEventHandler getConstructionDevicesByIdDevicesCompleted;
        
        /// <remarks/>
        public event getConstructionDevicesByIdConstructionCompletedEventHandler getConstructionDevicesByIdConstructionCompleted;
        
        /// <remarks/>
        public event getEmployeesInMobileDeviceCompletedEventHandler getEmployeesInMobileDeviceCompleted;
        
        /// <remarks/>
        public event getAllEmployeesDetailsToMobileCompletedEventHandler getAllEmployeesDetailsToMobileCompleted;
        
        /// <remarks/>
        public event addEmployeesInMobileCompletedEventHandler addEmployeesInMobileCompleted;
        
        /// <remarks/>
        public event delEmployeesInMobileCompletedEventHandler delEmployeesInMobileCompleted;
        
        /// <remarks/>
        public event getMovimentsFromMobileCompletedEventHandler getMovimentsFromMobileCompleted;
        
        /// <remarks/>
        public event getVacationsTypeCompletedEventHandler getVacationsTypeCompleted;
        
        /// <remarks/>
        public event getVersionFingerPrintCompletedEventHandler getVersionFingerPrintCompleted;
        
        /// <remarks/>
        public event addEmployeesInGPRSCompletedEventHandler addEmployeesInGPRSCompleted;
        
        /// <remarks/>
        public event delEmployeesInGPRSCompletedEventHandler delEmployeesInGPRSCompleted;
        
        /// <remarks/>
        public event getAllEmployeesDetailsToGPRSCompletedEventHandler getAllEmployeesDetailsToGPRSCompleted;
        
        /// <remarks/>
        public event getEmployeesInGPRSCompletedEventHandler getEmployeesInGPRSCompleted;
        
        /// <remarks/>
        public event addProfileMonthScheduleCompletedEventHandler addProfileMonthScheduleCompleted;
        
        /// <remarks/>
        public event addEmployeeProfileCompletedEventHandler addEmployeeProfileCompleted;
        
        /// <remarks/>
        public event updateEmployeeProfileCompletedEventHandler updateEmployeeProfileCompleted;
        
        /// <remarks/>
        public event deleteEmployeeProfileCompletedEventHandler deleteEmployeeProfileCompleted;
        
        /// <remarks/>
        public event getAllProfileMonthSchedulesCompletedEventHandler getAllProfileMonthSchedulesCompleted;
        
        /// <remarks/>
        public event getAllProfileYearMonthSchedulesCompletedEventHandler getAllProfileYearMonthSchedulesCompleted;
        
        /// <remarks/>
        public event getProfileMonthSchedulesCompletedEventHandler getProfileMonthSchedulesCompleted;
        
        /// <remarks/>
        public event getEmployeeProfileByDateCompletedEventHandler getEmployeeProfileByDateCompleted;
        
        /// <remarks/>
        public event getTodayIdMonthSchedulesCompletedEventHandler getTodayIdMonthSchedulesCompleted;
        
        /// <remarks/>
        public event addSchedulesCompletedEventHandler addSchedulesCompleted;
        
        /// <remarks/>
        public event delScheduleCompletedEventHandler delScheduleCompleted;
        
        /// <remarks/>
        public event updateSchedulesCompletedEventHandler updateSchedulesCompleted;
        
        /// <remarks/>
        public event getAllSchedulesCompletedEventHandler getAllSchedulesCompleted;
        
        /// <remarks/>
        public event getScheduleFromEnrollNumberAndDateCompletedEventHandler getScheduleFromEnrollNumberAndDateCompleted;
        
        /// <remarks/>
        public event getScalesFromEmployeeBetweenDateCompletedEventHandler getScalesFromEmployeeBetweenDateCompleted;
        
        /// <remarks/>
        public event setScaleFromEmployeeDateCompletedEventHandler setScaleFromEmployeeDateCompleted;
        
        /// <remarks/>
        public event delAllScalesFromEmployeeDateCompletedEventHandler delAllScalesFromEmployeeDateCompleted;
        
        /// <remarks/>
        public event getScheduleCompletedEventHandler getScheduleCompleted;
        
        /// <remarks/>
        public event getScheduleByNameCompletedEventHandler getScheduleByNameCompleted;
        
        /// <remarks/>
        public event getAllSchedulesProfileMonthCompletedEventHandler getAllSchedulesProfileMonthCompleted;
        
        /// <remarks/>
        public event getTodayIdScheduleCompletedEventHandler getTodayIdScheduleCompleted;
        
        /// <remarks/>
        public event getDateIdSchedulesCompletedEventHandler getDateIdSchedulesCompleted;
        
        /// <remarks/>
        public event getEmployeeScheduleFromDateCompletedEventHandler getEmployeeScheduleFromDateCompleted;
        
        /// <remarks/>
        public event getEmployeeShiftScheduleFromDateCompletedEventHandler getEmployeeShiftScheduleFromDateCompleted;
        
        /// <remarks/>
        public event addSchedulesBreaksCompletedEventHandler addSchedulesBreaksCompleted;
        
        /// <remarks/>
        public event delSchedulesBreaksCompletedEventHandler delSchedulesBreaksCompleted;
        
        /// <remarks/>
        public event delRelationSchedulesBreaksCompletedEventHandler delRelationSchedulesBreaksCompleted;
        
        /// <remarks/>
        public event getAllSchedulesBreaksCompletedEventHandler getAllSchedulesBreaksCompleted;
        
        /// <remarks/>
        public event getSchedulesBreaksCompletedEventHandler getSchedulesBreaksCompleted;
        
        /// <remarks/>
        public event addSchedulesChangesCompletedEventHandler addSchedulesChangesCompleted;
        
        /// <remarks/>
        public event updateSchedulesChangesCompletedEventHandler updateSchedulesChangesCompleted;
        
        /// <remarks/>
        public event delSchedulesChangesCompletedEventHandler delSchedulesChangesCompleted;
        
        /// <remarks/>
        public event getEmployeeScheduleChangeFromDateCompletedEventHandler getEmployeeScheduleChangeFromDateCompleted;
        
        /// <remarks/>
        public event addWorkResumeCompletedEventHandler addWorkResumeCompleted;
        
        /// <remarks/>
        public event delWorkResumeCompletedEventHandler delWorkResumeCompleted;
        
        /// <remarks/>
        public event changeWorkResumeCompletedEventHandler changeWorkResumeCompleted;
        
        /// <remarks/>
        public event changeWorkResumeClosedStateCompletedEventHandler changeWorkResumeClosedStateCompleted;
        
        /// <remarks/>
        public event getEmployeeDateResumeCompletedEventHandler getEmployeeDateResumeCompleted;
        
        /// <remarks/>
        public event getEmployeeDatePeriodResumeCompletedEventHandler getEmployeeDatePeriodResumeCompleted;
        
        /// <remarks/>
        public event getDatePeriodResumeByDepCompletedEventHandler getDatePeriodResumeByDepCompleted;
        
        /// <remarks/>
        public event addExtraHoursCompletedEventHandler addExtraHoursCompleted;
        
        /// <remarks/>
        public event delExtraHoursCompletedEventHandler delExtraHoursCompleted;
        
        /// <remarks/>
        public event delExtraHoursFromEmployeeOnDateCompletedEventHandler delExtraHoursFromEmployeeOnDateCompleted;
        
        /// <remarks/>
        public event getEmployeeExtraHoursCompletedEventHandler getEmployeeExtraHoursCompleted;
        
        /// <remarks/>
        public event getEmployeeDatePeriodExtraHoursCompletedEventHandler getEmployeeDatePeriodExtraHoursCompleted;
        
        /// <remarks/>
        public event getEmployeeDatePeriodExtraHoursFromWorkResumeCompletedEventHandler getEmployeeDatePeriodExtraHoursFromWorkResumeCompleted;
        
        /// <remarks/>
        public event addScheduleSequenceCompletedEventHandler addScheduleSequenceCompleted;
        
        /// <remarks/>
        public event updateScheduleSequenceCompletedEventHandler updateScheduleSequenceCompleted;
        
        /// <remarks/>
        public event delScheduleSequenceCompletedEventHandler delScheduleSequenceCompleted;
        
        /// <remarks/>
        public event getAllScheduleSequenceCompletedEventHandler getAllScheduleSequenceCompleted;
        
        /// <remarks/>
        public event getScheduleSequenceCompletedEventHandler getScheduleSequenceCompleted;
        
        /// <remarks/>
        public event addSSElementCompletedEventHandler addSSElementCompleted;
        
        /// <remarks/>
        public event updateSSElementCompletedEventHandler updateSSElementCompleted;
        
        /// <remarks/>
        public event delSSElementCompletedEventHandler delSSElementCompleted;
        
        /// <remarks/>
        public event getAllSSElementFromScheduleSequenceCompletedEventHandler getAllSSElementFromScheduleSequenceCompleted;
        
        /// <remarks/>
        public event setMonthScheduleIdScheduleInDayCompletedEventHandler setMonthScheduleIdScheduleInDayCompleted;
        
        /// <remarks/>
        public event getProfileIdScheduleAndIdMonthScheduleFromDateCompletedEventHandler getProfileIdScheduleAndIdMonthScheduleFromDateCompleted;
        
        /// <remarks/>
        public event getPcMovementsLogsCompletedEventHandler getPcMovementsLogsCompleted;
        
        /// <remarks/>
        public event addPcMovimentLogCompletedEventHandler addPcMovimentLogCompleted;
        
        /// <remarks/>
        public event setImportedPcMovCompletedEventHandler setImportedPcMovCompleted;
        
        /// <remarks/>
        public event getEnrollNumberCompletedEventHandler getEnrollNumberCompleted;
        
        /// <remarks/>
        public event getIdDeviceByCodeCompletedEventHandler getIdDeviceByCodeCompleted;
        
        /// <remarks/>
        public event getAllDevicesCompletedEventHandler getAllDevicesCompleted;
        
        /// <remarks/>
        public event getIpServerCompletedEventHandler getIpServerCompleted;
        
        /// <remarks/>
        public event addDevicesCompletedEventHandler addDevicesCompleted;
        
        /// <remarks/>
        public event changeDevicesCompletedEventHandler changeDevicesCompleted;
        
        /// <remarks/>
        public event getIdDeviceFromMachineNumberCompletedEventHandler getIdDeviceFromMachineNumberCompleted;
        
        /// <remarks/>
        public event getIpDeviceFromIdDeviceCompletedEventHandler getIpDeviceFromIdDeviceCompleted;
        
        /// <remarks/>
        public event delDeviceCompletedEventHandler delDeviceCompleted;
        
        /// <remarks/>
        public event addDeviceEmployeesCompletedEventHandler addDeviceEmployeesCompleted;
        
        /// <remarks/>
        public event changeDeviceEmployeesCompletedEventHandler changeDeviceEmployeesCompleted;
        
        /// <remarks/>
        public event delDeviceEmployeesCompletedEventHandler delDeviceEmployeesCompleted;
        
        /// <remarks/>
        public event getLastDeviceEnrollNumberCompletedEventHandler getLastDeviceEnrollNumberCompleted;
        
        /// <remarks/>
        public event getAllDeviceEmployeesCompletedEventHandler getAllDeviceEmployeesCompleted;
        
        /// <remarks/>
        public event getAllDeviceEmployeesFromDeviceCompletedEventHandler getAllDeviceEmployeesFromDeviceCompleted;
        
        /// <remarks/>
        public event getDeviceEmployeesFromEnrollNumberCompletedEventHandler getDeviceEmployeesFromEnrollNumberCompleted;
        
        /// <remarks/>
        public event getNextMovimentFromDateTimeCompletedEventHandler getNextMovimentFromDateTimeCompleted;
        
        /// <remarks/>
        public event translateMovimentsTableDBCompletedEventHandler translateMovimentsTableDBCompleted;
        
        /// <remarks/>
        public event getEmployeeExceptionFromDateCompletedEventHandler getEmployeeExceptionFromDateCompleted;
        
        /// <remarks/>
        public event getNotTratedExceptionsCompletedEventHandler getNotTratedExceptionsCompleted;
        
        /// <remarks/>
        public event getEmployeeExceptionFromDateIntervalCompletedEventHandler getEmployeeExceptionFromDateIntervalCompleted;
        
        /// <remarks/>
        public event addExceptionCompletedEventHandler addExceptionCompleted;
        
        /// <remarks/>
        public event changeExceptionCompletedEventHandler changeExceptionCompleted;
        
        /// <remarks/>
        public event setExceptionTratedCompletedEventHandler setExceptionTratedCompleted;
        
        /// <remarks/>
        public event setExceptionIgnoredCompletedEventHandler setExceptionIgnoredCompleted;
        
        /// <remarks/>
        public event deleteVacationsResumeCompletedEventHandler deleteVacationsResumeCompleted;
        
        /// <remarks/>
        public event getEmployeeFingerPrintCompletedEventHandler getEmployeeFingerPrintCompleted;
        
        /// <remarks/>
        public event getEmployeeFacesCompletedEventHandler getEmployeeFacesCompleted;
        
        /// <remarks/>
        public event getFingerPrintCompletedEventHandler getFingerPrintCompleted;
        
        /// <remarks/>
        public event getRelationShipEmployeesFingerprintsCompletedEventHandler getRelationShipEmployeesFingerprintsCompleted;
        
        /// <remarks/>
        public event addFingerPrintCompletedEventHandler addFingerPrintCompleted;
        
        /// <remarks/>
        public event delFingerPrintCompletedEventHandler delFingerPrintCompleted;
        
        /// <remarks/>
        public event updateFingerPrintCompletedEventHandler updateFingerPrintCompleted;
        
        /// <remarks/>
        public event delEmployeeFingerPrintCompletedEventHandler delEmployeeFingerPrintCompleted;
        
        /// <remarks/>
        public event getRfidCardCompletedEventHandler getRfidCardCompleted;
        
        /// <remarks/>
        public event addRfidCardsCompletedEventHandler addRfidCardsCompleted;
        
        /// <remarks/>
        public event getEmployeeRfidCardsCompletedEventHandler getEmployeeRfidCardsCompleted;
        
        /// <remarks/>
        public event updateRfidCardCompletedEventHandler updateRfidCardCompleted;
        
        /// <remarks/>
        public event getEmployeeCardNumberCompletedEventHandler getEmployeeCardNumberCompleted;
        
        /// <remarks/>
        public event getAllEmployeeCardNumberCompletedEventHandler getAllEmployeeCardNumberCompleted;
        
        /// <remarks/>
        public event getAllSkillsCompletedEventHandler getAllSkillsCompleted;
        
        /// <remarks/>
        public event getAllProfessionalCategoriesCompletedEventHandler getAllProfessionalCategoriesCompleted;
        
        /// <remarks/>
        public event addSkillsCompletedEventHandler addSkillsCompleted;
        
        /// <remarks/>
        public event changeSkillsCompletedEventHandler changeSkillsCompleted;
        
        /// <remarks/>
        public event delSkillsCompletedEventHandler delSkillsCompleted;
        
        /// <remarks/>
        public event getScaleServiceSkillsCompletedEventHandler getScaleServiceSkillsCompleted;
        
        /// <remarks/>
        public event delAllScaleServiceSkillsCompletedEventHandler delAllScaleServiceSkillsCompleted;
        
        /// <remarks/>
        public event getScalesServicesSchedulesCompletedEventHandler getScalesServicesSchedulesCompleted;
        
        /// <remarks/>
        public event getEmployeeScalesCompletedEventHandler getEmployeeScalesCompleted;
        
        /// <remarks/>
        public event delAllScaleServiceSchedulesCompletedEventHandler delAllScaleServiceSchedulesCompleted;
        
        /// <remarks/>
        public event addScaleServiceSchedulesCompletedEventHandler addScaleServiceSchedulesCompleted;
        
        /// <remarks/>
        public event addScaleServiceSkillsCompletedEventHandler addScaleServiceSkillsCompleted;
        
        /// <remarks/>
        public event getEmployeeSkillsCompletedEventHandler getEmployeeSkillsCompleted;
        
        /// <remarks/>
        public event delEmployeeSkillCompletedEventHandler delEmployeeSkillCompleted;
        
        /// <remarks/>
        public event addEmployeeSkillCompletedEventHandler addEmployeeSkillCompleted;
        
        /// <remarks/>
        public event updateEmployeeSkillsCompletedEventHandler updateEmployeeSkillsCompleted;
        
        /// <remarks/>
        public event getAllContractsCompletedEventHandler getAllContractsCompleted;
        
        /// <remarks/>
        public event addContractsCompletedEventHandler addContractsCompleted;
        
        /// <remarks/>
        public event changeContractsCompletedEventHandler changeContractsCompleted;
        
        /// <remarks/>
        public event delContractsCompletedEventHandler delContractsCompleted;
        
        /// <remarks/>
        public event getEmployeeContractsCompletedEventHandler getEmployeeContractsCompleted;
        
        /// <remarks/>
        public event delEmployeeContractsCompletedEventHandler delEmployeeContractsCompleted;
        
        /// <remarks/>
        public event addEmployeeContractsCompletedEventHandler addEmployeeContractsCompleted;
        
        /// <remarks/>
        public event updateEmployeeContractsCompletedEventHandler updateEmployeeContractsCompleted;
        
        /// <remarks/>
        public event updateEmployeeOperationalSkillsCompletedEventHandler updateEmployeeOperationalSkillsCompleted;
        
        /// <remarks/>
        public event getEmployeeOperationalSkillsCompletedEventHandler getEmployeeOperationalSkillsCompleted;
        
        /// <remarks/>
        public event delEmployeeOperationalSkillCompletedEventHandler delEmployeeOperationalSkillCompleted;
        
        /// <remarks/>
        public event addEmployeeOperationalSkillCompletedEventHandler addEmployeeOperationalSkillCompleted;
        
        /// <remarks/>
        public event getAllCareerFunctionsCompletedEventHandler getAllCareerFunctionsCompleted;
        
        /// <remarks/>
        public event addCareerFunctionsCompletedEventHandler addCareerFunctionsCompleted;
        
        /// <remarks/>
        public event changeCareerFunctionsCompletedEventHandler changeCareerFunctionsCompleted;
        
        /// <remarks/>
        public event delCareerFunctionsCompletedEventHandler delCareerFunctionsCompleted;
        
        /// <remarks/>
        public event getEmployeeCareerFunctionCompletedEventHandler getEmployeeCareerFunctionCompleted;
        
        /// <remarks/>
        public event delEmployeeCareerFunctionCompletedEventHandler delEmployeeCareerFunctionCompleted;
        
        /// <remarks/>
        public event updateEmployeeCareerFunctionCompletedEventHandler updateEmployeeCareerFunctionCompleted;
        
        /// <remarks/>
        public event addEmployeeCareerFunctionCompletedEventHandler addEmployeeCareerFunctionCompleted;
        
        /// <remarks/>
        public event getAllAptitudeExamsCompletedEventHandler getAllAptitudeExamsCompleted;
        
        /// <remarks/>
        public event addAptitudeExamsCompletedEventHandler addAptitudeExamsCompleted;
        
        /// <remarks/>
        public event changeAptitudeExamsCompletedEventHandler changeAptitudeExamsCompleted;
        
        /// <remarks/>
        public event delAptitudeExamsCompletedEventHandler delAptitudeExamsCompleted;
        
        /// <remarks/>
        public event getAllAptitudeExamsEmployeeCompletedEventHandler getAllAptitudeExamsEmployeeCompleted;
        
        /// <remarks/>
        public event delEmployeeAptitudeExamCompletedEventHandler delEmployeeAptitudeExamCompleted;
        
        /// <remarks/>
        public event addEmployeeAptitudeExamsCompletedEventHandler addEmployeeAptitudeExamsCompleted;
        
        /// <remarks/>
        public event updateEmployeeExamsCompletedEventHandler updateEmployeeExamsCompleted;
        
        /// <remarks/>
        public event getEmployeeDocumentsCompletedEventHandler getEmployeeDocumentsCompleted;
        
        /// <remarks/>
        public event addEmployeeDocumentsCompletedEventHandler addEmployeeDocumentsCompleted;
        
        /// <remarks/>
        public event updateEmployeeDocumentsCompletedEventHandler updateEmployeeDocumentsCompleted;
        
        /// <remarks/>
        public event delEmployeeDocumentsCompletedEventHandler delEmployeeDocumentsCompleted;
        
        /// <remarks/>
        public event getAllTrainingCompletedEventHandler getAllTrainingCompleted;
        
        /// <remarks/>
        public event addTrainingCompletedEventHandler addTrainingCompleted;
        
        /// <remarks/>
        public event updateTrainingCompletedEventHandler updateTrainingCompleted;
        
        /// <remarks/>
        public event delTrainingCompletedEventHandler delTrainingCompleted;
        
        /// <remarks/>
        public event getAllActivationsEmployCompletedEventHandler getAllActivationsEmployCompleted;
        
        /// <remarks/>
        public event delEmployeeActivationCompletedEventHandler delEmployeeActivationCompleted;
        
        /// <remarks/>
        public event addEmployeeActivationCompletedEventHandler addEmployeeActivationCompleted;
        
        /// <remarks/>
        public event delBreakCompletedEventHandler delBreakCompleted;
        
        /// <remarks/>
        public event updateBreaksCompletedEventHandler updateBreaksCompleted;
        
        /// <remarks/>
        public event addMonthSchedulesCompletedEventHandler addMonthSchedulesCompleted;
        
        /// <remarks/>
        public event updateMonthSchedulesCompletedEventHandler updateMonthSchedulesCompleted;
        
        /// <remarks/>
        public event delWorkPlaneCompletedEventHandler delWorkPlaneCompleted;
        
        /// <remarks/>
        public event getAllMonthSchedulesCompletedEventHandler getAllMonthSchedulesCompleted;
        
        /// <remarks/>
        public event getAllscalesServicesCompletedEventHandler getAllscalesServicesCompleted;
        
        /// <remarks/>
        public event getScalesServicesCompletedEventHandler getScalesServicesCompleted;
        
        /// <remarks/>
        public event getScalesServicesEmployeeCompletedEventHandler getScalesServicesEmployeeCompleted;
        
        /// <remarks/>
        public event delScalesServicesCompletedEventHandler delScalesServicesCompleted;
        
        /// <remarks/>
        public event updateScalesServicesCompletedEventHandler updateScalesServicesCompleted;
        
        /// <remarks/>
        public event addScalesServicesCompletedEventHandler addScalesServicesCompleted;
        
        /// <remarks/>
        public event delEmployeeScalesServicesCompletedEventHandler delEmployeeScalesServicesCompleted;
        
        /// <remarks/>
        public event getScalesServicesOfEmployeeCompletedEventHandler getScalesServicesOfEmployeeCompleted;
        
        /// <remarks/>
        public event setEmployeeScalesServicesCompletedEventHandler setEmployeeScalesServicesCompleted;
        
        /// <remarks/>
        public event addUsersCompletedEventHandler addUsersCompleted;
        
        /// <remarks/>
        public event changeUsersCompletedEventHandler changeUsersCompleted;
        
        /// <remarks/>
        public event changeUsersPassCompletedEventHandler changeUsersPassCompleted;
        
        /// <remarks/>
        public event delUsersCompletedEventHandler delUsersCompleted;
        
        /// <remarks/>
        public event getUsersCompletedEventHandler getUsersCompleted;
        
        /// <remarks/>
        public event getUsersByLoginCompletedEventHandler getUsersByLoginCompleted;
        
        /// <remarks/>
        public event getUserIdCompletedEventHandler getUserIdCompleted;
        
        /// <remarks/>
        public event getIdEmployeeCompletedEventHandler getIdEmployeeCompleted;
        
        /// <remarks/>
        public event getIdEmployeeByNumberCompletedEventHandler getIdEmployeeByNumberCompleted;
        
        /// <remarks/>
        public event addUsersDepartmentCompletedEventHandler addUsersDepartmentCompleted;
        
        /// <remarks/>
        public event changeUsersDepartmentCompletedEventHandler changeUsersDepartmentCompleted;
        
        /// <remarks/>
        public event delUsersDepartmentCompletedEventHandler delUsersDepartmentCompleted;
        
        /// <remarks/>
        public event getUserDepartmentsCompletedEventHandler getUserDepartmentsCompleted;
        
        /// <remarks/>
        public event getUserFunctionsCompletedEventHandler getUserFunctionsCompleted;
        
        /// <remarks/>
        public event getUserRolesCompletedEventHandler getUserRolesCompleted;
        
        /// <remarks/>
        public event addUserRolesCompletedEventHandler addUserRolesCompleted;
        
        /// <remarks/>
        public event addUserFunctionsCompletedEventHandler addUserFunctionsCompleted;
        
        /// <remarks/>
        public event delUserRolesCompletedEventHandler delUserRolesCompleted;
        
        /// <remarks/>
        public event delAllUserRolesCompletedEventHandler delAllUserRolesCompleted;
        
        /// <remarks/>
        public event delUserFunctionsCompletedEventHandler delUserFunctionsCompleted;
        
        /// <remarks/>
        public event getAllOperationalRequirementsCompletedEventHandler getAllOperationalRequirementsCompleted;
        
        /// <remarks/>
        public event addOperationalRequirementsCompletedEventHandler addOperationalRequirementsCompleted;
        
        /// <remarks/>
        public event changeOperationalRequirementsCompletedEventHandler changeOperationalRequirementsCompleted;
        
        /// <remarks/>
        public event delOperationalRequirementsCompletedEventHandler delOperationalRequirementsCompleted;
        
        /// <remarks/>
        public event getOperatRequirementsServiceCompletedEventHandler getOperatRequirementsServiceCompleted;
        
        /// <remarks/>
        public event delOperatRequirementsServiceCompletedEventHandler delOperatRequirementsServiceCompleted;
        
        /// <remarks/>
        public event addOperatRequirementsServiceCompletedEventHandler addOperatRequirementsServiceCompleted;
        
        /// <remarks/>
        public event updateOperatRequirementsServiceCompletedEventHandler updateOperatRequirementsServiceCompleted;
        
        /// <remarks/>
        public event delAbsencesFromDateCompletedEventHandler delAbsencesFromDateCompleted;
        
        /// <remarks/>
        public event delEmployeeAbsencesRelationFromDateCompletedEventHandler delEmployeeAbsencesRelationFromDateCompleted;
        
        /// <remarks/>
        public event addOrUpdateEmployeeCompletedEventHandler addOrUpdateEmployeeCompleted;
        
        /// <remarks/>
        public event addOrUpdateEmployeeFCPCompletedEventHandler addOrUpdateEmployeeFCPCompleted;
        
        /// <remarks/>
        public event updateEmployeeCompletedEventHandler updateEmployeeCompleted;
        
        /// <remarks/>
        public event delEmployeeCompletedEventHandler delEmployeeCompleted;
        
        /// <remarks/>
        public event getAllFingerPrintsCompletedEventHandler getAllFingerPrintsCompleted;
        
        /// <remarks/>
        public event getEmployeeByNumberAndPasswordCompletedEventHandler getEmployeeByNumberAndPasswordCompleted;
        
        /// <remarks/>
        public event getAllEmployeesCompletedEventHandler getAllEmployeesCompleted;
        
        /// <remarks/>
        public event getAllEmployeesDetailsCompletedEventHandler getAllEmployeesDetailsCompleted;
        
        /// <remarks/>
        public event getEmployeesDetailsByIdDepartmentCompletedEventHandler getEmployeesDetailsByIdDepartmentCompleted;
        
        /// <remarks/>
        public event getPictureFromDatabaseCompletedEventHandler getPictureFromDatabaseCompleted;
        
        /// <remarks/>
        public event getEmployeeCompletedEventHandler getEmployeeCompleted;
        
        /// <remarks/>
        public event getEmployeeFromNumberCompletedEventHandler getEmployeeFromNumberCompleted;
        
        /// <remarks/>
        public event changeEmployeeProfileCompletedEventHandler changeEmployeeProfileCompleted;
        
        /// <remarks/>
        public event changeEmployeeDeviceParamCompletedEventHandler changeEmployeeDeviceParamCompleted;
        
        /// <remarks/>
        public event getEmployeeLastNumberCompletedEventHandler getEmployeeLastNumberCompleted;
        
        /// <remarks/>
        public event getEmployeeProfileCompletedEventHandler getEmployeeProfileCompleted;
        
        /// <remarks/>
        public event getEmployeeAllProfilesCompletedEventHandler getEmployeeAllProfilesCompleted;
        
        /// <remarks/>
        public event getAllProfileEmployeesCompletedEventHandler getAllProfileEmployeesCompleted;
        
        /// <remarks/>
        public event saveEmployeePictureCompletedEventHandler saveEmployeePictureCompleted;
        
        /// <remarks/>
        public event getEmployeePictureCompletedEventHandler getEmployeePictureCompleted;
        
        /// <remarks/>
        public event getEmployeeAbsencesCompletedEventHandler getEmployeeAbsencesCompleted;
        
        /// <remarks/>
        public event getEmployeeAbsencesApprovedCompletedEventHandler getEmployeeAbsencesApprovedCompleted;
        
        /// <remarks/>
        public event addEmployeeAbsencesCompletedEventHandler addEmployeeAbsencesCompleted;
        
        /// <remarks/>
        public event updateAbsencesCompletedEventHandler updateAbsencesCompleted;
        
        /// <remarks/>
        public event delEmployeeAbsencesCompletedEventHandler delEmployeeAbsencesCompleted;
        
        /// <remarks/>
        public event getEmployeesOnAbsencesFromDateCompletedEventHandler getEmployeesOnAbsencesFromDateCompleted;
        
        /// <remarks/>
        public event getEmployeeMonthAbsencesCompletedEventHandler getEmployeeMonthAbsencesCompleted;
        
        /// <remarks/>
        public event getEmployeeAbsencesFromDateCompletedEventHandler getEmployeeAbsencesFromDateCompleted;
        
        /// <remarks/>
        public event getEmployeeAbsencesFromBeginDateAndEndDateCompletedEventHandler getEmployeeAbsencesFromBeginDateAndEndDateCompleted;
        
        /// <remarks/>
        public event getEmployeeDatePeriodAbsencesCompletedEventHandler getEmployeeDatePeriodAbsencesCompleted;
        
        /// <remarks/>
        public event getEmployeeDatePeriodAbsencesByReasonCompletedEventHandler getEmployeeDatePeriodAbsencesByReasonCompleted;
        
        /// <remarks/>
        public event getAllAbsencesWDetailsYearCompletedEventHandler getAllAbsencesWDetailsYearCompleted;
        
        /// <remarks/>
        public event getAllAbsencesWDetailsCompletedEventHandler getAllAbsencesWDetailsCompleted;
        
        /// <remarks/>
        public event getAllAbsencesCompletedEventHandler getAllAbsencesCompleted;
        
        /// <remarks/>
        public event getAllAbsencesApprovedCompletedEventHandler getAllAbsencesApprovedCompleted;
        
        /// <remarks/>
        public event getLastInsertedAbsenceCompletedEventHandler getLastInsertedAbsenceCompleted;
        
        /// <remarks/>
        public event getEmployeeVacationsCompletedEventHandler getEmployeeVacationsCompleted;
        
        /// <remarks/>
        public event getEmployeeVacationsByPeriodCompletedEventHandler getEmployeeVacationsByPeriodCompleted;
        
        /// <remarks/>
        public event getEmployeeVacationsByPeriodToPrimaveraCompletedEventHandler getEmployeeVacationsByPeriodToPrimaveraCompleted;
        
        /// <remarks/>
        public event getEmployeeMonthVacationsCompletedEventHandler getEmployeeMonthVacationsCompleted;
        
        /// <remarks/>
        public event addEmployeeVacationsCompletedEventHandler addEmployeeVacationsCompleted;
        
        /// <remarks/>
        public event updateVacationsCompletedEventHandler updateVacationsCompleted;
        
        /// <remarks/>
        public event delEmployeeVacationsCompletedEventHandler delEmployeeVacationsCompleted;
        
        /// <remarks/>
        public event getEmployeesOnVacationsFromDateCompletedEventHandler getEmployeesOnVacationsFromDateCompleted;
        
        /// <remarks/>
        public event getEmployeeVacationFromDateCompletedEventHandler getEmployeeVacationFromDateCompleted;
        
        /// <remarks/>
        public event getEmployeeVacationFromBeginAndEndDateCompletedEventHandler getEmployeeVacationFromBeginAndEndDateCompleted;
        
        /// <remarks/>
        public event getEmployeeDatePeriodVacationsCompletedEventHandler getEmployeeDatePeriodVacationsCompleted;
        
        /// <remarks/>
        public event getAllVacationsYearCompletedEventHandler getAllVacationsYearCompleted;
        
        /// <remarks/>
        public event getVacationsApprovedCompletedEventHandler getVacationsApprovedCompleted;
        
        /// <remarks/>
        public event getEmployeeAllMonthVacationsCompletedEventHandler getEmployeeAllMonthVacationsCompleted;
        
        /// <remarks/>
        public event getAllVacationsOrderByIdVacationsCompletedEventHandler getAllVacationsOrderByIdVacationsCompleted;
        
        /// <remarks/>
        public event getEmployeeAllVacationsResumeCompletedEventHandler getEmployeeAllVacationsResumeCompleted;
        
        /// <remarks/>
        public event getEmployeeYearVacationsResumeCompletedEventHandler getEmployeeYearVacationsResumeCompleted;
        
        /// <remarks/>
        public event addVacationsResumeCompletedEventHandler addVacationsResumeCompleted;
        
        /// <remarks/>
        public event updateVacationsResumeCompletedEventHandler updateVacationsResumeCompleted;
        
        /// <remarks/>
        public event getSecurityTokenCompletedEventHandler getSecurityTokenCompleted;
        
        /// <remarks/>
        public event removeSecurityTokenCompletedEventHandler removeSecurityTokenCompleted;
        
        /// <remarks/>
        public event pingCompletedEventHandler pingCompleted;
        
        /// <remarks/>
        public event backupDataBaseCompletedEventHandler backupDataBaseCompleted;
        
        /// <remarks/>
        public event backupDBCompletedEventHandler backupDBCompleted;
        
        /// <remarks/>
        public event restoreDBCompletedEventHandler restoreDBCompleted;
        
        /// <remarks/>
        public event runUpdateScriptCompletedEventHandler runUpdateScriptCompleted;
        
        /// <remarks/>
        public event translateRolesTableDBCompletedEventHandler translateRolesTableDBCompleted;
        
        /// <remarks/>
        public event translateExceptionsTableDBCompletedEventHandler translateExceptionsTableDBCompleted;
        
        /// <remarks/>
        public event hasEmployeesCompletedEventHandler hasEmployeesCompleted;
        
        /// <remarks/>
        public event unboundUsersDepartCompletedEventHandler unboundUsersDepartCompleted;
        
        /// <remarks/>
        public event hasuserCompletedEventHandler hasuserCompleted;
        
        /// <remarks/>
        public event getDepartmentNameCompletedEventHandler getDepartmentNameCompleted;
        
        /// <remarks/>
        public event getDepartmentByNameCompletedEventHandler getDepartmentByNameCompleted;
        
        /// <remarks/>
        public event getDepartmentByNameAndFatherCompletedEventHandler getDepartmentByNameAndFatherCompleted;
        
        /// <remarks/>
        public event unboundEmployeesDepartCompletedEventHandler unboundEmployeesDepartCompleted;
        
        /// <remarks/>
        public event addDepartmentCompletedEventHandler addDepartmentCompleted;
        
        /// <remarks/>
        public event addAcademicDegreeCompletedEventHandler addAcademicDegreeCompleted;
        
        /// <remarks/>
        public event changeAcademicDegreeCompletedEventHandler changeAcademicDegreeCompleted;
        
        /// <remarks/>
        public event delAcademicDegreeCompletedEventHandler delAcademicDegreeCompleted;
        
        /// <remarks/>
        public event getAllAcademicDegreeCompletedEventHandler getAllAcademicDegreeCompleted;
        
        /// <remarks/>
        public event getAllBreakTypesCompletedEventHandler getAllBreakTypesCompleted;
        
        /// <remarks/>
        public event addBreakTypeCompletedEventHandler addBreakTypeCompleted;
        
        /// <remarks/>
        public event changeBreakTypeCompletedEventHandler changeBreakTypeCompleted;
        
        /// <remarks/>
        public event delBreakTypeCompletedEventHandler delBreakTypeCompleted;
        
        /// <remarks/>
        public event getAllCitiesCompletedEventHandler getAllCitiesCompleted;
        
        /// <remarks/>
        public event getCitiesByNameCompletedEventHandler getCitiesByNameCompleted;
        
        /// <remarks/>
        public event addCityCompletedEventHandler addCityCompleted;
        
        /// <remarks/>
        public event changeCityCompletedEventHandler changeCityCompleted;
        
        /// <remarks/>
        public event delCityCompletedEventHandler delCityCompleted;
        
        /// <remarks/>
        public event getAllCountriesCompletedEventHandler getAllCountriesCompleted;
        
        /// <remarks/>
        public event getCountryByNameCompletedEventHandler getCountryByNameCompleted;
        
        /// <remarks/>
        public event addCountryCompletedEventHandler addCountryCompleted;
        
        /// <remarks/>
        public event changeCountryCompletedEventHandler changeCountryCompleted;
        
        /// <remarks/>
        public event delCountryCompletedEventHandler delCountryCompleted;
        
        /// <remarks/>
        public event getAllDepartmentsCompletedEventHandler getAllDepartmentsCompleted;
        
        /// <remarks/>
        public event changeDepartmentCompletedEventHandler changeDepartmentCompleted;
        
        /// <remarks/>
        public event changeDepartmentNameCompletedEventHandler changeDepartmentNameCompleted;
        
        /// <remarks/>
        public event delDepartmentCompletedEventHandler delDepartmentCompleted;
        
        /// <remarks/>
        public event getAllDevicesTypeCompletedEventHandler getAllDevicesTypeCompleted;
        
        /// <remarks/>
        public event getAllExceptionTypeCompletedEventHandler getAllExceptionTypeCompleted;
        
        /// <remarks/>
        public event getAllFunctionsCompletedEventHandler getAllFunctionsCompleted;
        
        /// <remarks/>
        public event addFunctionsRolesCompletedEventHandler addFunctionsRolesCompleted;
        
        /// <remarks/>
        public event delFunctionsRolesCompletedEventHandler delFunctionsRolesCompleted;
        
        /// <remarks/>
        public event getRoleFunctionsCompletedEventHandler getRoleFunctionsCompleted;
        
        /// <remarks/>
        public event getAllHolidaysCompletedEventHandler getAllHolidaysCompleted;
        
        /// <remarks/>
        public event getHolidaysByIDCompletedEventHandler getHolidaysByIDCompleted;
        
        /// <remarks/>
        public event addHolidaysCompletedEventHandler addHolidaysCompleted;
        
        /// <remarks/>
        public event changeHolidaysCompletedEventHandler changeHolidaysCompleted;
        
        /// <remarks/>
        public event getHolidayFromDateCompletedEventHandler getHolidayFromDateCompleted;
        
        /// <remarks/>
        public event delHolidaysCompletedEventHandler delHolidaysCompleted;
        
        /// <remarks/>
        public event getAllMovimentsTypeCompletedEventHandler getAllMovimentsTypeCompleted;
        
        /// <remarks/>
        public event getAllNationalitiesCompletedEventHandler getAllNationalitiesCompleted;
        
        /// <remarks/>
        public event getNationalitiesByNameCompletedEventHandler getNationalitiesByNameCompleted;
        
        /// <remarks/>
        public event addNationalityCompletedEventHandler addNationalityCompleted;
        
        /// <remarks/>
        public event changeNationalityCompletedEventHandler changeNationalityCompleted;
        
        /// <remarks/>
        public event delNationalityCompletedEventHandler delNationalityCompleted;
        
        /// <remarks/>
        public event changeParametersCompletedEventHandler changeParametersCompleted;
        
        /// <remarks/>
        public event changeParametersByNameCompletedEventHandler changeParametersByNameCompleted;
        
        /// <remarks/>
        public event setParametersDefaultCompletedEventHandler setParametersDefaultCompleted;
        
        /// <remarks/>
        public event getAllParametersCompletedEventHandler getAllParametersCompleted;
        
        /// <remarks/>
        public event getAllProfilesCompletedEventHandler getAllProfilesCompleted;
        
        /// <remarks/>
        public event addProfileCompletedEventHandler addProfileCompleted;
        
        /// <remarks/>
        public event changeProfileCompletedEventHandler changeProfileCompleted;
        
        /// <remarks/>
        public event delProfileCompletedEventHandler delProfileCompleted;
        
        /// <remarks/>
        public event getProfileWorktypeCompletedEventHandler getProfileWorktypeCompleted;
        
        /// <remarks/>
        public event getAllReasonsCompletedEventHandler getAllReasonsCompleted;
        
        /// <remarks/>
        public event addReasonsCompletedEventHandler addReasonsCompleted;
        
        /// <remarks/>
        public event changeReasonsCompletedEventHandler changeReasonsCompleted;
        
        /// <remarks/>
        public event delReasonsCompletedEventHandler delReasonsCompleted;
        
        /// <remarks/>
        public event getAllRolesCompletedEventHandler getAllRolesCompleted;
        
        /// <remarks/>
        public event addRolesCompletedEventHandler addRolesCompleted;
        
        /// <remarks/>
        public event changeRolesCompletedEventHandler changeRolesCompleted;
        
        /// <remarks/>
        public event delRolesCompletedEventHandler delRolesCompleted;
        
        /// <remarks/>
        public event getStatisticsFromDateCompletedEventHandler getStatisticsFromDateCompleted;
        
        /// <remarks/>
        public event addStatisticCompletedEventHandler addStatisticCompleted;
        
        /// <remarks/>
        public event changeStatisticsCompletedEventHandler changeStatisticsCompleted;
        
        /// <remarks/>
        public event getAllTypeExtraHoursCompletedEventHandler getAllTypeExtraHoursCompleted;
        
        /// <remarks/>
        public event changeTypeExtraHoursCompletedEventHandler changeTypeExtraHoursCompleted;
        
        /// <remarks/>
        public event getAllUsersCompletedEventHandler getAllUsersCompleted;
        
        /// <remarks/>
        public event getUserDataCompletedEventHandler getUserDataCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getAllWarnings", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getAllWarnings(string pToken) {
            object[] results = this.Invoke("getAllWarnings", new object[] {
                        pToken});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getAllWarningsAsync(string pToken) {
            this.getAllWarningsAsync(pToken, null);
        }
        
        /// <remarks/>
        public void getAllWarningsAsync(string pToken, object userState) {
            if ((this.getAllWarningsOperationCompleted == null)) {
                this.getAllWarningsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllWarningsOperationCompleted);
            }
            this.InvokeAsync("getAllWarnings", new object[] {
                        pToken}, this.getAllWarningsOperationCompleted, userState);
        }
        
        private void OngetAllWarningsOperationCompleted(object arg) {
            if ((this.getAllWarningsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllWarningsCompleted(this, new getAllWarningsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getAllTaskManagementProfile", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getAllTaskManagementProfile(string pToken) {
            object[] results = this.Invoke("getAllTaskManagementProfile", new object[] {
                        pToken});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getAllTaskManagementProfileAsync(string pToken) {
            this.getAllTaskManagementProfileAsync(pToken, null);
        }
        
        /// <remarks/>
        public void getAllTaskManagementProfileAsync(string pToken, object userState) {
            if ((this.getAllTaskManagementProfileOperationCompleted == null)) {
                this.getAllTaskManagementProfileOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllTaskManagementProfileOperationCompleted);
            }
            this.InvokeAsync("getAllTaskManagementProfile", new object[] {
                        pToken}, this.getAllTaskManagementProfileOperationCompleted, userState);
        }
        
        private void OngetAllTaskManagementProfileOperationCompleted(object arg) {
            if ((this.getAllTaskManagementProfileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllTaskManagementProfileCompleted(this, new getAllTaskManagementProfileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/addTaskManagementProfile", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int addTaskManagementProfile(string pToken, string name) {
            object[] results = this.Invoke("addTaskManagementProfile", new object[] {
                        pToken,
                        name});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void addTaskManagementProfileAsync(string pToken, string name) {
            this.addTaskManagementProfileAsync(pToken, name, null);
        }
        
        /// <remarks/>
        public void addTaskManagementProfileAsync(string pToken, string name, object userState) {
            if ((this.addTaskManagementProfileOperationCompleted == null)) {
                this.addTaskManagementProfileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddTaskManagementProfileOperationCompleted);
            }
            this.InvokeAsync("addTaskManagementProfile", new object[] {
                        pToken,
                        name}, this.addTaskManagementProfileOperationCompleted, userState);
        }
        
        private void OnaddTaskManagementProfileOperationCompleted(object arg) {
            if ((this.addTaskManagementProfileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addTaskManagementProfileCompleted(this, new addTaskManagementProfileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/changeTaskManagementProfile", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int changeTaskManagementProfile(string pToken, string idTaskManagementProfile, string name) {
            object[] results = this.Invoke("changeTaskManagementProfile", new object[] {
                        pToken,
                        idTaskManagementProfile,
                        name});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void changeTaskManagementProfileAsync(string pToken, string idTaskManagementProfile, string name) {
            this.changeTaskManagementProfileAsync(pToken, idTaskManagementProfile, name, null);
        }
        
        /// <remarks/>
        public void changeTaskManagementProfileAsync(string pToken, string idTaskManagementProfile, string name, object userState) {
            if ((this.changeTaskManagementProfileOperationCompleted == null)) {
                this.changeTaskManagementProfileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnchangeTaskManagementProfileOperationCompleted);
            }
            this.InvokeAsync("changeTaskManagementProfile", new object[] {
                        pToken,
                        idTaskManagementProfile,
                        name}, this.changeTaskManagementProfileOperationCompleted, userState);
        }
        
        private void OnchangeTaskManagementProfileOperationCompleted(object arg) {
            if ((this.changeTaskManagementProfileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.changeTaskManagementProfileCompleted(this, new changeTaskManagementProfileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/deleteTaskManagementProfile", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int deleteTaskManagementProfile(string pToken, string idTaskManagementProfile) {
            object[] results = this.Invoke("deleteTaskManagementProfile", new object[] {
                        pToken,
                        idTaskManagementProfile});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void deleteTaskManagementProfileAsync(string pToken, string idTaskManagementProfile) {
            this.deleteTaskManagementProfileAsync(pToken, idTaskManagementProfile, null);
        }
        
        /// <remarks/>
        public void deleteTaskManagementProfileAsync(string pToken, string idTaskManagementProfile, object userState) {
            if ((this.deleteTaskManagementProfileOperationCompleted == null)) {
                this.deleteTaskManagementProfileOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeleteTaskManagementProfileOperationCompleted);
            }
            this.InvokeAsync("deleteTaskManagementProfile", new object[] {
                        pToken,
                        idTaskManagementProfile}, this.deleteTaskManagementProfileOperationCompleted, userState);
        }
        
        private void OndeleteTaskManagementProfileOperationCompleted(object arg) {
            if ((this.deleteTaskManagementProfileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deleteTaskManagementProfileCompleted(this, new deleteTaskManagementProfileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getEmployeesWithFingerPrint", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable getEmployeesWithFingerPrint() {
            object[] results = this.Invoke("getEmployeesWithFingerPrint", new object[0]);
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void getEmployeesWithFingerPrintAsync() {
            this.getEmployeesWithFingerPrintAsync(null);
        }
        
        /// <remarks/>
        public void getEmployeesWithFingerPrintAsync(object userState) {
            if ((this.getEmployeesWithFingerPrintOperationCompleted == null)) {
                this.getEmployeesWithFingerPrintOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetEmployeesWithFingerPrintOperationCompleted);
            }
            this.InvokeAsync("getEmployeesWithFingerPrint", new object[0], this.getEmployeesWithFingerPrintOperationCompleted, userState);
        }
        
        private void OngetEmployeesWithFingerPrintOperationCompleted(object arg) {
            if ((this.getEmployeesWithFingerPrintCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getEmployeesWithFingerPrintCompleted(this, new getEmployeesWithFingerPrintCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/addEmployeesFingerPrintBioMini", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int addEmployeesFingerPrintBioMini(string number, int index, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] template, int templateSize) {
            object[] results = this.Invoke("addEmployeesFingerPrintBioMini", new object[] {
                        number,
                        index,
                        template,
                        templateSize});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void addEmployeesFingerPrintBioMiniAsync(string number, int index, byte[] template, int templateSize) {
            this.addEmployeesFingerPrintBioMiniAsync(number, index, template, templateSize, null);
        }
        
        /// <remarks/>
        public void addEmployeesFingerPrintBioMiniAsync(string number, int index, byte[] template, int templateSize, object userState) {
            if ((this.addEmployeesFingerPrintBioMiniOperationCompleted == null)) {
                this.addEmployeesFingerPrintBioMiniOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddEmployeesFingerPrintBioMiniOperationCompleted);
            }
            this.InvokeAsync("addEmployeesFingerPrintBioMini", new object[] {
                        number,
                        index,
                        template,
                        templateSize}, this.addEmployeesFingerPrintBioMiniOperationCompleted, userState);
        }
        
        private void OnaddEmployeesFingerPrintBioMiniOperationCompleted(object arg) {
            if ((this.addEmployeesFingerPrintBioMiniCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addEmployeesFingerPrintBioMiniCompleted(this, new addEmployeesFingerPrintBioMiniCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/addEmployeesFingerPrintBioMini2", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int addEmployeesFingerPrintBioMini2(string idEmployees, int biominiNumber, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] template1, int template1Size, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] template2, int template2Size) {
            object[] results = this.Invoke("addEmployeesFingerPrintBioMini2", new object[] {
                        idEmployees,
                        biominiNumber,
                        template1,
                        template1Size,
                        template2,
                        template2Size});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void addEmployeesFingerPrintBioMini2Async(string idEmployees, int biominiNumber, byte[] template1, int template1Size, byte[] template2, int template2Size) {
            this.addEmployeesFingerPrintBioMini2Async(idEmployees, biominiNumber, template1, template1Size, template2, template2Size, null);
        }
        
        /// <remarks/>
        public void addEmployeesFingerPrintBioMini2Async(string idEmployees, int biominiNumber, byte[] template1, int template1Size, byte[] template2, int template2Size, object userState) {
            if ((this.addEmployeesFingerPrintBioMini2OperationCompleted == null)) {
                this.addEmployeesFingerPrintBioMini2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddEmployeesFingerPrintBioMini2OperationCompleted);
            }
            this.InvokeAsync("addEmployeesFingerPrintBioMini2", new object[] {
                        idEmployees,
                        biominiNumber,
                        template1,
                        template1Size,
                        template2,
                        template2Size}, this.addEmployeesFingerPrintBioMini2OperationCompleted, userState);
        }
        
        private void OnaddEmployeesFingerPrintBioMini2OperationCompleted(object arg) {
            if ((this.addEmployeesFingerPrintBioMini2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addEmployeesFingerPrintBioMini2Completed(this, new addEmployeesFingerPrintBioMini2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getEmployeesFingerPrintBioMini", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable getEmployeesFingerPrintBioMini(int biominiNumber) {
            object[] results = this.Invoke("getEmployeesFingerPrintBioMini", new object[] {
                        biominiNumber});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void getEmployeesFingerPrintBioMiniAsync(int biominiNumber) {
            this.getEmployeesFingerPrintBioMiniAsync(biominiNumber, null);
        }
        
        /// <remarks/>
        public void getEmployeesFingerPrintBioMiniAsync(int biominiNumber, object userState) {
            if ((this.getEmployeesFingerPrintBioMiniOperationCompleted == null)) {
                this.getEmployeesFingerPrintBioMiniOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetEmployeesFingerPrintBioMiniOperationCompleted);
            }
            this.InvokeAsync("getEmployeesFingerPrintBioMini", new object[] {
                        biominiNumber}, this.getEmployeesFingerPrintBioMiniOperationCompleted, userState);
        }
        
        private void OngetEmployeesFingerPrintBioMiniOperationCompleted(object arg) {
            if ((this.getEmployeesFingerPrintBioMiniCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getEmployeesFingerPrintBioMiniCompleted(this, new getEmployeesFingerPrintBioMiniCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/addEmployeesMovimentBioMini", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int addEmployeesMovimentBioMini(string idEmployees, int type) {
            object[] results = this.Invoke("addEmployeesMovimentBioMini", new object[] {
                        idEmployees,
                        type});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void addEmployeesMovimentBioMiniAsync(string idEmployees, int type) {
            this.addEmployeesMovimentBioMiniAsync(idEmployees, type, null);
        }
        
        /// <remarks/>
        public void addEmployeesMovimentBioMiniAsync(string idEmployees, int type, object userState) {
            if ((this.addEmployeesMovimentBioMiniOperationCompleted == null)) {
                this.addEmployeesMovimentBioMiniOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddEmployeesMovimentBioMiniOperationCompleted);
            }
            this.InvokeAsync("addEmployeesMovimentBioMini", new object[] {
                        idEmployees,
                        type}, this.addEmployeesMovimentBioMiniOperationCompleted, userState);
        }
        
        private void OnaddEmployeesMovimentBioMiniOperationCompleted(object arg) {
            if ((this.addEmployeesMovimentBioMiniCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addEmployeesMovimentBioMiniCompleted(this, new addEmployeesMovimentBioMiniCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/employeesTransitData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int employeesTransitData(string pToken, int oldNumber, int newNumber) {
            object[] results = this.Invoke("employeesTransitData", new object[] {
                        pToken,
                        oldNumber,
                        newNumber});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void employeesTransitDataAsync(string pToken, int oldNumber, int newNumber) {
            this.employeesTransitDataAsync(pToken, oldNumber, newNumber, null);
        }
        
        /// <remarks/>
        public void employeesTransitDataAsync(string pToken, int oldNumber, int newNumber, object userState) {
            if ((this.employeesTransitDataOperationCompleted == null)) {
                this.employeesTransitDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnemployeesTransitDataOperationCompleted);
            }
            this.InvokeAsync("employeesTransitData", new object[] {
                        pToken,
                        oldNumber,
                        newNumber}, this.employeesTransitDataOperationCompleted, userState);
        }
        
        private void OnemployeesTransitDataOperationCompleted(object arg) {
            if ((this.employeesTransitDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.employeesTransitDataCompleted(this, new employeesTransitDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getEmployeesAbsencesDetails", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable getEmployeesAbsencesDetails(string pToken, string idEmployees, string number, System.DateTime startDate, System.DateTime endDate) {
            object[] results = this.Invoke("getEmployeesAbsencesDetails", new object[] {
                        pToken,
                        idEmployees,
                        number,
                        startDate,
                        endDate});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void getEmployeesAbsencesDetailsAsync(string pToken, string idEmployees, string number, System.DateTime startDate, System.DateTime endDate) {
            this.getEmployeesAbsencesDetailsAsync(pToken, idEmployees, number, startDate, endDate, null);
        }
        
        /// <remarks/>
        public void getEmployeesAbsencesDetailsAsync(string pToken, string idEmployees, string number, System.DateTime startDate, System.DateTime endDate, object userState) {
            if ((this.getEmployeesAbsencesDetailsOperationCompleted == null)) {
                this.getEmployeesAbsencesDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetEmployeesAbsencesDetailsOperationCompleted);
            }
            this.InvokeAsync("getEmployeesAbsencesDetails", new object[] {
                        pToken,
                        idEmployees,
                        number,
                        startDate,
                        endDate}, this.getEmployeesAbsencesDetailsOperationCompleted, userState);
        }
        
        private void OngetEmployeesAbsencesDetailsOperationCompleted(object arg) {
            if ((this.getEmployeesAbsencesDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getEmployeesAbsencesDetailsCompleted(this, new getEmployeesAbsencesDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getJustificationFromDatabase", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable getJustificationFromDatabase(string pToken, string idAbsences) {
            object[] results = this.Invoke("getJustificationFromDatabase", new object[] {
                        pToken,
                        idAbsences});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void getJustificationFromDatabaseAsync(string pToken, string idAbsences) {
            this.getJustificationFromDatabaseAsync(pToken, idAbsences, null);
        }
        
        /// <remarks/>
        public void getJustificationFromDatabaseAsync(string pToken, string idAbsences, object userState) {
            if ((this.getJustificationFromDatabaseOperationCompleted == null)) {
                this.getJustificationFromDatabaseOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetJustificationFromDatabaseOperationCompleted);
            }
            this.InvokeAsync("getJustificationFromDatabase", new object[] {
                        pToken,
                        idAbsences}, this.getJustificationFromDatabaseOperationCompleted, userState);
        }
        
        private void OngetJustificationFromDatabaseOperationCompleted(object arg) {
            if ((this.getJustificationFromDatabaseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getJustificationFromDatabaseCompleted(this, new getJustificationFromDatabaseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/saveJustificationToDatabase", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int saveJustificationToDatabase(string pToken, string filename, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] file, string idEmployees, string idAbsences) {
            object[] results = this.Invoke("saveJustificationToDatabase", new object[] {
                        pToken,
                        filename,
                        file,
                        idEmployees,
                        idAbsences});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void saveJustificationToDatabaseAsync(string pToken, string filename, byte[] file, string idEmployees, string idAbsences) {
            this.saveJustificationToDatabaseAsync(pToken, filename, file, idEmployees, idAbsences, null);
        }
        
        /// <remarks/>
        public void saveJustificationToDatabaseAsync(string pToken, string filename, byte[] file, string idEmployees, string idAbsences, object userState) {
            if ((this.saveJustificationToDatabaseOperationCompleted == null)) {
                this.saveJustificationToDatabaseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsaveJustificationToDatabaseOperationCompleted);
            }
            this.InvokeAsync("saveJustificationToDatabase", new object[] {
                        pToken,
                        filename,
                        file,
                        idEmployees,
                        idAbsences}, this.saveJustificationToDatabaseOperationCompleted, userState);
        }
        
        private void OnsaveJustificationToDatabaseOperationCompleted(object arg) {
            if ((this.saveJustificationToDatabaseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.saveJustificationToDatabaseCompleted(this, new saveJustificationToDatabaseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/updateAbsencesApprovedAdmin", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int updateAbsencesApprovedAdmin(string pToken, string idAbsences, bool approvedBySuperior, string observations, string idReasons) {
            object[] results = this.Invoke("updateAbsencesApprovedAdmin", new object[] {
                        pToken,
                        idAbsences,
                        approvedBySuperior,
                        observations,
                        idReasons});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void updateAbsencesApprovedAdminAsync(string pToken, string idAbsences, bool approvedBySuperior, string observations, string idReasons) {
            this.updateAbsencesApprovedAdminAsync(pToken, idAbsences, approvedBySuperior, observations, idReasons, null);
        }
        
        /// <remarks/>
        public void updateAbsencesApprovedAdminAsync(string pToken, string idAbsences, bool approvedBySuperior, string observations, string idReasons, object userState) {
            if ((this.updateAbsencesApprovedAdminOperationCompleted == null)) {
                this.updateAbsencesApprovedAdminOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateAbsencesApprovedAdminOperationCompleted);
            }
            this.InvokeAsync("updateAbsencesApprovedAdmin", new object[] {
                        pToken,
                        idAbsences,
                        approvedBySuperior,
                        observations,
                        idReasons}, this.updateAbsencesApprovedAdminOperationCompleted, userState);
        }
        
        private void OnupdateAbsencesApprovedAdminOperationCompleted(object arg) {
            if ((this.updateAbsencesApprovedAdminCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateAbsencesApprovedAdminCompleted(this, new updateAbsencesApprovedAdminCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/updateAbsencesApproved", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int updateAbsencesApproved(string pToken, string idAbsences, bool approved, string observations, string idReasons) {
            object[] results = this.Invoke("updateAbsencesApproved", new object[] {
                        pToken,
                        idAbsences,
                        approved,
                        observations,
                        idReasons});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void updateAbsencesApprovedAsync(string pToken, string idAbsences, bool approved, string observations, string idReasons) {
            this.updateAbsencesApprovedAsync(pToken, idAbsences, approved, observations, idReasons, null);
        }
        
        /// <remarks/>
        public void updateAbsencesApprovedAsync(string pToken, string idAbsences, bool approved, string observations, string idReasons, object userState) {
            if ((this.updateAbsencesApprovedOperationCompleted == null)) {
                this.updateAbsencesApprovedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateAbsencesApprovedOperationCompleted);
            }
            this.InvokeAsync("updateAbsencesApproved", new object[] {
                        pToken,
                        idAbsences,
                        approved,
                        observations,
                        idReasons}, this.updateAbsencesApprovedOperationCompleted, userState);
        }
        
        private void OnupdateAbsencesApprovedOperationCompleted(object arg) {
            if ((this.updateAbsencesApprovedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateAbsencesApprovedCompleted(this, new updateAbsencesApprovedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/deleteEmployeeAbsencesWithJustification", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int deleteEmployeeAbsencesWithJustification(string pToken, string idEmployee, string idAbsences, string justification) {
            object[] results = this.Invoke("deleteEmployeeAbsencesWithJustification", new object[] {
                        pToken,
                        idEmployee,
                        idAbsences,
                        justification});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void deleteEmployeeAbsencesWithJustificationAsync(string pToken, string idEmployee, string idAbsences, string justification) {
            this.deleteEmployeeAbsencesWithJustificationAsync(pToken, idEmployee, idAbsences, justification, null);
        }
        
        /// <remarks/>
        public void deleteEmployeeAbsencesWithJustificationAsync(string pToken, string idEmployee, string idAbsences, string justification, object userState) {
            if ((this.deleteEmployeeAbsencesWithJustificationOperationCompleted == null)) {
                this.deleteEmployeeAbsencesWithJustificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeleteEmployeeAbsencesWithJustificationOperationCompleted);
            }
            this.InvokeAsync("deleteEmployeeAbsencesWithJustification", new object[] {
                        pToken,
                        idEmployee,
                        idAbsences,
                        justification}, this.deleteEmployeeAbsencesWithJustificationOperationCompleted, userState);
        }
        
        private void OndeleteEmployeeAbsencesWithJustificationOperationCompleted(object arg) {
            if ((this.deleteEmployeeAbsencesWithJustificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deleteEmployeeAbsencesWithJustificationCompleted(this, new deleteEmployeeAbsencesWithJustificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getTrackingRequestsByIdGeneral", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable getTrackingRequestsByIdGeneral(string pToken, string idGeneral) {
            object[] results = this.Invoke("getTrackingRequestsByIdGeneral", new object[] {
                        pToken,
                        idGeneral});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void getTrackingRequestsByIdGeneralAsync(string pToken, string idGeneral) {
            this.getTrackingRequestsByIdGeneralAsync(pToken, idGeneral, null);
        }
        
        /// <remarks/>
        public void getTrackingRequestsByIdGeneralAsync(string pToken, string idGeneral, object userState) {
            if ((this.getTrackingRequestsByIdGeneralOperationCompleted == null)) {
                this.getTrackingRequestsByIdGeneralOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetTrackingRequestsByIdGeneralOperationCompleted);
            }
            this.InvokeAsync("getTrackingRequestsByIdGeneral", new object[] {
                        pToken,
                        idGeneral}, this.getTrackingRequestsByIdGeneralOperationCompleted, userState);
        }
        
        private void OngetTrackingRequestsByIdGeneralOperationCompleted(object arg) {
            if ((this.getTrackingRequestsByIdGeneralCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getTrackingRequestsByIdGeneralCompleted(this, new getTrackingRequestsByIdGeneralCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/addTrackingRequests", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string addTrackingRequests(string pToken, string typeOfTracking, string idGeneral, string idEmployeesRequest, System.DateTime dateRequest) {
            object[] results = this.Invoke("addTrackingRequests", new object[] {
                        pToken,
                        typeOfTracking,
                        idGeneral,
                        idEmployeesRequest,
                        dateRequest});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void addTrackingRequestsAsync(string pToken, string typeOfTracking, string idGeneral, string idEmployeesRequest, System.DateTime dateRequest) {
            this.addTrackingRequestsAsync(pToken, typeOfTracking, idGeneral, idEmployeesRequest, dateRequest, null);
        }
        
        /// <remarks/>
        public void addTrackingRequestsAsync(string pToken, string typeOfTracking, string idGeneral, string idEmployeesRequest, System.DateTime dateRequest, object userState) {
            if ((this.addTrackingRequestsOperationCompleted == null)) {
                this.addTrackingRequestsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddTrackingRequestsOperationCompleted);
            }
            this.InvokeAsync("addTrackingRequests", new object[] {
                        pToken,
                        typeOfTracking,
                        idGeneral,
                        idEmployeesRequest,
                        dateRequest}, this.addTrackingRequestsOperationCompleted, userState);
        }
        
        private void OnaddTrackingRequestsOperationCompleted(object arg) {
            if ((this.addTrackingRequestsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addTrackingRequestsCompleted(this, new addTrackingRequestsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/updateTrackingRequestsApproved", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int updateTrackingRequestsApproved(string pToken, string idTrackingRequests, string approvedRejected, string idEmployeesApprovedRejected, System.DateTime dateApprovedRejected) {
            object[] results = this.Invoke("updateTrackingRequestsApproved", new object[] {
                        pToken,
                        idTrackingRequests,
                        approvedRejected,
                        idEmployeesApprovedRejected,
                        dateApprovedRejected});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void updateTrackingRequestsApprovedAsync(string pToken, string idTrackingRequests, string approvedRejected, string idEmployeesApprovedRejected, System.DateTime dateApprovedRejected) {
            this.updateTrackingRequestsApprovedAsync(pToken, idTrackingRequests, approvedRejected, idEmployeesApprovedRejected, dateApprovedRejected, null);
        }
        
        /// <remarks/>
        public void updateTrackingRequestsApprovedAsync(string pToken, string idTrackingRequests, string approvedRejected, string idEmployeesApprovedRejected, System.DateTime dateApprovedRejected, object userState) {
            if ((this.updateTrackingRequestsApprovedOperationCompleted == null)) {
                this.updateTrackingRequestsApprovedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateTrackingRequestsApprovedOperationCompleted);
            }
            this.InvokeAsync("updateTrackingRequestsApproved", new object[] {
                        pToken,
                        idTrackingRequests,
                        approvedRejected,
                        idEmployeesApprovedRejected,
                        dateApprovedRejected}, this.updateTrackingRequestsApprovedOperationCompleted, userState);
        }
        
        private void OnupdateTrackingRequestsApprovedOperationCompleted(object arg) {
            if ((this.updateTrackingRequestsApprovedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateTrackingRequestsApprovedCompleted(this, new updateTrackingRequestsApprovedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/updateTrackingRequestsDeleted", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int updateTrackingRequestsDeleted(string pToken, string idTrackingRequests, string deleted, string idEmployeesDeleted, System.DateTime dateDeleted) {
            object[] results = this.Invoke("updateTrackingRequestsDeleted", new object[] {
                        pToken,
                        idTrackingRequests,
                        deleted,
                        idEmployeesDeleted,
                        dateDeleted});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void updateTrackingRequestsDeletedAsync(string pToken, string idTrackingRequests, string deleted, string idEmployeesDeleted, System.DateTime dateDeleted) {
            this.updateTrackingRequestsDeletedAsync(pToken, idTrackingRequests, deleted, idEmployeesDeleted, dateDeleted, null);
        }
        
        /// <remarks/>
        public void updateTrackingRequestsDeletedAsync(string pToken, string idTrackingRequests, string deleted, string idEmployeesDeleted, System.DateTime dateDeleted, object userState) {
            if ((this.updateTrackingRequestsDeletedOperationCompleted == null)) {
                this.updateTrackingRequestsDeletedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateTrackingRequestsDeletedOperationCompleted);
            }
            this.InvokeAsync("updateTrackingRequestsDeleted", new object[] {
                        pToken,
                        idTrackingRequests,
                        deleted,
                        idEmployeesDeleted,
                        dateDeleted}, this.updateTrackingRequestsDeletedOperationCompleted, userState);
        }
        
        private void OnupdateTrackingRequestsDeletedOperationCompleted(object arg) {
            if ((this.updateTrackingRequestsDeletedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateTrackingRequestsDeletedCompleted(this, new updateTrackingRequestsDeletedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getEmployeesAbsencesDetailsWithStates", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable getEmployeesAbsencesDetailsWithStates(string pToken, string idEmployees, string number, System.DateTime startDate, System.DateTime endDate, int state) {
            object[] results = this.Invoke("getEmployeesAbsencesDetailsWithStates", new object[] {
                        pToken,
                        idEmployees,
                        number,
                        startDate,
                        endDate,
                        state});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void getEmployeesAbsencesDetailsWithStatesAsync(string pToken, string idEmployees, string number, System.DateTime startDate, System.DateTime endDate, int state) {
            this.getEmployeesAbsencesDetailsWithStatesAsync(pToken, idEmployees, number, startDate, endDate, state, null);
        }
        
        /// <remarks/>
        public void getEmployeesAbsencesDetailsWithStatesAsync(string pToken, string idEmployees, string number, System.DateTime startDate, System.DateTime endDate, int state, object userState) {
            if ((this.getEmployeesAbsencesDetailsWithStatesOperationCompleted == null)) {
                this.getEmployeesAbsencesDetailsWithStatesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetEmployeesAbsencesDetailsWithStatesOperationCompleted);
            }
            this.InvokeAsync("getEmployeesAbsencesDetailsWithStates", new object[] {
                        pToken,
                        idEmployees,
                        number,
                        startDate,
                        endDate,
                        state}, this.getEmployeesAbsencesDetailsWithStatesOperationCompleted, userState);
        }
        
        private void OngetEmployeesAbsencesDetailsWithStatesOperationCompleted(object arg) {
            if ((this.getEmployeesAbsencesDetailsWithStatesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getEmployeesAbsencesDetailsWithStatesCompleted(this, new getEmployeesAbsencesDetailsWithStatesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/addOrUpdateEmployeeSimple", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string addOrUpdateEmployeeSimple(
                    string pToken, 
                    int number, 
                    string name, 
                    int gender, 
                    int deficiency, 
                    System.DateTime dateBirth, 
                    string idDepartment, 
                    string fiscalNumber, 
                    string identityTicket, 
                    string nationality, 
                    string address, 
                    string postalCode, 
                    string companyMobilePhone, 
                    string companyEmail, 
                    bool enable, 
                    string idEmployee, 
                    bool insert, 
                    string minWeekHours, 
                    int maritalStat, 
                    System.DateTime joinDate, 
                    string daysOfVacations) {
            object[] results = this.Invoke("addOrUpdateEmployeeSimple", new object[] {
                        pToken,
                        number,
                        name,
                        gender,
                        deficiency,
                        dateBirth,
                        idDepartment,
                        fiscalNumber,
                        identityTicket,
                        nationality,
                        address,
                        postalCode,
                        companyMobilePhone,
                        companyEmail,
                        enable,
                        idEmployee,
                        insert,
                        minWeekHours,
                        maritalStat,
                        joinDate,
                        daysOfVacations});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void addOrUpdateEmployeeSimpleAsync(
                    string pToken, 
                    int number, 
                    string name, 
                    int gender, 
                    int deficiency, 
                    System.DateTime dateBirth, 
                    string idDepartment, 
                    string fiscalNumber, 
                    string identityTicket, 
                    string nationality, 
                    string address, 
                    string postalCode, 
                    string companyMobilePhone, 
                    string companyEmail, 
                    bool enable, 
                    string idEmployee, 
                    bool insert, 
                    string minWeekHours, 
                    int maritalStat, 
                    System.DateTime joinDate, 
                    string daysOfVacations) {
            this.addOrUpdateEmployeeSimpleAsync(pToken, number, name, gender, deficiency, dateBirth, idDepartment, fiscalNumber, identityTicket, nationality, address, postalCode, companyMobilePhone, companyEmail, enable, idEmployee, insert, minWeekHours, maritalStat, joinDate, daysOfVacations, null);
        }
        
        /// <remarks/>
        public void addOrUpdateEmployeeSimpleAsync(
                    string pToken, 
                    int number, 
                    string name, 
                    int gender, 
                    int deficiency, 
                    System.DateTime dateBirth, 
                    string idDepartment, 
                    string fiscalNumber, 
                    string identityTicket, 
                    string nationality, 
                    string address, 
                    string postalCode, 
                    string companyMobilePhone, 
                    string companyEmail, 
                    bool enable, 
                    string idEmployee, 
                    bool insert, 
                    string minWeekHours, 
                    int maritalStat, 
                    System.DateTime joinDate, 
                    string daysOfVacations, 
                    object userState) {
            if ((this.addOrUpdateEmployeeSimpleOperationCompleted == null)) {
                this.addOrUpdateEmployeeSimpleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddOrUpdateEmployeeSimpleOperationCompleted);
            }
            this.InvokeAsync("addOrUpdateEmployeeSimple", new object[] {
                        pToken,
                        number,
                        name,
                        gender,
                        deficiency,
                        dateBirth,
                        idDepartment,
                        fiscalNumber,
                        identityTicket,
                        nationality,
                        address,
                        postalCode,
                        companyMobilePhone,
                        companyEmail,
                        enable,
                        idEmployee,
                        insert,
                        minWeekHours,
                        maritalStat,
                        joinDate,
                        daysOfVacations}, this.addOrUpdateEmployeeSimpleOperationCompleted, userState);
        }
        
        private void OnaddOrUpdateEmployeeSimpleOperationCompleted(object arg) {
            if ((this.addOrUpdateEmployeeSimpleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addOrUpdateEmployeeSimpleCompleted(this, new addOrUpdateEmployeeSimpleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/addEmployeeVacationsTPF", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int addEmployeeVacationsTPF(string pToken, string idEmployees, int number, System.DateTime start, System.DateTime end, double numbDays, bool approved, bool approvedBySuperior) {
            object[] results = this.Invoke("addEmployeeVacationsTPF", new object[] {
                        pToken,
                        idEmployees,
                        number,
                        start,
                        end,
                        numbDays,
                        approved,
                        approvedBySuperior});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void addEmployeeVacationsTPFAsync(string pToken, string idEmployees, int number, System.DateTime start, System.DateTime end, double numbDays, bool approved, bool approvedBySuperior) {
            this.addEmployeeVacationsTPFAsync(pToken, idEmployees, number, start, end, numbDays, approved, approvedBySuperior, null);
        }
        
        /// <remarks/>
        public void addEmployeeVacationsTPFAsync(string pToken, string idEmployees, int number, System.DateTime start, System.DateTime end, double numbDays, bool approved, bool approvedBySuperior, object userState) {
            if ((this.addEmployeeVacationsTPFOperationCompleted == null)) {
                this.addEmployeeVacationsTPFOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddEmployeeVacationsTPFOperationCompleted);
            }
            this.InvokeAsync("addEmployeeVacationsTPF", new object[] {
                        pToken,
                        idEmployees,
                        number,
                        start,
                        end,
                        numbDays,
                        approved,
                        approvedBySuperior}, this.addEmployeeVacationsTPFOperationCompleted, userState);
        }
        
        private void OnaddEmployeeVacationsTPFOperationCompleted(object arg) {
            if ((this.addEmployeeVacationsTPFCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addEmployeeVacationsTPFCompleted(this, new addEmployeeVacationsTPFCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/deleteEmployeeVacationsTPF", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int deleteEmployeeVacationsTPF(string pToken, string idEmployees, int number, System.DateTime start, System.DateTime end) {
            object[] results = this.Invoke("deleteEmployeeVacationsTPF", new object[] {
                        pToken,
                        idEmployees,
                        number,
                        start,
                        end});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void deleteEmployeeVacationsTPFAsync(string pToken, string idEmployees, int number, System.DateTime start, System.DateTime end) {
            this.deleteEmployeeVacationsTPFAsync(pToken, idEmployees, number, start, end, null);
        }
        
        /// <remarks/>
        public void deleteEmployeeVacationsTPFAsync(string pToken, string idEmployees, int number, System.DateTime start, System.DateTime end, object userState) {
            if ((this.deleteEmployeeVacationsTPFOperationCompleted == null)) {
                this.deleteEmployeeVacationsTPFOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeleteEmployeeVacationsTPFOperationCompleted);
            }
            this.InvokeAsync("deleteEmployeeVacationsTPF", new object[] {
                        pToken,
                        idEmployees,
                        number,
                        start,
                        end}, this.deleteEmployeeVacationsTPFOperationCompleted, userState);
        }
        
        private void OndeleteEmployeeVacationsTPFOperationCompleted(object arg) {
            if ((this.deleteEmployeeVacationsTPFCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deleteEmployeeVacationsTPFCompleted(this, new deleteEmployeeVacationsTPFCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/sendysGetEmployeeDatePeriodResume", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable sendysGetEmployeeDatePeriodResume(string pToken, string idEmployee, System.DateTime startDate, System.DateTime endDate) {
            object[] results = this.Invoke("sendysGetEmployeeDatePeriodResume", new object[] {
                        pToken,
                        idEmployee,
                        startDate,
                        endDate});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void sendysGetEmployeeDatePeriodResumeAsync(string pToken, string idEmployee, System.DateTime startDate, System.DateTime endDate) {
            this.sendysGetEmployeeDatePeriodResumeAsync(pToken, idEmployee, startDate, endDate, null);
        }
        
        /// <remarks/>
        public void sendysGetEmployeeDatePeriodResumeAsync(string pToken, string idEmployee, System.DateTime startDate, System.DateTime endDate, object userState) {
            if ((this.sendysGetEmployeeDatePeriodResumeOperationCompleted == null)) {
                this.sendysGetEmployeeDatePeriodResumeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsendysGetEmployeeDatePeriodResumeOperationCompleted);
            }
            this.InvokeAsync("sendysGetEmployeeDatePeriodResume", new object[] {
                        pToken,
                        idEmployee,
                        startDate,
                        endDate}, this.sendysGetEmployeeDatePeriodResumeOperationCompleted, userState);
        }
        
        private void OnsendysGetEmployeeDatePeriodResumeOperationCompleted(object arg) {
            if ((this.sendysGetEmployeeDatePeriodResumeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.sendysGetEmployeeDatePeriodResumeCompleted(this, new sendysGetEmployeeDatePeriodResumeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/sendysGetHoursPackageResume", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable sendysGetHoursPackageResume(string pToken, string idEmployee, System.DateTime startDate, System.DateTime endDate) {
            object[] results = this.Invoke("sendysGetHoursPackageResume", new object[] {
                        pToken,
                        idEmployee,
                        startDate,
                        endDate});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void sendysGetHoursPackageResumeAsync(string pToken, string idEmployee, System.DateTime startDate, System.DateTime endDate) {
            this.sendysGetHoursPackageResumeAsync(pToken, idEmployee, startDate, endDate, null);
        }
        
        /// <remarks/>
        public void sendysGetHoursPackageResumeAsync(string pToken, string idEmployee, System.DateTime startDate, System.DateTime endDate, object userState) {
            if ((this.sendysGetHoursPackageResumeOperationCompleted == null)) {
                this.sendysGetHoursPackageResumeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsendysGetHoursPackageResumeOperationCompleted);
            }
            this.InvokeAsync("sendysGetHoursPackageResume", new object[] {
                        pToken,
                        idEmployee,
                        startDate,
                        endDate}, this.sendysGetHoursPackageResumeOperationCompleted, userState);
        }
        
        private void OnsendysGetHoursPackageResumeOperationCompleted(object arg) {
            if ((this.sendysGetHoursPackageResumeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.sendysGetHoursPackageResumeCompleted(this, new sendysGetHoursPackageResumeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/sendysCalcWorkHours", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int sendysCalcWorkHours(string pToken, string idEmployees, int number, System.DateTime date, System.Data.DataTable dtMovs) {
            object[] results = this.Invoke("sendysCalcWorkHours", new object[] {
                        pToken,
                        idEmployees,
                        number,
                        date,
                        dtMovs});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void sendysCalcWorkHoursAsync(string pToken, string idEmployees, int number, System.DateTime date, System.Data.DataTable dtMovs) {
            this.sendysCalcWorkHoursAsync(pToken, idEmployees, number, date, dtMovs, null);
        }
        
        /// <remarks/>
        public void sendysCalcWorkHoursAsync(string pToken, string idEmployees, int number, System.DateTime date, System.Data.DataTable dtMovs, object userState) {
            if ((this.sendysCalcWorkHoursOperationCompleted == null)) {
                this.sendysCalcWorkHoursOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsendysCalcWorkHoursOperationCompleted);
            }
            this.InvokeAsync("sendysCalcWorkHours", new object[] {
                        pToken,
                        idEmployees,
                        number,
                        date,
                        dtMovs}, this.sendysCalcWorkHoursOperationCompleted, userState);
        }
        
        private void OnsendysCalcWorkHoursOperationCompleted(object arg) {
            if ((this.sendysCalcWorkHoursCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.sendysCalcWorkHoursCompleted(this, new sendysCalcWorkHoursCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/sendysAddAbsences", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int sendysAddAbsences(string pToken, string idEmployees, System.DateTime start, System.DateTime end, int numbDays, string reason, string comm, bool approved, int hours, int minutes, bool approvedBySuperior, out string idAbsence) {
            object[] results = this.Invoke("sendysAddAbsences", new object[] {
                        pToken,
                        idEmployees,
                        start,
                        end,
                        numbDays,
                        reason,
                        comm,
                        approved,
                        hours,
                        minutes,
                        approvedBySuperior});
            idAbsence = ((string)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void sendysAddAbsencesAsync(string pToken, string idEmployees, System.DateTime start, System.DateTime end, int numbDays, string reason, string comm, bool approved, int hours, int minutes, bool approvedBySuperior) {
            this.sendysAddAbsencesAsync(pToken, idEmployees, start, end, numbDays, reason, comm, approved, hours, minutes, approvedBySuperior, null);
        }
        
        /// <remarks/>
        public void sendysAddAbsencesAsync(string pToken, string idEmployees, System.DateTime start, System.DateTime end, int numbDays, string reason, string comm, bool approved, int hours, int minutes, bool approvedBySuperior, object userState) {
            if ((this.sendysAddAbsencesOperationCompleted == null)) {
                this.sendysAddAbsencesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsendysAddAbsencesOperationCompleted);
            }
            this.InvokeAsync("sendysAddAbsences", new object[] {
                        pToken,
                        idEmployees,
                        start,
                        end,
                        numbDays,
                        reason,
                        comm,
                        approved,
                        hours,
                        minutes,
                        approvedBySuperior}, this.sendysAddAbsencesOperationCompleted, userState);
        }
        
        private void OnsendysAddAbsencesOperationCompleted(object arg) {
            if ((this.sendysAddAbsencesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.sendysAddAbsencesCompleted(this, new sendysAddAbsencesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/sendysGetEmployeesMovimentsFromDate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable sendysGetEmployeesMovimentsFromDate(string pToken, string idEmployees, System.DateTime date) {
            object[] results = this.Invoke("sendysGetEmployeesMovimentsFromDate", new object[] {
                        pToken,
                        idEmployees,
                        date});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void sendysGetEmployeesMovimentsFromDateAsync(string pToken, string idEmployees, System.DateTime date) {
            this.sendysGetEmployeesMovimentsFromDateAsync(pToken, idEmployees, date, null);
        }
        
        /// <remarks/>
        public void sendysGetEmployeesMovimentsFromDateAsync(string pToken, string idEmployees, System.DateTime date, object userState) {
            if ((this.sendysGetEmployeesMovimentsFromDateOperationCompleted == null)) {
                this.sendysGetEmployeesMovimentsFromDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsendysGetEmployeesMovimentsFromDateOperationCompleted);
            }
            this.InvokeAsync("sendysGetEmployeesMovimentsFromDate", new object[] {
                        pToken,
                        idEmployees,
                        date}, this.sendysGetEmployeesMovimentsFromDateOperationCompleted, userState);
        }
        
        private void OnsendysGetEmployeesMovimentsFromDateOperationCompleted(object arg) {
            if ((this.sendysGetEmployeesMovimentsFromDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.sendysGetEmployeesMovimentsFromDateCompleted(this, new sendysGetEmployeesMovimentsFromDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/sendysAddMoviment", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int sendysAddMoviment(string pToken, System.DateTime date, string idEmployees, int number, string idMovimentsType, string observations, bool approved, bool approvedBySuperior) {
            object[] results = this.Invoke("sendysAddMoviment", new object[] {
                        pToken,
                        date,
                        idEmployees,
                        number,
                        idMovimentsType,
                        observations,
                        approved,
                        approvedBySuperior});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void sendysAddMovimentAsync(string pToken, System.DateTime date, string idEmployees, int number, string idMovimentsType, string observations, bool approved, bool approvedBySuperior) {
            this.sendysAddMovimentAsync(pToken, date, idEmployees, number, idMovimentsType, observations, approved, approvedBySuperior, null);
        }
        
        /// <remarks/>
        public void sendysAddMovimentAsync(string pToken, System.DateTime date, string idEmployees, int number, string idMovimentsType, string observations, bool approved, bool approvedBySuperior, object userState) {
            if ((this.sendysAddMovimentOperationCompleted == null)) {
                this.sendysAddMovimentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsendysAddMovimentOperationCompleted);
            }
            this.InvokeAsync("sendysAddMoviment", new object[] {
                        pToken,
                        date,
                        idEmployees,
                        number,
                        idMovimentsType,
                        observations,
                        approved,
                        approvedBySuperior}, this.sendysAddMovimentOperationCompleted, userState);
        }
        
        private void OnsendysAddMovimentOperationCompleted(object arg) {
            if ((this.sendysAddMovimentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.sendysAddMovimentCompleted(this, new sendysAddMovimentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/sendysGetMovimentsWithStates", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable sendysGetMovimentsWithStates(string pToken, string idEmployees, string number, System.DateTime startDate, System.DateTime endDate, int state) {
            object[] results = this.Invoke("sendysGetMovimentsWithStates", new object[] {
                        pToken,
                        idEmployees,
                        number,
                        startDate,
                        endDate,
                        state});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void sendysGetMovimentsWithStatesAsync(string pToken, string idEmployees, string number, System.DateTime startDate, System.DateTime endDate, int state) {
            this.sendysGetMovimentsWithStatesAsync(pToken, idEmployees, number, startDate, endDate, state, null);
        }
        
        /// <remarks/>
        public void sendysGetMovimentsWithStatesAsync(string pToken, string idEmployees, string number, System.DateTime startDate, System.DateTime endDate, int state, object userState) {
            if ((this.sendysGetMovimentsWithStatesOperationCompleted == null)) {
                this.sendysGetMovimentsWithStatesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsendysGetMovimentsWithStatesOperationCompleted);
            }
            this.InvokeAsync("sendysGetMovimentsWithStates", new object[] {
                        pToken,
                        idEmployees,
                        number,
                        startDate,
                        endDate,
                        state}, this.sendysGetMovimentsWithStatesOperationCompleted, userState);
        }
        
        private void OnsendysGetMovimentsWithStatesOperationCompleted(object arg) {
            if ((this.sendysGetMovimentsWithStatesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.sendysGetMovimentsWithStatesCompleted(this, new sendysGetMovimentsWithStatesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/sendysUpdateMoviment", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int sendysUpdateMoviment(string pToken, string idMoviments, string movimentType, bool ignored, string justification, bool approved, bool approvedBySuperior) {
            object[] results = this.Invoke("sendysUpdateMoviment", new object[] {
                        pToken,
                        idMoviments,
                        movimentType,
                        ignored,
                        justification,
                        approved,
                        approvedBySuperior});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void sendysUpdateMovimentAsync(string pToken, string idMoviments, string movimentType, bool ignored, string justification, bool approved, bool approvedBySuperior) {
            this.sendysUpdateMovimentAsync(pToken, idMoviments, movimentType, ignored, justification, approved, approvedBySuperior, null);
        }
        
        /// <remarks/>
        public void sendysUpdateMovimentAsync(string pToken, string idMoviments, string movimentType, bool ignored, string justification, bool approved, bool approvedBySuperior, object userState) {
            if ((this.sendysUpdateMovimentOperationCompleted == null)) {
                this.sendysUpdateMovimentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsendysUpdateMovimentOperationCompleted);
            }
            this.InvokeAsync("sendysUpdateMoviment", new object[] {
                        pToken,
                        idMoviments,
                        movimentType,
                        ignored,
                        justification,
                        approved,
                        approvedBySuperior}, this.sendysUpdateMovimentOperationCompleted, userState);
        }
        
        private void OnsendysUpdateMovimentOperationCompleted(object arg) {
            if ((this.sendysUpdateMovimentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.sendysUpdateMovimentCompleted(this, new sendysUpdateMovimentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/sendysGetHoursPackageTotal", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable sendysGetHoursPackageTotal(string pToken, string idEmployees, System.DateTime startDate, System.DateTime endDate) {
            object[] results = this.Invoke("sendysGetHoursPackageTotal", new object[] {
                        pToken,
                        idEmployees,
                        startDate,
                        endDate});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void sendysGetHoursPackageTotalAsync(string pToken, string idEmployees, System.DateTime startDate, System.DateTime endDate) {
            this.sendysGetHoursPackageTotalAsync(pToken, idEmployees, startDate, endDate, null);
        }
        
        /// <remarks/>
        public void sendysGetHoursPackageTotalAsync(string pToken, string idEmployees, System.DateTime startDate, System.DateTime endDate, object userState) {
            if ((this.sendysGetHoursPackageTotalOperationCompleted == null)) {
                this.sendysGetHoursPackageTotalOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsendysGetHoursPackageTotalOperationCompleted);
            }
            this.InvokeAsync("sendysGetHoursPackageTotal", new object[] {
                        pToken,
                        idEmployees,
                        startDate,
                        endDate}, this.sendysGetHoursPackageTotalOperationCompleted, userState);
        }
        
        private void OnsendysGetHoursPackageTotalOperationCompleted(object arg) {
            if ((this.sendysGetHoursPackageTotalCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.sendysGetHoursPackageTotalCompleted(this, new sendysGetHoursPackageTotalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/addInTicket", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string addInTicket(string datetime) {
            object[] results = this.Invoke("addInTicket", new object[] {
                        datetime});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void addInTicketAsync(string datetime) {
            this.addInTicketAsync(datetime, null);
        }
        
        /// <remarks/>
        public void addInTicketAsync(string datetime, object userState) {
            if ((this.addInTicketOperationCompleted == null)) {
                this.addInTicketOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddInTicketOperationCompleted);
            }
            this.InvokeAsync("addInTicket", new object[] {
                        datetime}, this.addInTicketOperationCompleted, userState);
        }
        
        private void OnaddInTicketOperationCompleted(object arg) {
            if ((this.addInTicketCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addInTicketCompleted(this, new addInTicketCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getCardInformation", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool getCardInformation(string cardId) {
            object[] results = this.Invoke("getCardInformation", new object[] {
                        cardId});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void getCardInformationAsync(string cardId) {
            this.getCardInformationAsync(cardId, null);
        }
        
        /// <remarks/>
        public void getCardInformationAsync(string cardId, object userState) {
            if ((this.getCardInformationOperationCompleted == null)) {
                this.getCardInformationOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetCardInformationOperationCompleted);
            }
            this.InvokeAsync("getCardInformation", new object[] {
                        cardId}, this.getCardInformationOperationCompleted, userState);
        }
        
        private void OngetCardInformationOperationCompleted(object arg) {
            if ((this.getCardInformationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getCardInformationCompleted(this, new getCardInformationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/addInCard", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool addInCard(string cardId, string datetime) {
            object[] results = this.Invoke("addInCard", new object[] {
                        cardId,
                        datetime});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void addInCardAsync(string cardId, string datetime) {
            this.addInCardAsync(cardId, datetime, null);
        }
        
        /// <remarks/>
        public void addInCardAsync(string cardId, string datetime, object userState) {
            if ((this.addInCardOperationCompleted == null)) {
                this.addInCardOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddInCardOperationCompleted);
            }
            this.InvokeAsync("addInCard", new object[] {
                        cardId,
                        datetime}, this.addInCardOperationCompleted, userState);
        }
        
        private void OnaddInCardOperationCompleted(object arg) {
            if ((this.addInCardCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addInCardCompleted(this, new addInCardCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getTicketInformation", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable getTicketInformation(string ticketId) {
            object[] results = this.Invoke("getTicketInformation", new object[] {
                        ticketId});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void getTicketInformationAsync(string ticketId) {
            this.getTicketInformationAsync(ticketId, null);
        }
        
        /// <remarks/>
        public void getTicketInformationAsync(string ticketId, object userState) {
            if ((this.getTicketInformationOperationCompleted == null)) {
                this.getTicketInformationOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetTicketInformationOperationCompleted);
            }
            this.InvokeAsync("getTicketInformation", new object[] {
                        ticketId}, this.getTicketInformationOperationCompleted, userState);
        }
        
        private void OngetTicketInformationOperationCompleted(object arg) {
            if ((this.getTicketInformationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getTicketInformationCompleted(this, new getTicketInformationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/payTicket", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool payTicket(string ticketId) {
            object[] results = this.Invoke("payTicket", new object[] {
                        ticketId});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void payTicketAsync(string ticketId) {
            this.payTicketAsync(ticketId, null);
        }
        
        /// <remarks/>
        public void payTicketAsync(string ticketId, object userState) {
            if ((this.payTicketOperationCompleted == null)) {
                this.payTicketOperationCompleted = new System.Threading.SendOrPostCallback(this.OnpayTicketOperationCompleted);
            }
            this.InvokeAsync("payTicket", new object[] {
                        ticketId}, this.payTicketOperationCompleted, userState);
        }
        
        private void OnpayTicketOperationCompleted(object arg) {
            if ((this.payTicketCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.payTicketCompleted(this, new payTicketCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/payCard", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool payCard(string cardId, string datetimeBegin, string datetimeEnd) {
            object[] results = this.Invoke("payCard", new object[] {
                        cardId,
                        datetimeBegin,
                        datetimeEnd});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void payCardAsync(string cardId, string datetimeBegin, string datetimeEnd) {
            this.payCardAsync(cardId, datetimeBegin, datetimeEnd, null);
        }
        
        /// <remarks/>
        public void payCardAsync(string cardId, string datetimeBegin, string datetimeEnd, object userState) {
            if ((this.payCardOperationCompleted == null)) {
                this.payCardOperationCompleted = new System.Threading.SendOrPostCallback(this.OnpayCardOperationCompleted);
            }
            this.InvokeAsync("payCard", new object[] {
                        cardId,
                        datetimeBegin,
                        datetimeEnd}, this.payCardOperationCompleted, userState);
        }
        
        private void OnpayCardOperationCompleted(object arg) {
            if ((this.payCardCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.payCardCompleted(this, new payCardCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/isTicketValid", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool isTicketValid(string ticketId) {
            object[] results = this.Invoke("isTicketValid", new object[] {
                        ticketId});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void isTicketValidAsync(string ticketId) {
            this.isTicketValidAsync(ticketId, null);
        }
        
        /// <remarks/>
        public void isTicketValidAsync(string ticketId, object userState) {
            if ((this.isTicketValidOperationCompleted == null)) {
                this.isTicketValidOperationCompleted = new System.Threading.SendOrPostCallback(this.OnisTicketValidOperationCompleted);
            }
            this.InvokeAsync("isTicketValid", new object[] {
                        ticketId}, this.isTicketValidOperationCompleted, userState);
        }
        
        private void OnisTicketValidOperationCompleted(object arg) {
            if ((this.isTicketValidCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.isTicketValidCompleted(this, new isTicketValidCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ticketExit", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ticketExit(string ticketId) {
            object[] results = this.Invoke("ticketExit", new object[] {
                        ticketId});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ticketExitAsync(string ticketId) {
            this.ticketExitAsync(ticketId, null);
        }
        
        /// <remarks/>
        public void ticketExitAsync(string ticketId, object userState) {
            if ((this.ticketExitOperationCompleted == null)) {
                this.ticketExitOperationCompleted = new System.Threading.SendOrPostCallback(this.OnticketExitOperationCompleted);
            }
            this.InvokeAsync("ticketExit", new object[] {
                        ticketId}, this.ticketExitOperationCompleted, userState);
        }
        
        private void OnticketExitOperationCompleted(object arg) {
            if ((this.ticketExitCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ticketExitCompleted(this, new ticketExitCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/isCardValid", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool isCardValid(string cardId) {
            object[] results = this.Invoke("isCardValid", new object[] {
                        cardId});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void isCardValidAsync(string cardId) {
            this.isCardValidAsync(cardId, null);
        }
        
        /// <remarks/>
        public void isCardValidAsync(string cardId, object userState) {
            if ((this.isCardValidOperationCompleted == null)) {
                this.isCardValidOperationCompleted = new System.Threading.SendOrPostCallback(this.OnisCardValidOperationCompleted);
            }
            this.InvokeAsync("isCardValid", new object[] {
                        cardId}, this.isCardValidOperationCompleted, userState);
        }
        
        private void OnisCardValidOperationCompleted(object arg) {
            if ((this.isCardValidCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.isCardValidCompleted(this, new isCardValidCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getDateTime", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getDateTime() {
            object[] results = this.Invoke("getDateTime", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getDateTimeAsync() {
            this.getDateTimeAsync(null);
        }
        
        /// <remarks/>
        public void getDateTimeAsync(object userState) {
            if ((this.getDateTimeOperationCompleted == null)) {
                this.getDateTimeOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDateTimeOperationCompleted);
            }
            this.InvokeAsync("getDateTime", new object[0], this.getDateTimeOperationCompleted, userState);
        }
        
        private void OngetDateTimeOperationCompleted(object arg) {
            if ((this.getDateTimeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDateTimeCompleted(this, new getDateTimeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/addTaskMove", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool addTaskMove(string cardId, string taskId, string datetime, string ip) {
            object[] results = this.Invoke("addTaskMove", new object[] {
                        cardId,
                        taskId,
                        datetime,
                        ip});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void addTaskMoveAsync(string cardId, string taskId, string datetime, string ip) {
            this.addTaskMoveAsync(cardId, taskId, datetime, ip, null);
        }
        
        /// <remarks/>
        public void addTaskMoveAsync(string cardId, string taskId, string datetime, string ip, object userState) {
            if ((this.addTaskMoveOperationCompleted == null)) {
                this.addTaskMoveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddTaskMoveOperationCompleted);
            }
            this.InvokeAsync("addTaskMove", new object[] {
                        cardId,
                        taskId,
                        datetime,
                        ip}, this.addTaskMoveOperationCompleted, userState);
        }
        
        private void OnaddTaskMoveOperationCompleted(object arg) {
            if ((this.addTaskMoveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addTaskMoveCompleted(this, new addTaskMoveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/addUpdateAccessZones", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int addUpdateAccessZones(string code, string name, string description, int maxCapacity) {
            object[] results = this.Invoke("addUpdateAccessZones", new object[] {
                        code,
                        name,
                        description,
                        maxCapacity});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void addUpdateAccessZonesAsync(string code, string name, string description, int maxCapacity) {
            this.addUpdateAccessZonesAsync(code, name, description, maxCapacity, null);
        }
        
        /// <remarks/>
        public void addUpdateAccessZonesAsync(string code, string name, string description, int maxCapacity, object userState) {
            if ((this.addUpdateAccessZonesOperationCompleted == null)) {
                this.addUpdateAccessZonesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddUpdateAccessZonesOperationCompleted);
            }
            this.InvokeAsync("addUpdateAccessZones", new object[] {
                        code,
                        name,
                        description,
                        maxCapacity}, this.addUpdateAccessZonesOperationCompleted, userState);
        }
        
        private void OnaddUpdateAccessZonesOperationCompleted(object arg) {
            if ((this.addUpdateAccessZonesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addUpdateAccessZonesCompleted(this, new addUpdateAccessZonesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/activateCardInAccessZone", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int activateCardInAccessZone(string card, string code) {
            object[] results = this.Invoke("activateCardInAccessZone", new object[] {
                        card,
                        code});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void activateCardInAccessZoneAsync(string card, string code) {
            this.activateCardInAccessZoneAsync(card, code, null);
        }
        
        /// <remarks/>
        public void activateCardInAccessZoneAsync(string card, string code, object userState) {
            if ((this.activateCardInAccessZoneOperationCompleted == null)) {
                this.activateCardInAccessZoneOperationCompleted = new System.Threading.SendOrPostCallback(this.OnactivateCardInAccessZoneOperationCompleted);
            }
            this.InvokeAsync("activateCardInAccessZone", new object[] {
                        card,
                        code}, this.activateCardInAccessZoneOperationCompleted, userState);
        }
        
        private void OnactivateCardInAccessZoneOperationCompleted(object arg) {
            if ((this.activateCardInAccessZoneCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.activateCardInAccessZoneCompleted(this, new activateCardInAccessZoneCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/disableCardInAccessZone", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int disableCardInAccessZone(string card, string code) {
            object[] results = this.Invoke("disableCardInAccessZone", new object[] {
                        card,
                        code});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void disableCardInAccessZoneAsync(string card, string code) {
            this.disableCardInAccessZoneAsync(card, code, null);
        }
        
        /// <remarks/>
        public void disableCardInAccessZoneAsync(string card, string code, object userState) {
            if ((this.disableCardInAccessZoneOperationCompleted == null)) {
                this.disableCardInAccessZoneOperationCompleted = new System.Threading.SendOrPostCallback(this.OndisableCardInAccessZoneOperationCompleted);
            }
            this.InvokeAsync("disableCardInAccessZone", new object[] {
                        card,
                        code}, this.disableCardInAccessZoneOperationCompleted, userState);
        }
        
        private void OndisableCardInAccessZoneOperationCompleted(object arg) {
            if ((this.disableCardInAccessZoneCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.disableCardInAccessZoneCompleted(this, new disableCardInAccessZoneCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getMoviments", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getMoviments(string card, System.DateTime startDate, System.DateTime endDate) {
            object[] results = this.Invoke("getMoviments", new object[] {
                        card,
                        startDate,
                        endDate});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getMovimentsAsync(string card, System.DateTime startDate, System.DateTime endDate) {
            this.getMovimentsAsync(card, startDate, endDate, null);
        }
        
        /// <remarks/>
        public void getMovimentsAsync(string card, System.DateTime startDate, System.DateTime endDate, object userState) {
            if ((this.getMovimentsOperationCompleted == null)) {
                this.getMovimentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetMovimentsOperationCompleted);
            }
            this.InvokeAsync("getMoviments", new object[] {
                        card,
                        startDate,
                        endDate}, this.getMovimentsOperationCompleted, userState);
        }
        
        private void OngetMovimentsOperationCompleted(object arg) {
            if ((this.getMovimentsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getMovimentsCompleted(this, new getMovimentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/addMoviment", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string addMoviment(string pToken, System.DateTime date, string idEmp, string movType, string device, string photo, string idUser, string just, string workCode, bool approved, bool isTimeMoviment, bool isAccessMoviment, bool approvedBySuperior, int insertType) {
            object[] results = this.Invoke("addMoviment", new object[] {
                        pToken,
                        date,
                        idEmp,
                        movType,
                        device,
                        photo,
                        idUser,
                        just,
                        workCode,
                        approved,
                        isTimeMoviment,
                        isAccessMoviment,
                        approvedBySuperior,
                        insertType});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void addMovimentAsync(string pToken, System.DateTime date, string idEmp, string movType, string device, string photo, string idUser, string just, string workCode, bool approved, bool isTimeMoviment, bool isAccessMoviment, bool approvedBySuperior, int insertType) {
            this.addMovimentAsync(pToken, date, idEmp, movType, device, photo, idUser, just, workCode, approved, isTimeMoviment, isAccessMoviment, approvedBySuperior, insertType, null);
        }
        
        /// <remarks/>
        public void addMovimentAsync(string pToken, System.DateTime date, string idEmp, string movType, string device, string photo, string idUser, string just, string workCode, bool approved, bool isTimeMoviment, bool isAccessMoviment, bool approvedBySuperior, int insertType, object userState) {
            if ((this.addMovimentOperationCompleted == null)) {
                this.addMovimentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddMovimentOperationCompleted);
            }
            this.InvokeAsync("addMoviment", new object[] {
                        pToken,
                        date,
                        idEmp,
                        movType,
                        device,
                        photo,
                        idUser,
                        just,
                        workCode,
                        approved,
                        isTimeMoviment,
                        isAccessMoviment,
                        approvedBySuperior,
                        insertType}, this.addMovimentOperationCompleted, userState);
        }
        
        private void OnaddMovimentOperationCompleted(object arg) {
            if ((this.addMovimentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addMovimentCompleted(this, new addMovimentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/addMovimentFromTimeTrackMobile", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string addMovimentFromTimeTrackMobile(string pToken, System.DateTime date, string idEmp, string movType, string device, string photo, string idUser, string just, string workCode, string latitude, string longitude, bool approved, bool approvedBySuperior) {
            object[] results = this.Invoke("addMovimentFromTimeTrackMobile", new object[] {
                        pToken,
                        date,
                        idEmp,
                        movType,
                        device,
                        photo,
                        idUser,
                        just,
                        workCode,
                        latitude,
                        longitude,
                        approved,
                        approvedBySuperior});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void addMovimentFromTimeTrackMobileAsync(string pToken, System.DateTime date, string idEmp, string movType, string device, string photo, string idUser, string just, string workCode, string latitude, string longitude, bool approved, bool approvedBySuperior) {
            this.addMovimentFromTimeTrackMobileAsync(pToken, date, idEmp, movType, device, photo, idUser, just, workCode, latitude, longitude, approved, approvedBySuperior, null);
        }
        
        /// <remarks/>
        public void addMovimentFromTimeTrackMobileAsync(string pToken, System.DateTime date, string idEmp, string movType, string device, string photo, string idUser, string just, string workCode, string latitude, string longitude, bool approved, bool approvedBySuperior, object userState) {
            if ((this.addMovimentFromTimeTrackMobileOperationCompleted == null)) {
                this.addMovimentFromTimeTrackMobileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddMovimentFromTimeTrackMobileOperationCompleted);
            }
            this.InvokeAsync("addMovimentFromTimeTrackMobile", new object[] {
                        pToken,
                        date,
                        idEmp,
                        movType,
                        device,
                        photo,
                        idUser,
                        just,
                        workCode,
                        latitude,
                        longitude,
                        approved,
                        approvedBySuperior}, this.addMovimentFromTimeTrackMobileOperationCompleted, userState);
        }
        
        private void OnaddMovimentFromTimeTrackMobileOperationCompleted(object arg) {
            if ((this.addMovimentFromTimeTrackMobileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addMovimentFromTimeTrackMobileCompleted(this, new addMovimentFromTimeTrackMobileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/addMovimentFromMobilePhone", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string addMovimentFromMobilePhone(string pToken, System.DateTime date, int number, string movimentType, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] photo, double latitude, double longitude, bool approved, bool approvedBySuperior) {
            object[] results = this.Invoke("addMovimentFromMobilePhone", new object[] {
                        pToken,
                        date,
                        number,
                        movimentType,
                        photo,
                        latitude,
                        longitude,
                        approved,
                        approvedBySuperior});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void addMovimentFromMobilePhoneAsync(string pToken, System.DateTime date, int number, string movimentType, byte[] photo, double latitude, double longitude, bool approved, bool approvedBySuperior) {
            this.addMovimentFromMobilePhoneAsync(pToken, date, number, movimentType, photo, latitude, longitude, approved, approvedBySuperior, null);
        }
        
        /// <remarks/>
        public void addMovimentFromMobilePhoneAsync(string pToken, System.DateTime date, int number, string movimentType, byte[] photo, double latitude, double longitude, bool approved, bool approvedBySuperior, object userState) {
            if ((this.addMovimentFromMobilePhoneOperationCompleted == null)) {
                this.addMovimentFromMobilePhoneOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddMovimentFromMobilePhoneOperationCompleted);
            }
            this.InvokeAsync("addMovimentFromMobilePhone", new object[] {
                        pToken,
                        date,
                        number,
                        movimentType,
                        photo,
                        latitude,
                        longitude,
                        approved,
                        approvedBySuperior}, this.addMovimentFromMobilePhoneOperationCompleted, userState);
        }
        
        private void OnaddMovimentFromMobilePhoneOperationCompleted(object arg) {
            if ((this.addMovimentFromMobilePhoneCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addMovimentFromMobilePhoneCompleted(this, new addMovimentFromMobilePhoneCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/setMovimentIgnored", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int setMovimentIgnored(string pToken, string idMoviment, bool ignored) {
            object[] results = this.Invoke("setMovimentIgnored", new object[] {
                        pToken,
                        idMoviment,
                        ignored});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void setMovimentIgnoredAsync(string pToken, string idMoviment, bool ignored) {
            this.setMovimentIgnoredAsync(pToken, idMoviment, ignored, null);
        }
        
        /// <remarks/>
        public void setMovimentIgnoredAsync(string pToken, string idMoviment, bool ignored, object userState) {
            if ((this.setMovimentIgnoredOperationCompleted == null)) {
                this.setMovimentIgnoredOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetMovimentIgnoredOperationCompleted);
            }
            this.InvokeAsync("setMovimentIgnored", new object[] {
                        pToken,
                        idMoviment,
                        ignored}, this.setMovimentIgnoredOperationCompleted, userState);
        }
        
        private void OnsetMovimentIgnoredOperationCompleted(object arg) {
            if ((this.setMovimentIgnoredCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setMovimentIgnoredCompleted(this, new setMovimentIgnoredCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/updateMovimentType", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int updateMovimentType(string pToken, string idMoviment, string idMovimentType) {
            object[] results = this.Invoke("updateMovimentType", new object[] {
                        pToken,
                        idMoviment,
                        idMovimentType});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void updateMovimentTypeAsync(string pToken, string idMoviment, string idMovimentType) {
            this.updateMovimentTypeAsync(pToken, idMoviment, idMovimentType, null);
        }
        
        /// <remarks/>
        public void updateMovimentTypeAsync(string pToken, string idMoviment, string idMovimentType, object userState) {
            if ((this.updateMovimentTypeOperationCompleted == null)) {
                this.updateMovimentTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateMovimentTypeOperationCompleted);
            }
            this.InvokeAsync("updateMovimentType", new object[] {
                        pToken,
                        idMoviment,
                        idMovimentType}, this.updateMovimentTypeOperationCompleted, userState);
        }
        
        private void OnupdateMovimentTypeOperationCompleted(object arg) {
            if ((this.updateMovimentTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateMovimentTypeCompleted(this, new updateMovimentTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/updateMovimentTypeAndDate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int updateMovimentTypeAndDate(string pToken, string idMoviment, string idMovimentType, System.DateTime date) {
            object[] results = this.Invoke("updateMovimentTypeAndDate", new object[] {
                        pToken,
                        idMoviment,
                        idMovimentType,
                        date});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void updateMovimentTypeAndDateAsync(string pToken, string idMoviment, string idMovimentType, System.DateTime date) {
            this.updateMovimentTypeAndDateAsync(pToken, idMoviment, idMovimentType, date, null);
        }
        
        /// <remarks/>
        public void updateMovimentTypeAndDateAsync(string pToken, string idMoviment, string idMovimentType, System.DateTime date, object userState) {
            if ((this.updateMovimentTypeAndDateOperationCompleted == null)) {
                this.updateMovimentTypeAndDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateMovimentTypeAndDateOperationCompleted);
            }
            this.InvokeAsync("updateMovimentTypeAndDate", new object[] {
                        pToken,
                        idMoviment,
                        idMovimentType,
                        date}, this.updateMovimentTypeAndDateOperationCompleted, userState);
        }
        
        private void OnupdateMovimentTypeAndDateOperationCompleted(object arg) {
            if ((this.updateMovimentTypeAndDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateMovimentTypeAndDateCompleted(this, new updateMovimentTypeAndDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/updateMovimentWorkCode", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int updateMovimentWorkCode(string pToken, string idMoviment, string workCode) {
            object[] results = this.Invoke("updateMovimentWorkCode", new object[] {
                        pToken,
                        idMoviment,
                        workCode});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void updateMovimentWorkCodeAsync(string pToken, string idMoviment, string workCode) {
            this.updateMovimentWorkCodeAsync(pToken, idMoviment, workCode, null);
        }
        
        /// <remarks/>
        public void updateMovimentWorkCodeAsync(string pToken, string idMoviment, string workCode, object userState) {
            if ((this.updateMovimentWorkCodeOperationCompleted == null)) {
                this.updateMovimentWorkCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateMovimentWorkCodeOperationCompleted);
            }
            this.InvokeAsync("updateMovimentWorkCode", new object[] {
                        pToken,
                        idMoviment,
                        workCode}, this.updateMovimentWorkCodeOperationCompleted, userState);
        }
        
        private void OnupdateMovimentWorkCodeOperationCompleted(object arg) {
            if ((this.updateMovimentWorkCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateMovimentWorkCodeCompleted(this, new updateMovimentWorkCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/updateManualyClassified", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int updateManualyClassified(string pToken, string idMoviment) {
            object[] results = this.Invoke("updateManualyClassified", new object[] {
                        pToken,
                        idMoviment});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void updateManualyClassifiedAsync(string pToken, string idMoviment) {
            this.updateManualyClassifiedAsync(pToken, idMoviment, null);
        }
        
        /// <remarks/>
        public void updateManualyClassifiedAsync(string pToken, string idMoviment, object userState) {
            if ((this.updateManualyClassifiedOperationCompleted == null)) {
                this.updateManualyClassifiedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateManualyClassifiedOperationCompleted);
            }
            this.InvokeAsync("updateManualyClassified", new object[] {
                        pToken,
                        idMoviment}, this.updateManualyClassifiedOperationCompleted, userState);
        }
        
        private void OnupdateManualyClassifiedOperationCompleted(object arg) {
            if ((this.updateManualyClassifiedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateManualyClassifiedCompleted(this, new updateManualyClassifiedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getMoviment", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getMoviment(string pToken, string idEmployee, System.DateTime date) {
            object[] results = this.Invoke("getMoviment", new object[] {
                        pToken,
                        idEmployee,
                        date});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getMovimentAsync(string pToken, string idEmployee, System.DateTime date) {
            this.getMovimentAsync(pToken, idEmployee, date, null);
        }
        
        /// <remarks/>
        public void getMovimentAsync(string pToken, string idEmployee, System.DateTime date, object userState) {
            if ((this.getMovimentOperationCompleted == null)) {
                this.getMovimentOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetMovimentOperationCompleted);
            }
            this.InvokeAsync("getMoviment", new object[] {
                        pToken,
                        idEmployee,
                        date}, this.getMovimentOperationCompleted, userState);
        }
        
        private void OngetMovimentOperationCompleted(object arg) {
            if ((this.getMovimentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getMovimentCompleted(this, new getMovimentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getMovimentFromDevice", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getMovimentFromDevice(string pToken, string idEmployee, System.DateTime date, string device) {
            object[] results = this.Invoke("getMovimentFromDevice", new object[] {
                        pToken,
                        idEmployee,
                        date,
                        device});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getMovimentFromDeviceAsync(string pToken, string idEmployee, System.DateTime date, string device) {
            this.getMovimentFromDeviceAsync(pToken, idEmployee, date, device, null);
        }
        
        /// <remarks/>
        public void getMovimentFromDeviceAsync(string pToken, string idEmployee, System.DateTime date, string device, object userState) {
            if ((this.getMovimentFromDeviceOperationCompleted == null)) {
                this.getMovimentFromDeviceOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetMovimentFromDeviceOperationCompleted);
            }
            this.InvokeAsync("getMovimentFromDevice", new object[] {
                        pToken,
                        idEmployee,
                        date,
                        device}, this.getMovimentFromDeviceOperationCompleted, userState);
        }
        
        private void OngetMovimentFromDeviceOperationCompleted(object arg) {
            if ((this.getMovimentFromDeviceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getMovimentFromDeviceCompleted(this, new getMovimentFromDeviceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getLastMovimentFromDateTime", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getLastMovimentFromDateTime(string pToken, int numbMovs, string idEmployee, System.DateTime date) {
            object[] results = this.Invoke("getLastMovimentFromDateTime", new object[] {
                        pToken,
                        numbMovs,
                        idEmployee,
                        date});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getLastMovimentFromDateTimeAsync(string pToken, int numbMovs, string idEmployee, System.DateTime date) {
            this.getLastMovimentFromDateTimeAsync(pToken, numbMovs, idEmployee, date, null);
        }
        
        /// <remarks/>
        public void getLastMovimentFromDateTimeAsync(string pToken, int numbMovs, string idEmployee, System.DateTime date, object userState) {
            if ((this.getLastMovimentFromDateTimeOperationCompleted == null)) {
                this.getLastMovimentFromDateTimeOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetLastMovimentFromDateTimeOperationCompleted);
            }
            this.InvokeAsync("getLastMovimentFromDateTime", new object[] {
                        pToken,
                        numbMovs,
                        idEmployee,
                        date}, this.getLastMovimentFromDateTimeOperationCompleted, userState);
        }
        
        private void OngetLastMovimentFromDateTimeOperationCompleted(object arg) {
            if ((this.getLastMovimentFromDateTimeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getLastMovimentFromDateTimeCompleted(this, new getLastMovimentFromDateTimeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getLastMovimentLogFromDateTime", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getLastMovimentLogFromDateTime(string pToken, int numbMovs, string idEmployee, System.DateTime date) {
            object[] results = this.Invoke("getLastMovimentLogFromDateTime", new object[] {
                        pToken,
                        numbMovs,
                        idEmployee,
                        date});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getLastMovimentLogFromDateTimeAsync(string pToken, int numbMovs, string idEmployee, System.DateTime date) {
            this.getLastMovimentLogFromDateTimeAsync(pToken, numbMovs, idEmployee, date, null);
        }
        
        /// <remarks/>
        public void getLastMovimentLogFromDateTimeAsync(string pToken, int numbMovs, string idEmployee, System.DateTime date, object userState) {
            if ((this.getLastMovimentLogFromDateTimeOperationCompleted == null)) {
                this.getLastMovimentLogFromDateTimeOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetLastMovimentLogFromDateTimeOperationCompleted);
            }
            this.InvokeAsync("getLastMovimentLogFromDateTime", new object[] {
                        pToken,
                        numbMovs,
                        idEmployee,
                        date}, this.getLastMovimentLogFromDateTimeOperationCompleted, userState);
        }
        
        private void OngetLastMovimentLogFromDateTimeOperationCompleted(object arg) {
            if ((this.getLastMovimentLogFromDateTimeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getLastMovimentLogFromDateTimeCompleted(this, new getLastMovimentLogFromDateTimeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getLastMovimentFromDate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getLastMovimentFromDate(string pToken, string idEmployee, System.DateTime date) {
            object[] results = this.Invoke("getLastMovimentFromDate", new object[] {
                        pToken,
                        idEmployee,
                        date});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getLastMovimentFromDateAsync(string pToken, string idEmployee, System.DateTime date) {
            this.getLastMovimentFromDateAsync(pToken, idEmployee, date, null);
        }
        
        /// <remarks/>
        public void getLastMovimentFromDateAsync(string pToken, string idEmployee, System.DateTime date, object userState) {
            if ((this.getLastMovimentFromDateOperationCompleted == null)) {
                this.getLastMovimentFromDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetLastMovimentFromDateOperationCompleted);
            }
            this.InvokeAsync("getLastMovimentFromDate", new object[] {
                        pToken,
                        idEmployee,
                        date}, this.getLastMovimentFromDateOperationCompleted, userState);
        }
        
        private void OngetLastMovimentFromDateOperationCompleted(object arg) {
            if ((this.getLastMovimentFromDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getLastMovimentFromDateCompleted(this, new getLastMovimentFromDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getLastMovimentFromDateFiltredByMovimentType", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getLastMovimentFromDateFiltredByMovimentType(string pToken, string idEmployee, System.DateTime date, string idMovimentType) {
            object[] results = this.Invoke("getLastMovimentFromDateFiltredByMovimentType", new object[] {
                        pToken,
                        idEmployee,
                        date,
                        idMovimentType});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getLastMovimentFromDateFiltredByMovimentTypeAsync(string pToken, string idEmployee, System.DateTime date, string idMovimentType) {
            this.getLastMovimentFromDateFiltredByMovimentTypeAsync(pToken, idEmployee, date, idMovimentType, null);
        }
        
        /// <remarks/>
        public void getLastMovimentFromDateFiltredByMovimentTypeAsync(string pToken, string idEmployee, System.DateTime date, string idMovimentType, object userState) {
            if ((this.getLastMovimentFromDateFiltredByMovimentTypeOperationCompleted == null)) {
                this.getLastMovimentFromDateFiltredByMovimentTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetLastMovimentFromDateFiltredByMovimentTypeOperationCompleted);
            }
            this.InvokeAsync("getLastMovimentFromDateFiltredByMovimentType", new object[] {
                        pToken,
                        idEmployee,
                        date,
                        idMovimentType}, this.getLastMovimentFromDateFiltredByMovimentTypeOperationCompleted, userState);
        }
        
        private void OngetLastMovimentFromDateFiltredByMovimentTypeOperationCompleted(object arg) {
            if ((this.getLastMovimentFromDateFiltredByMovimentTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getLastMovimentFromDateFiltredByMovimentTypeCompleted(this, new getLastMovimentFromDateFiltredByMovimentTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getLastEmployeeMoviments", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getLastEmployeeMoviments(string pToken, string idEmployee, int numberOfMovs) {
            object[] results = this.Invoke("getLastEmployeeMoviments", new object[] {
                        pToken,
                        idEmployee,
                        numberOfMovs});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getLastEmployeeMovimentsAsync(string pToken, string idEmployee, int numberOfMovs) {
            this.getLastEmployeeMovimentsAsync(pToken, idEmployee, numberOfMovs, null);
        }
        
        /// <remarks/>
        public void getLastEmployeeMovimentsAsync(string pToken, string idEmployee, int numberOfMovs, object userState) {
            if ((this.getLastEmployeeMovimentsOperationCompleted == null)) {
                this.getLastEmployeeMovimentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetLastEmployeeMovimentsOperationCompleted);
            }
            this.InvokeAsync("getLastEmployeeMoviments", new object[] {
                        pToken,
                        idEmployee,
                        numberOfMovs}, this.getLastEmployeeMovimentsOperationCompleted, userState);
        }
        
        private void OngetLastEmployeeMovimentsOperationCompleted(object arg) {
            if ((this.getLastEmployeeMovimentsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getLastEmployeeMovimentsCompleted(this, new getLastEmployeeMovimentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getLastMoviments", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getLastMoviments(string pToken, int numberOfMovs, string idUser) {
            object[] results = this.Invoke("getLastMoviments", new object[] {
                        pToken,
                        numberOfMovs,
                        idUser});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getLastMovimentsAsync(string pToken, int numberOfMovs, string idUser) {
            this.getLastMovimentsAsync(pToken, numberOfMovs, idUser, null);
        }
        
        /// <remarks/>
        public void getLastMovimentsAsync(string pToken, int numberOfMovs, string idUser, object userState) {
            if ((this.getLastMovimentsOperationCompleted == null)) {
                this.getLastMovimentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetLastMovimentsOperationCompleted);
            }
            this.InvokeAsync("getLastMoviments", new object[] {
                        pToken,
                        numberOfMovs,
                        idUser}, this.getLastMovimentsOperationCompleted, userState);
        }
        
        private void OngetLastMovimentsOperationCompleted(object arg) {
            if ((this.getLastMovimentsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getLastMovimentsCompleted(this, new getLastMovimentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getLastEmployeeMovimentsFrominterval", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getLastEmployeeMovimentsFrominterval(string pToken, string idEmployee, System.DateTime start, System.DateTime end) {
            object[] results = this.Invoke("getLastEmployeeMovimentsFrominterval", new object[] {
                        pToken,
                        idEmployee,
                        start,
                        end});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getLastEmployeeMovimentsFromintervalAsync(string pToken, string idEmployee, System.DateTime start, System.DateTime end) {
            this.getLastEmployeeMovimentsFromintervalAsync(pToken, idEmployee, start, end, null);
        }
        
        /// <remarks/>
        public void getLastEmployeeMovimentsFromintervalAsync(string pToken, string idEmployee, System.DateTime start, System.DateTime end, object userState) {
            if ((this.getLastEmployeeMovimentsFromintervalOperationCompleted == null)) {
                this.getLastEmployeeMovimentsFromintervalOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetLastEmployeeMovimentsFromintervalOperationCompleted);
            }
            this.InvokeAsync("getLastEmployeeMovimentsFrominterval", new object[] {
                        pToken,
                        idEmployee,
                        start,
                        end}, this.getLastEmployeeMovimentsFromintervalOperationCompleted, userState);
        }
        
        private void OngetLastEmployeeMovimentsFromintervalOperationCompleted(object arg) {
            if ((this.getLastEmployeeMovimentsFromintervalCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getLastEmployeeMovimentsFromintervalCompleted(this, new getLastEmployeeMovimentsFromintervalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getLastEmployeeMovimentsWorkCodeFrominterval", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getLastEmployeeMovimentsWorkCodeFrominterval(string pToken, string idEmployee, System.DateTime start, System.DateTime end) {
            object[] results = this.Invoke("getLastEmployeeMovimentsWorkCodeFrominterval", new object[] {
                        pToken,
                        idEmployee,
                        start,
                        end});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getLastEmployeeMovimentsWorkCodeFromintervalAsync(string pToken, string idEmployee, System.DateTime start, System.DateTime end) {
            this.getLastEmployeeMovimentsWorkCodeFromintervalAsync(pToken, idEmployee, start, end, null);
        }
        
        /// <remarks/>
        public void getLastEmployeeMovimentsWorkCodeFromintervalAsync(string pToken, string idEmployee, System.DateTime start, System.DateTime end, object userState) {
            if ((this.getLastEmployeeMovimentsWorkCodeFromintervalOperationCompleted == null)) {
                this.getLastEmployeeMovimentsWorkCodeFromintervalOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetLastEmployeeMovimentsWorkCodeFromintervalOperationCompleted);
            }
            this.InvokeAsync("getLastEmployeeMovimentsWorkCodeFrominterval", new object[] {
                        pToken,
                        idEmployee,
                        start,
                        end}, this.getLastEmployeeMovimentsWorkCodeFromintervalOperationCompleted, userState);
        }
        
        private void OngetLastEmployeeMovimentsWorkCodeFromintervalOperationCompleted(object arg) {
            if ((this.getLastEmployeeMovimentsWorkCodeFromintervalCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getLastEmployeeMovimentsWorkCodeFromintervalCompleted(this, new getLastEmployeeMovimentsWorkCodeFromintervalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getEmployeeAllMovimentsFrominterval", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getEmployeeAllMovimentsFrominterval(string pToken, string idEmployee, System.DateTime start, System.DateTime end) {
            object[] results = this.Invoke("getEmployeeAllMovimentsFrominterval", new object[] {
                        pToken,
                        idEmployee,
                        start,
                        end});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getEmployeeAllMovimentsFromintervalAsync(string pToken, string idEmployee, System.DateTime start, System.DateTime end) {
            this.getEmployeeAllMovimentsFromintervalAsync(pToken, idEmployee, start, end, null);
        }
        
        /// <remarks/>
        public void getEmployeeAllMovimentsFromintervalAsync(string pToken, string idEmployee, System.DateTime start, System.DateTime end, object userState) {
            if ((this.getEmployeeAllMovimentsFromintervalOperationCompleted == null)) {
                this.getEmployeeAllMovimentsFromintervalOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetEmployeeAllMovimentsFromintervalOperationCompleted);
            }
            this.InvokeAsync("getEmployeeAllMovimentsFrominterval", new object[] {
                        pToken,
                        idEmployee,
                        start,
                        end}, this.getEmployeeAllMovimentsFromintervalOperationCompleted, userState);
        }
        
        private void OngetEmployeeAllMovimentsFromintervalOperationCompleted(object arg) {
            if ((this.getEmployeeAllMovimentsFromintervalCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getEmployeeAllMovimentsFromintervalCompleted(this, new getEmployeeAllMovimentsFromintervalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getMovimentsFromIntervalByDep", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getMovimentsFromIntervalByDep(string pToken, string idDep, System.DateTime start, System.DateTime end) {
            object[] results = this.Invoke("getMovimentsFromIntervalByDep", new object[] {
                        pToken,
                        idDep,
                        start,
                        end});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getMovimentsFromIntervalByDepAsync(string pToken, string idDep, System.DateTime start, System.DateTime end) {
            this.getMovimentsFromIntervalByDepAsync(pToken, idDep, start, end, null);
        }
        
        /// <remarks/>
        public void getMovimentsFromIntervalByDepAsync(string pToken, string idDep, System.DateTime start, System.DateTime end, object userState) {
            if ((this.getMovimentsFromIntervalByDepOperationCompleted == null)) {
                this.getMovimentsFromIntervalByDepOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetMovimentsFromIntervalByDepOperationCompleted);
            }
            this.InvokeAsync("getMovimentsFromIntervalByDep", new object[] {
                        pToken,
                        idDep,
                        start,
                        end}, this.getMovimentsFromIntervalByDepOperationCompleted, userState);
        }
        
        private void OngetMovimentsFromIntervalByDepOperationCompleted(object arg) {
            if ((this.getMovimentsFromIntervalByDepCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getMovimentsFromIntervalByDepCompleted(this, new getMovimentsFromIntervalByDepCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getMovimentsFromIntervalByEmpl", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getMovimentsFromIntervalByEmpl(string pToken, string[] idEmpl, System.DateTime start, System.DateTime end) {
            object[] results = this.Invoke("getMovimentsFromIntervalByEmpl", new object[] {
                        pToken,
                        idEmpl,
                        start,
                        end});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getMovimentsFromIntervalByEmplAsync(string pToken, string[] idEmpl, System.DateTime start, System.DateTime end) {
            this.getMovimentsFromIntervalByEmplAsync(pToken, idEmpl, start, end, null);
        }
        
        /// <remarks/>
        public void getMovimentsFromIntervalByEmplAsync(string pToken, string[] idEmpl, System.DateTime start, System.DateTime end, object userState) {
            if ((this.getMovimentsFromIntervalByEmplOperationCompleted == null)) {
                this.getMovimentsFromIntervalByEmplOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetMovimentsFromIntervalByEmplOperationCompleted);
            }
            this.InvokeAsync("getMovimentsFromIntervalByEmpl", new object[] {
                        pToken,
                        idEmpl,
                        start,
                        end}, this.getMovimentsFromIntervalByEmplOperationCompleted, userState);
        }
        
        private void OngetMovimentsFromIntervalByEmplOperationCompleted(object arg) {
            if ((this.getMovimentsFromIntervalByEmplCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getMovimentsFromIntervalByEmplCompleted(this, new getMovimentsFromIntervalByEmplCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/addMovimentsLogs", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int addMovimentsLogs(string pToken, string idEmployee, System.DateTime date, int day, int month, int year, int accessMethod, string idDevice) {
            object[] results = this.Invoke("addMovimentsLogs", new object[] {
                        pToken,
                        idEmployee,
                        date,
                        day,
                        month,
                        year,
                        accessMethod,
                        idDevice});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void addMovimentsLogsAsync(string pToken, string idEmployee, System.DateTime date, int day, int month, int year, int accessMethod, string idDevice) {
            this.addMovimentsLogsAsync(pToken, idEmployee, date, day, month, year, accessMethod, idDevice, null);
        }
        
        /// <remarks/>
        public void addMovimentsLogsAsync(string pToken, string idEmployee, System.DateTime date, int day, int month, int year, int accessMethod, string idDevice, object userState) {
            if ((this.addMovimentsLogsOperationCompleted == null)) {
                this.addMovimentsLogsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddMovimentsLogsOperationCompleted);
            }
            this.InvokeAsync("addMovimentsLogs", new object[] {
                        pToken,
                        idEmployee,
                        date,
                        day,
                        month,
                        year,
                        accessMethod,
                        idDevice}, this.addMovimentsLogsOperationCompleted, userState);
        }
        
        private void OnaddMovimentsLogsOperationCompleted(object arg) {
            if ((this.addMovimentsLogsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addMovimentsLogsCompleted(this, new addMovimentsLogsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getMovimentLog", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getMovimentLog(string pToken, string idEmployee, System.DateTime date) {
            object[] results = this.Invoke("getMovimentLog", new object[] {
                        pToken,
                        idEmployee,
                        date});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getMovimentLogAsync(string pToken, string idEmployee, System.DateTime date) {
            this.getMovimentLogAsync(pToken, idEmployee, date, null);
        }
        
        /// <remarks/>
        public void getMovimentLogAsync(string pToken, string idEmployee, System.DateTime date, object userState) {
            if ((this.getMovimentLogOperationCompleted == null)) {
                this.getMovimentLogOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetMovimentLogOperationCompleted);
            }
            this.InvokeAsync("getMovimentLog", new object[] {
                        pToken,
                        idEmployee,
                        date}, this.getMovimentLogOperationCompleted, userState);
        }
        
        private void OngetMovimentLogOperationCompleted(object arg) {
            if ((this.getMovimentLogCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getMovimentLogCompleted(this, new getMovimentLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getDeviceLastMovimentLog", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getDeviceLastMovimentLog(string pToken, string idDevice) {
            object[] results = this.Invoke("getDeviceLastMovimentLog", new object[] {
                        pToken,
                        idDevice});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getDeviceLastMovimentLogAsync(string pToken, string idDevice) {
            this.getDeviceLastMovimentLogAsync(pToken, idDevice, null);
        }
        
        /// <remarks/>
        public void getDeviceLastMovimentLogAsync(string pToken, string idDevice, object userState) {
            if ((this.getDeviceLastMovimentLogOperationCompleted == null)) {
                this.getDeviceLastMovimentLogOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDeviceLastMovimentLogOperationCompleted);
            }
            this.InvokeAsync("getDeviceLastMovimentLog", new object[] {
                        pToken,
                        idDevice}, this.getDeviceLastMovimentLogOperationCompleted, userState);
        }
        
        private void OngetDeviceLastMovimentLogOperationCompleted(object arg) {
            if ((this.getDeviceLastMovimentLogCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDeviceLastMovimentLogCompleted(this, new getDeviceLastMovimentLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getEmployeeAllMovimentsLogsFrominterval", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getEmployeeAllMovimentsLogsFrominterval(string pToken, string idEmployee, System.DateTime start, System.DateTime end) {
            object[] results = this.Invoke("getEmployeeAllMovimentsLogsFrominterval", new object[] {
                        pToken,
                        idEmployee,
                        start,
                        end});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getEmployeeAllMovimentsLogsFromintervalAsync(string pToken, string idEmployee, System.DateTime start, System.DateTime end) {
            this.getEmployeeAllMovimentsLogsFromintervalAsync(pToken, idEmployee, start, end, null);
        }
        
        /// <remarks/>
        public void getEmployeeAllMovimentsLogsFromintervalAsync(string pToken, string idEmployee, System.DateTime start, System.DateTime end, object userState) {
            if ((this.getEmployeeAllMovimentsLogsFromintervalOperationCompleted == null)) {
                this.getEmployeeAllMovimentsLogsFromintervalOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetEmployeeAllMovimentsLogsFromintervalOperationCompleted);
            }
            this.InvokeAsync("getEmployeeAllMovimentsLogsFrominterval", new object[] {
                        pToken,
                        idEmployee,
                        start,
                        end}, this.getEmployeeAllMovimentsLogsFromintervalOperationCompleted, userState);
        }
        
        private void OngetEmployeeAllMovimentsLogsFromintervalOperationCompleted(object arg) {
            if ((this.getEmployeeAllMovimentsLogsFromintervalCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getEmployeeAllMovimentsLogsFromintervalCompleted(this, new getEmployeeAllMovimentsLogsFromintervalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/addMovimentSuggested", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string addMovimentSuggested(string pToken, System.DateTime date, string idEmp, string movimentType, string idExc) {
            object[] results = this.Invoke("addMovimentSuggested", new object[] {
                        pToken,
                        date,
                        idEmp,
                        movimentType,
                        idExc});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void addMovimentSuggestedAsync(string pToken, System.DateTime date, string idEmp, string movimentType, string idExc) {
            this.addMovimentSuggestedAsync(pToken, date, idEmp, movimentType, idExc, null);
        }
        
        /// <remarks/>
        public void addMovimentSuggestedAsync(string pToken, System.DateTime date, string idEmp, string movimentType, string idExc, object userState) {
            if ((this.addMovimentSuggestedOperationCompleted == null)) {
                this.addMovimentSuggestedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddMovimentSuggestedOperationCompleted);
            }
            this.InvokeAsync("addMovimentSuggested", new object[] {
                        pToken,
                        date,
                        idEmp,
                        movimentType,
                        idExc}, this.addMovimentSuggestedOperationCompleted, userState);
        }
        
        private void OnaddMovimentSuggestedOperationCompleted(object arg) {
            if ((this.addMovimentSuggestedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addMovimentSuggestedCompleted(this, new addMovimentSuggestedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getExceptionSuggestedMovs", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getExceptionSuggestedMovs(string pToken, string idExc) {
            object[] results = this.Invoke("getExceptionSuggestedMovs", new object[] {
                        pToken,
                        idExc});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getExceptionSuggestedMovsAsync(string pToken, string idExc) {
            this.getExceptionSuggestedMovsAsync(pToken, idExc, null);
        }
        
        /// <remarks/>
        public void getExceptionSuggestedMovsAsync(string pToken, string idExc, object userState) {
            if ((this.getExceptionSuggestedMovsOperationCompleted == null)) {
                this.getExceptionSuggestedMovsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetExceptionSuggestedMovsOperationCompleted);
            }
            this.InvokeAsync("getExceptionSuggestedMovs", new object[] {
                        pToken,
                        idExc}, this.getExceptionSuggestedMovsOperationCompleted, userState);
        }
        
        private void OngetExceptionSuggestedMovsOperationCompleted(object arg) {
            if ((this.getExceptionSuggestedMovsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getExceptionSuggestedMovsCompleted(this, new getExceptionSuggestedMovsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getGprsMovimentNotTrated", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getGprsMovimentNotTrated(string pToken) {
            object[] results = this.Invoke("getGprsMovimentNotTrated", new object[] {
                        pToken});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getGprsMovimentNotTratedAsync(string pToken) {
            this.getGprsMovimentNotTratedAsync(pToken, null);
        }
        
        /// <remarks/>
        public void getGprsMovimentNotTratedAsync(string pToken, object userState) {
            if ((this.getGprsMovimentNotTratedOperationCompleted == null)) {
                this.getGprsMovimentNotTratedOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetGprsMovimentNotTratedOperationCompleted);
            }
            this.InvokeAsync("getGprsMovimentNotTrated", new object[] {
                        pToken}, this.getGprsMovimentNotTratedOperationCompleted, userState);
        }
        
        private void OngetGprsMovimentNotTratedOperationCompleted(object arg) {
            if ((this.getGprsMovimentNotTratedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getGprsMovimentNotTratedCompleted(this, new getGprsMovimentNotTratedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/setGPRSMovimentIgnored", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int setGPRSMovimentIgnored(string pToken, string idGprsMov) {
            object[] results = this.Invoke("setGPRSMovimentIgnored", new object[] {
                        pToken,
                        idGprsMov});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void setGPRSMovimentIgnoredAsync(string pToken, string idGprsMov) {
            this.setGPRSMovimentIgnoredAsync(pToken, idGprsMov, null);
        }
        
        /// <remarks/>
        public void setGPRSMovimentIgnoredAsync(string pToken, string idGprsMov, object userState) {
            if ((this.setGPRSMovimentIgnoredOperationCompleted == null)) {
                this.setGPRSMovimentIgnoredOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetGPRSMovimentIgnoredOperationCompleted);
            }
            this.InvokeAsync("setGPRSMovimentIgnored", new object[] {
                        pToken,
                        idGprsMov}, this.setGPRSMovimentIgnoredOperationCompleted, userState);
        }
        
        private void OnsetGPRSMovimentIgnoredOperationCompleted(object arg) {
            if ((this.setGPRSMovimentIgnoredCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setGPRSMovimentIgnoredCompleted(this, new setGPRSMovimentIgnoredCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getLastStep", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int getLastStep(string pToken, int pid) {
            object[] results = this.Invoke("getLastStep", new object[] {
                        pToken,
                        pid});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void getLastStepAsync(string pToken, int pid) {
            this.getLastStepAsync(pToken, pid, null);
        }
        
        /// <remarks/>
        public void getLastStepAsync(string pToken, int pid, object userState) {
            if ((this.getLastStepOperationCompleted == null)) {
                this.getLastStepOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetLastStepOperationCompleted);
            }
            this.InvokeAsync("getLastStep", new object[] {
                        pToken,
                        pid}, this.getLastStepOperationCompleted, userState);
        }
        
        private void OngetLastStepOperationCompleted(object arg) {
            if ((this.getLastStepCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getLastStepCompleted(this, new getLastStepCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getPreviousResp", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getPreviousResp(string pToken, int pid) {
            object[] results = this.Invoke("getPreviousResp", new object[] {
                        pToken,
                        pid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getPreviousRespAsync(string pToken, int pid) {
            this.getPreviousRespAsync(pToken, pid, null);
        }
        
        /// <remarks/>
        public void getPreviousRespAsync(string pToken, int pid, object userState) {
            if ((this.getPreviousRespOperationCompleted == null)) {
                this.getPreviousRespOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetPreviousRespOperationCompleted);
            }
            this.InvokeAsync("getPreviousResp", new object[] {
                        pToken,
                        pid}, this.getPreviousRespOperationCompleted, userState);
        }
        
        private void OngetPreviousRespOperationCompleted(object arg) {
            if ((this.getPreviousRespCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getPreviousRespCompleted(this, new getPreviousRespCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getProcessActState", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getProcessActState(string pToken, int pid) {
            object[] results = this.Invoke("getProcessActState", new object[] {
                        pToken,
                        pid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getProcessActStateAsync(string pToken, int pid) {
            this.getProcessActStateAsync(pToken, pid, null);
        }
        
        /// <remarks/>
        public void getProcessActStateAsync(string pToken, int pid, object userState) {
            if ((this.getProcessActStateOperationCompleted == null)) {
                this.getProcessActStateOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetProcessActStateOperationCompleted);
            }
            this.InvokeAsync("getProcessActState", new object[] {
                        pToken,
                        pid}, this.getProcessActStateOperationCompleted, userState);
        }
        
        private void OngetProcessActStateOperationCompleted(object arg) {
            if ((this.getProcessActStateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getProcessActStateCompleted(this, new getProcessActStateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getProcessData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getProcessData(string pToken, int pid) {
            object[] results = this.Invoke("getProcessData", new object[] {
                        pToken,
                        pid});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getProcessDataAsync(string pToken, int pid) {
            this.getProcessDataAsync(pToken, pid, null);
        }
        
        /// <remarks/>
        public void getProcessDataAsync(string pToken, int pid, object userState) {
            if ((this.getProcessDataOperationCompleted == null)) {
                this.getProcessDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetProcessDataOperationCompleted);
            }
            this.InvokeAsync("getProcessData", new object[] {
                        pToken,
                        pid}, this.getProcessDataOperationCompleted, userState);
        }
        
        private void OngetProcessDataOperationCompleted(object arg) {
            if ((this.getProcessDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getProcessDataCompleted(this, new getProcessDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getAllVacations", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getAllVacations(string pToken) {
            object[] results = this.Invoke("getAllVacations", new object[] {
                        pToken});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getAllVacationsAsync(string pToken) {
            this.getAllVacationsAsync(pToken, null);
        }
        
        /// <remarks/>
        public void getAllVacationsAsync(string pToken, object userState) {
            if ((this.getAllVacationsOperationCompleted == null)) {
                this.getAllVacationsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllVacationsOperationCompleted);
            }
            this.InvokeAsync("getAllVacations", new object[] {
                        pToken}, this.getAllVacationsOperationCompleted, userState);
        }
        
        private void OngetAllVacationsOperationCompleted(object arg) {
            if ((this.getAllVacationsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllVacationsCompleted(this, new getAllVacationsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getUseridEmployee", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getUseridEmployee(string pToken, string userID) {
            object[] results = this.Invoke("getUseridEmployee", new object[] {
                        pToken,
                        userID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getUseridEmployeeAsync(string pToken, string userID) {
            this.getUseridEmployeeAsync(pToken, userID, null);
        }
        
        /// <remarks/>
        public void getUseridEmployeeAsync(string pToken, string userID, object userState) {
            if ((this.getUseridEmployeeOperationCompleted == null)) {
                this.getUseridEmployeeOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetUseridEmployeeOperationCompleted);
            }
            this.InvokeAsync("getUseridEmployee", new object[] {
                        pToken,
                        userID}, this.getUseridEmployeeOperationCompleted, userState);
        }
        
        private void OngetUseridEmployeeOperationCompleted(object arg) {
            if ((this.getUseridEmployeeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getUseridEmployeeCompleted(this, new getUseridEmployeeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getStateTypes", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getStateTypes(string pToken, int pid) {
            object[] results = this.Invoke("getStateTypes", new object[] {
                        pToken,
                        pid});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getStateTypesAsync(string pToken, int pid) {
            this.getStateTypesAsync(pToken, pid, null);
        }
        
        /// <remarks/>
        public void getStateTypesAsync(string pToken, int pid, object userState) {
            if ((this.getStateTypesOperationCompleted == null)) {
                this.getStateTypesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetStateTypesOperationCompleted);
            }
            this.InvokeAsync("getStateTypes", new object[] {
                        pToken,
                        pid}, this.getStateTypesOperationCompleted, userState);
        }
        
        private void OngetStateTypesOperationCompleted(object arg) {
            if ((this.getStateTypesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getStateTypesCompleted(this, new getStateTypesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/changeState", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int changeState(string pToken, int pid, int prevState, int actState, string login, string resp, string desc, string timeout, string OP) {
            object[] results = this.Invoke("changeState", new object[] {
                        pToken,
                        pid,
                        prevState,
                        actState,
                        login,
                        resp,
                        desc,
                        timeout,
                        OP});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void changeStateAsync(string pToken, int pid, int prevState, int actState, string login, string resp, string desc, string timeout, string OP) {
            this.changeStateAsync(pToken, pid, prevState, actState, login, resp, desc, timeout, OP, null);
        }
        
        /// <remarks/>
        public void changeStateAsync(string pToken, int pid, int prevState, int actState, string login, string resp, string desc, string timeout, string OP, object userState) {
            if ((this.changeStateOperationCompleted == null)) {
                this.changeStateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnchangeStateOperationCompleted);
            }
            this.InvokeAsync("changeState", new object[] {
                        pToken,
                        pid,
                        prevState,
                        actState,
                        login,
                        resp,
                        desc,
                        timeout,
                        OP}, this.changeStateOperationCompleted, userState);
        }
        
        private void OnchangeStateOperationCompleted(object arg) {
            if ((this.changeStateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.changeStateCompleted(this, new changeStateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/initializeProcHistory", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int initializeProcHistory(string pToken, int auxID, int pType, int prevState, int actState, System.DateTime dateHistory, string login) {
            object[] results = this.Invoke("initializeProcHistory", new object[] {
                        pToken,
                        auxID,
                        pType,
                        prevState,
                        actState,
                        dateHistory,
                        login});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void initializeProcHistoryAsync(string pToken, int auxID, int pType, int prevState, int actState, System.DateTime dateHistory, string login) {
            this.initializeProcHistoryAsync(pToken, auxID, pType, prevState, actState, dateHistory, login, null);
        }
        
        /// <remarks/>
        public void initializeProcHistoryAsync(string pToken, int auxID, int pType, int prevState, int actState, System.DateTime dateHistory, string login, object userState) {
            if ((this.initializeProcHistoryOperationCompleted == null)) {
                this.initializeProcHistoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OninitializeProcHistoryOperationCompleted);
            }
            this.InvokeAsync("initializeProcHistory", new object[] {
                        pToken,
                        auxID,
                        pType,
                        prevState,
                        actState,
                        dateHistory,
                        login}, this.initializeProcHistoryOperationCompleted, userState);
        }
        
        private void OninitializeProcHistoryOperationCompleted(object arg) {
            if ((this.initializeProcHistoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.initializeProcHistoryCompleted(this, new initializeProcHistoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/newNotification", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int newNotification(string pToken, int pid, int prevState, int actState, int roleID, int msgID, bool emailSent) {
            object[] results = this.Invoke("newNotification", new object[] {
                        pToken,
                        pid,
                        prevState,
                        actState,
                        roleID,
                        msgID,
                        emailSent});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void newNotificationAsync(string pToken, int pid, int prevState, int actState, int roleID, int msgID, bool emailSent) {
            this.newNotificationAsync(pToken, pid, prevState, actState, roleID, msgID, emailSent, null);
        }
        
        /// <remarks/>
        public void newNotificationAsync(string pToken, int pid, int prevState, int actState, int roleID, int msgID, bool emailSent, object userState) {
            if ((this.newNotificationOperationCompleted == null)) {
                this.newNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnnewNotificationOperationCompleted);
            }
            this.InvokeAsync("newNotification", new object[] {
                        pToken,
                        pid,
                        prevState,
                        actState,
                        roleID,
                        msgID,
                        emailSent}, this.newNotificationOperationCompleted, userState);
        }
        
        private void OnnewNotificationOperationCompleted(object arg) {
            if ((this.newNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.newNotificationCompleted(this, new newNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getProcessDataAbsences", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getProcessDataAbsences(string pToken, int pid) {
            object[] results = this.Invoke("getProcessDataAbsences", new object[] {
                        pToken,
                        pid});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getProcessDataAbsencesAsync(string pToken, int pid) {
            this.getProcessDataAbsencesAsync(pToken, pid, null);
        }
        
        /// <remarks/>
        public void getProcessDataAbsencesAsync(string pToken, int pid, object userState) {
            if ((this.getProcessDataAbsencesOperationCompleted == null)) {
                this.getProcessDataAbsencesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetProcessDataAbsencesOperationCompleted);
            }
            this.InvokeAsync("getProcessDataAbsences", new object[] {
                        pToken,
                        pid}, this.getProcessDataAbsencesOperationCompleted, userState);
        }
        
        private void OngetProcessDataAbsencesOperationCompleted(object arg) {
            if ((this.getProcessDataAbsencesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getProcessDataAbsencesCompleted(this, new getProcessDataAbsencesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/addGprsMoviment", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int addGprsMoviment(string pToken, int userID, System.DateTime checktime, int checktype, int verifycode, string sensorID, string memoInfo, int workCode, int machine, bool trated) {
            object[] results = this.Invoke("addGprsMoviment", new object[] {
                        pToken,
                        userID,
                        checktime,
                        checktype,
                        verifycode,
                        sensorID,
                        memoInfo,
                        workCode,
                        machine,
                        trated});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void addGprsMovimentAsync(string pToken, int userID, System.DateTime checktime, int checktype, int verifycode, string sensorID, string memoInfo, int workCode, int machine, bool trated) {
            this.addGprsMovimentAsync(pToken, userID, checktime, checktype, verifycode, sensorID, memoInfo, workCode, machine, trated, null);
        }
        
        /// <remarks/>
        public void addGprsMovimentAsync(string pToken, int userID, System.DateTime checktime, int checktype, int verifycode, string sensorID, string memoInfo, int workCode, int machine, bool trated, object userState) {
            if ((this.addGprsMovimentOperationCompleted == null)) {
                this.addGprsMovimentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddGprsMovimentOperationCompleted);
            }
            this.InvokeAsync("addGprsMoviment", new object[] {
                        pToken,
                        userID,
                        checktime,
                        checktype,
                        verifycode,
                        sensorID,
                        memoInfo,
                        workCode,
                        machine,
                        trated}, this.addGprsMovimentOperationCompleted, userState);
        }
        
        private void OnaddGprsMovimentOperationCompleted(object arg) {
            if ((this.addGprsMovimentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addGprsMovimentCompleted(this, new addGprsMovimentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/insertHourBalanceDate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int insertHourBalanceDate(string pToken, string idEmployee, string idType, System.DateTime date, int nMinutes) {
            object[] results = this.Invoke("insertHourBalanceDate", new object[] {
                        pToken,
                        idEmployee,
                        idType,
                        date,
                        nMinutes});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void insertHourBalanceDateAsync(string pToken, string idEmployee, string idType, System.DateTime date, int nMinutes) {
            this.insertHourBalanceDateAsync(pToken, idEmployee, idType, date, nMinutes, null);
        }
        
        /// <remarks/>
        public void insertHourBalanceDateAsync(string pToken, string idEmployee, string idType, System.DateTime date, int nMinutes, object userState) {
            if ((this.insertHourBalanceDateOperationCompleted == null)) {
                this.insertHourBalanceDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OninsertHourBalanceDateOperationCompleted);
            }
            this.InvokeAsync("insertHourBalanceDate", new object[] {
                        pToken,
                        idEmployee,
                        idType,
                        date,
                        nMinutes}, this.insertHourBalanceDateOperationCompleted, userState);
        }
        
        private void OninsertHourBalanceDateOperationCompleted(object arg) {
            if ((this.insertHourBalanceDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.insertHourBalanceDateCompleted(this, new insertHourBalanceDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getRealHourBalanceByEmployeeBetweenDate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable getRealHourBalanceByEmployeeBetweenDate(string pToken, string idEmployee, System.DateTime startDate, System.DateTime endDate) {
            object[] results = this.Invoke("getRealHourBalanceByEmployeeBetweenDate", new object[] {
                        pToken,
                        idEmployee,
                        startDate,
                        endDate});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void getRealHourBalanceByEmployeeBetweenDateAsync(string pToken, string idEmployee, System.DateTime startDate, System.DateTime endDate) {
            this.getRealHourBalanceByEmployeeBetweenDateAsync(pToken, idEmployee, startDate, endDate, null);
        }
        
        /// <remarks/>
        public void getRealHourBalanceByEmployeeBetweenDateAsync(string pToken, string idEmployee, System.DateTime startDate, System.DateTime endDate, object userState) {
            if ((this.getRealHourBalanceByEmployeeBetweenDateOperationCompleted == null)) {
                this.getRealHourBalanceByEmployeeBetweenDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetRealHourBalanceByEmployeeBetweenDateOperationCompleted);
            }
            this.InvokeAsync("getRealHourBalanceByEmployeeBetweenDate", new object[] {
                        pToken,
                        idEmployee,
                        startDate,
                        endDate}, this.getRealHourBalanceByEmployeeBetweenDateOperationCompleted, userState);
        }
        
        private void OngetRealHourBalanceByEmployeeBetweenDateOperationCompleted(object arg) {
            if ((this.getRealHourBalanceByEmployeeBetweenDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getRealHourBalanceByEmployeeBetweenDateCompleted(this, new getRealHourBalanceByEmployeeBetweenDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getRealHourBalanceByEmployeeDate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable getRealHourBalanceByEmployeeDate(string pToken, string idEmployee, System.DateTime date) {
            object[] results = this.Invoke("getRealHourBalanceByEmployeeDate", new object[] {
                        pToken,
                        idEmployee,
                        date});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void getRealHourBalanceByEmployeeDateAsync(string pToken, string idEmployee, System.DateTime date) {
            this.getRealHourBalanceByEmployeeDateAsync(pToken, idEmployee, date, null);
        }
        
        /// <remarks/>
        public void getRealHourBalanceByEmployeeDateAsync(string pToken, string idEmployee, System.DateTime date, object userState) {
            if ((this.getRealHourBalanceByEmployeeDateOperationCompleted == null)) {
                this.getRealHourBalanceByEmployeeDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetRealHourBalanceByEmployeeDateOperationCompleted);
            }
            this.InvokeAsync("getRealHourBalanceByEmployeeDate", new object[] {
                        pToken,
                        idEmployee,
                        date}, this.getRealHourBalanceByEmployeeDateOperationCompleted, userState);
        }
        
        private void OngetRealHourBalanceByEmployeeDateOperationCompleted(object arg) {
            if ((this.getRealHourBalanceByEmployeeDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getRealHourBalanceByEmployeeDateCompleted(this, new getRealHourBalanceByEmployeeDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getRealHourBalanceByEmployeeDateType", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable getRealHourBalanceByEmployeeDateType(string pToken, string idEmployee, System.DateTime date, string idType) {
            object[] results = this.Invoke("getRealHourBalanceByEmployeeDateType", new object[] {
                        pToken,
                        idEmployee,
                        date,
                        idType});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void getRealHourBalanceByEmployeeDateTypeAsync(string pToken, string idEmployee, System.DateTime date, string idType) {
            this.getRealHourBalanceByEmployeeDateTypeAsync(pToken, idEmployee, date, idType, null);
        }
        
        /// <remarks/>
        public void getRealHourBalanceByEmployeeDateTypeAsync(string pToken, string idEmployee, System.DateTime date, string idType, object userState) {
            if ((this.getRealHourBalanceByEmployeeDateTypeOperationCompleted == null)) {
                this.getRealHourBalanceByEmployeeDateTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetRealHourBalanceByEmployeeDateTypeOperationCompleted);
            }
            this.InvokeAsync("getRealHourBalanceByEmployeeDateType", new object[] {
                        pToken,
                        idEmployee,
                        date,
                        idType}, this.getRealHourBalanceByEmployeeDateTypeOperationCompleted, userState);
        }
        
        private void OngetRealHourBalanceByEmployeeDateTypeOperationCompleted(object arg) {
            if ((this.getRealHourBalanceByEmployeeDateTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getRealHourBalanceByEmployeeDateTypeCompleted(this, new getRealHourBalanceByEmployeeDateTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/insertHourPackageRealTimeDB", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string insertHourPackageRealTimeDB(string pToken, string idEmployee, string idType, System.DateTime date, int nMinutes) {
            object[] results = this.Invoke("insertHourPackageRealTimeDB", new object[] {
                        pToken,
                        idEmployee,
                        idType,
                        date,
                        nMinutes});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void insertHourPackageRealTimeDBAsync(string pToken, string idEmployee, string idType, System.DateTime date, int nMinutes) {
            this.insertHourPackageRealTimeDBAsync(pToken, idEmployee, idType, date, nMinutes, null);
        }
        
        /// <remarks/>
        public void insertHourPackageRealTimeDBAsync(string pToken, string idEmployee, string idType, System.DateTime date, int nMinutes, object userState) {
            if ((this.insertHourPackageRealTimeDBOperationCompleted == null)) {
                this.insertHourPackageRealTimeDBOperationCompleted = new System.Threading.SendOrPostCallback(this.OninsertHourPackageRealTimeDBOperationCompleted);
            }
            this.InvokeAsync("insertHourPackageRealTimeDB", new object[] {
                        pToken,
                        idEmployee,
                        idType,
                        date,
                        nMinutes}, this.insertHourPackageRealTimeDBOperationCompleted, userState);
        }
        
        private void OninsertHourPackageRealTimeDBOperationCompleted(object arg) {
            if ((this.insertHourPackageRealTimeDBCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.insertHourPackageRealTimeDBCompleted(this, new insertHourPackageRealTimeDBCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/updateHourPackageRealDB", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int updateHourPackageRealDB(string pToken, string id, string idEmployee, string idType, System.DateTime date, int nMinutes) {
            object[] results = this.Invoke("updateHourPackageRealDB", new object[] {
                        pToken,
                        id,
                        idEmployee,
                        idType,
                        date,
                        nMinutes});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void updateHourPackageRealDBAsync(string pToken, string id, string idEmployee, string idType, System.DateTime date, int nMinutes) {
            this.updateHourPackageRealDBAsync(pToken, id, idEmployee, idType, date, nMinutes, null);
        }
        
        /// <remarks/>
        public void updateHourPackageRealDBAsync(string pToken, string id, string idEmployee, string idType, System.DateTime date, int nMinutes, object userState) {
            if ((this.updateHourPackageRealDBOperationCompleted == null)) {
                this.updateHourPackageRealDBOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateHourPackageRealDBOperationCompleted);
            }
            this.InvokeAsync("updateHourPackageRealDB", new object[] {
                        pToken,
                        id,
                        idEmployee,
                        idType,
                        date,
                        nMinutes}, this.updateHourPackageRealDBOperationCompleted, userState);
        }
        
        private void OnupdateHourPackageRealDBOperationCompleted(object arg) {
            if ((this.updateHourPackageRealDBCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateHourPackageRealDBCompleted(this, new updateHourPackageRealDBCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/deleteHourPackageRealDB", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int deleteHourPackageRealDB(string pToken, string id) {
            object[] results = this.Invoke("deleteHourPackageRealDB", new object[] {
                        pToken,
                        id});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void deleteHourPackageRealDBAsync(string pToken, string id) {
            this.deleteHourPackageRealDBAsync(pToken, id, null);
        }
        
        /// <remarks/>
        public void deleteHourPackageRealDBAsync(string pToken, string id, object userState) {
            if ((this.deleteHourPackageRealDBOperationCompleted == null)) {
                this.deleteHourPackageRealDBOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeleteHourPackageRealDBOperationCompleted);
            }
            this.InvokeAsync("deleteHourPackageRealDB", new object[] {
                        pToken,
                        id}, this.deleteHourPackageRealDBOperationCompleted, userState);
        }
        
        private void OndeleteHourPackageRealDBOperationCompleted(object arg) {
            if ((this.deleteHourPackageRealDBCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deleteHourPackageRealDBCompleted(this, new deleteHourPackageRealDBCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getRealHourBalanceByEmployeeTotalByTypeDT", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable getRealHourBalanceByEmployeeTotalByTypeDT(string pToken, string idEmployee, string type, System.DateTime date) {
            object[] results = this.Invoke("getRealHourBalanceByEmployeeTotalByTypeDT", new object[] {
                        pToken,
                        idEmployee,
                        type,
                        date});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void getRealHourBalanceByEmployeeTotalByTypeDTAsync(string pToken, string idEmployee, string type, System.DateTime date) {
            this.getRealHourBalanceByEmployeeTotalByTypeDTAsync(pToken, idEmployee, type, date, null);
        }
        
        /// <remarks/>
        public void getRealHourBalanceByEmployeeTotalByTypeDTAsync(string pToken, string idEmployee, string type, System.DateTime date, object userState) {
            if ((this.getRealHourBalanceByEmployeeTotalByTypeDTOperationCompleted == null)) {
                this.getRealHourBalanceByEmployeeTotalByTypeDTOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetRealHourBalanceByEmployeeTotalByTypeDTOperationCompleted);
            }
            this.InvokeAsync("getRealHourBalanceByEmployeeTotalByTypeDT", new object[] {
                        pToken,
                        idEmployee,
                        type,
                        date}, this.getRealHourBalanceByEmployeeTotalByTypeDTOperationCompleted, userState);
        }
        
        private void OngetRealHourBalanceByEmployeeTotalByTypeDTOperationCompleted(object arg) {
            if ((this.getRealHourBalanceByEmployeeTotalByTypeDTCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getRealHourBalanceByEmployeeTotalByTypeDTCompleted(this, new getRealHourBalanceByEmployeeTotalByTypeDTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getRealHourBalanceByEmployeeTotalByType", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int getRealHourBalanceByEmployeeTotalByType(string pToken, string idEmployee, int type) {
            object[] results = this.Invoke("getRealHourBalanceByEmployeeTotalByType", new object[] {
                        pToken,
                        idEmployee,
                        type});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void getRealHourBalanceByEmployeeTotalByTypeAsync(string pToken, string idEmployee, int type) {
            this.getRealHourBalanceByEmployeeTotalByTypeAsync(pToken, idEmployee, type, null);
        }
        
        /// <remarks/>
        public void getRealHourBalanceByEmployeeTotalByTypeAsync(string pToken, string idEmployee, int type, object userState) {
            if ((this.getRealHourBalanceByEmployeeTotalByTypeOperationCompleted == null)) {
                this.getRealHourBalanceByEmployeeTotalByTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetRealHourBalanceByEmployeeTotalByTypeOperationCompleted);
            }
            this.InvokeAsync("getRealHourBalanceByEmployeeTotalByType", new object[] {
                        pToken,
                        idEmployee,
                        type}, this.getRealHourBalanceByEmployeeTotalByTypeOperationCompleted, userState);
        }
        
        private void OngetRealHourBalanceByEmployeeTotalByTypeOperationCompleted(object arg) {
            if ((this.getRealHourBalanceByEmployeeTotalByTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getRealHourBalanceByEmployeeTotalByTypeCompleted(this, new getRealHourBalanceByEmployeeTotalByTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getRealHourBalanceByEmployeeTotal", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable getRealHourBalanceByEmployeeTotal(string pToken, string idEmployee) {
            object[] results = this.Invoke("getRealHourBalanceByEmployeeTotal", new object[] {
                        pToken,
                        idEmployee});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void getRealHourBalanceByEmployeeTotalAsync(string pToken, string idEmployee) {
            this.getRealHourBalanceByEmployeeTotalAsync(pToken, idEmployee, null);
        }
        
        /// <remarks/>
        public void getRealHourBalanceByEmployeeTotalAsync(string pToken, string idEmployee, object userState) {
            if ((this.getRealHourBalanceByEmployeeTotalOperationCompleted == null)) {
                this.getRealHourBalanceByEmployeeTotalOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetRealHourBalanceByEmployeeTotalOperationCompleted);
            }
            this.InvokeAsync("getRealHourBalanceByEmployeeTotal", new object[] {
                        pToken,
                        idEmployee}, this.getRealHourBalanceByEmployeeTotalOperationCompleted, userState);
        }
        
        private void OngetRealHourBalanceByEmployeeTotalOperationCompleted(object arg) {
            if ((this.getRealHourBalanceByEmployeeTotalCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getRealHourBalanceByEmployeeTotalCompleted(this, new getRealHourBalanceByEmployeeTotalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/insertHourPackageRealTimeResumeDB", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string insertHourPackageRealTimeResumeDB(string pToken, string idEmployee, string idType, int nMinutes, System.DateTime date) {
            object[] results = this.Invoke("insertHourPackageRealTimeResumeDB", new object[] {
                        pToken,
                        idEmployee,
                        idType,
                        nMinutes,
                        date});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void insertHourPackageRealTimeResumeDBAsync(string pToken, string idEmployee, string idType, int nMinutes, System.DateTime date) {
            this.insertHourPackageRealTimeResumeDBAsync(pToken, idEmployee, idType, nMinutes, date, null);
        }
        
        /// <remarks/>
        public void insertHourPackageRealTimeResumeDBAsync(string pToken, string idEmployee, string idType, int nMinutes, System.DateTime date, object userState) {
            if ((this.insertHourPackageRealTimeResumeDBOperationCompleted == null)) {
                this.insertHourPackageRealTimeResumeDBOperationCompleted = new System.Threading.SendOrPostCallback(this.OninsertHourPackageRealTimeResumeDBOperationCompleted);
            }
            this.InvokeAsync("insertHourPackageRealTimeResumeDB", new object[] {
                        pToken,
                        idEmployee,
                        idType,
                        nMinutes,
                        date}, this.insertHourPackageRealTimeResumeDBOperationCompleted, userState);
        }
        
        private void OninsertHourPackageRealTimeResumeDBOperationCompleted(object arg) {
            if ((this.insertHourPackageRealTimeResumeDBCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.insertHourPackageRealTimeResumeDBCompleted(this, new insertHourPackageRealTimeResumeDBCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/updateHourPackageRealResumeDB", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string updateHourPackageRealResumeDB(string pToken, string id, string idEmployee, string idType, int nMinutes) {
            object[] results = this.Invoke("updateHourPackageRealResumeDB", new object[] {
                        pToken,
                        id,
                        idEmployee,
                        idType,
                        nMinutes});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void updateHourPackageRealResumeDBAsync(string pToken, string id, string idEmployee, string idType, int nMinutes) {
            this.updateHourPackageRealResumeDBAsync(pToken, id, idEmployee, idType, nMinutes, null);
        }
        
        /// <remarks/>
        public void updateHourPackageRealResumeDBAsync(string pToken, string id, string idEmployee, string idType, int nMinutes, object userState) {
            if ((this.updateHourPackageRealResumeDBOperationCompleted == null)) {
                this.updateHourPackageRealResumeDBOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateHourPackageRealResumeDBOperationCompleted);
            }
            this.InvokeAsync("updateHourPackageRealResumeDB", new object[] {
                        pToken,
                        id,
                        idEmployee,
                        idType,
                        nMinutes}, this.updateHourPackageRealResumeDBOperationCompleted, userState);
        }
        
        private void OnupdateHourPackageRealResumeDBOperationCompleted(object arg) {
            if ((this.updateHourPackageRealResumeDBCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateHourPackageRealResumeDBCompleted(this, new updateHourPackageRealResumeDBCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/updateHourPackageRealResumeOfEmpAndTypeDB", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string updateHourPackageRealResumeOfEmpAndTypeDB(string pToken, string idEmployee, string idType, int nMinutes, System.DateTime date) {
            object[] results = this.Invoke("updateHourPackageRealResumeOfEmpAndTypeDB", new object[] {
                        pToken,
                        idEmployee,
                        idType,
                        nMinutes,
                        date});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void updateHourPackageRealResumeOfEmpAndTypeDBAsync(string pToken, string idEmployee, string idType, int nMinutes, System.DateTime date) {
            this.updateHourPackageRealResumeOfEmpAndTypeDBAsync(pToken, idEmployee, idType, nMinutes, date, null);
        }
        
        /// <remarks/>
        public void updateHourPackageRealResumeOfEmpAndTypeDBAsync(string pToken, string idEmployee, string idType, int nMinutes, System.DateTime date, object userState) {
            if ((this.updateHourPackageRealResumeOfEmpAndTypeDBOperationCompleted == null)) {
                this.updateHourPackageRealResumeOfEmpAndTypeDBOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateHourPackageRealResumeOfEmpAndTypeDBOperationCompleted);
            }
            this.InvokeAsync("updateHourPackageRealResumeOfEmpAndTypeDB", new object[] {
                        pToken,
                        idEmployee,
                        idType,
                        nMinutes,
                        date}, this.updateHourPackageRealResumeOfEmpAndTypeDBOperationCompleted, userState);
        }
        
        private void OnupdateHourPackageRealResumeOfEmpAndTypeDBOperationCompleted(object arg) {
            if ((this.updateHourPackageRealResumeOfEmpAndTypeDBCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateHourPackageRealResumeOfEmpAndTypeDBCompleted(this, new updateHourPackageRealResumeOfEmpAndTypeDBCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/deleteHourPackageRealResumeDB", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int deleteHourPackageRealResumeDB(string pToken, string id) {
            object[] results = this.Invoke("deleteHourPackageRealResumeDB", new object[] {
                        pToken,
                        id});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void deleteHourPackageRealResumeDBAsync(string pToken, string id) {
            this.deleteHourPackageRealResumeDBAsync(pToken, id, null);
        }
        
        /// <remarks/>
        public void deleteHourPackageRealResumeDBAsync(string pToken, string id, object userState) {
            if ((this.deleteHourPackageRealResumeDBOperationCompleted == null)) {
                this.deleteHourPackageRealResumeDBOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeleteHourPackageRealResumeDBOperationCompleted);
            }
            this.InvokeAsync("deleteHourPackageRealResumeDB", new object[] {
                        pToken,
                        id}, this.deleteHourPackageRealResumeDBOperationCompleted, userState);
        }
        
        private void OndeleteHourPackageRealResumeDBOperationCompleted(object arg) {
            if ((this.deleteHourPackageRealResumeDBCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deleteHourPackageRealResumeDBCompleted(this, new deleteHourPackageRealResumeDBCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/hasConstruction", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string hasConstruction(string pToken, string idCostCenter) {
            object[] results = this.Invoke("hasConstruction", new object[] {
                        pToken,
                        idCostCenter});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void hasConstructionAsync(string pToken, string idCostCenter) {
            this.hasConstructionAsync(pToken, idCostCenter, null);
        }
        
        /// <remarks/>
        public void hasConstructionAsync(string pToken, string idCostCenter, object userState) {
            if ((this.hasConstructionOperationCompleted == null)) {
                this.hasConstructionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnhasConstructionOperationCompleted);
            }
            this.InvokeAsync("hasConstruction", new object[] {
                        pToken,
                        idCostCenter}, this.hasConstructionOperationCompleted, userState);
        }
        
        private void OnhasConstructionOperationCompleted(object arg) {
            if ((this.hasConstructionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.hasConstructionCompleted(this, new hasConstructionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/newOrUpdateConstruction", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string newOrUpdateConstruction(string pToken, bool insert, int number, string name, string place, System.DateTime beginDate, System.DateTime endDate, bool active, string idCostCenter, string idDepartment) {
            object[] results = this.Invoke("newOrUpdateConstruction", new object[] {
                        pToken,
                        insert,
                        number,
                        name,
                        place,
                        beginDate,
                        endDate,
                        active,
                        idCostCenter,
                        idDepartment});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void newOrUpdateConstructionAsync(string pToken, bool insert, int number, string name, string place, System.DateTime beginDate, System.DateTime endDate, bool active, string idCostCenter, string idDepartment) {
            this.newOrUpdateConstructionAsync(pToken, insert, number, name, place, beginDate, endDate, active, idCostCenter, idDepartment, null);
        }
        
        /// <remarks/>
        public void newOrUpdateConstructionAsync(string pToken, bool insert, int number, string name, string place, System.DateTime beginDate, System.DateTime endDate, bool active, string idCostCenter, string idDepartment, object userState) {
            if ((this.newOrUpdateConstructionOperationCompleted == null)) {
                this.newOrUpdateConstructionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnnewOrUpdateConstructionOperationCompleted);
            }
            this.InvokeAsync("newOrUpdateConstruction", new object[] {
                        pToken,
                        insert,
                        number,
                        name,
                        place,
                        beginDate,
                        endDate,
                        active,
                        idCostCenter,
                        idDepartment}, this.newOrUpdateConstructionOperationCompleted, userState);
        }
        
        private void OnnewOrUpdateConstructionOperationCompleted(object arg) {
            if ((this.newOrUpdateConstructionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.newOrUpdateConstructionCompleted(this, new newOrUpdateConstructionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getCentroCustoName", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getCentroCustoName(string pToken, string idCostCenter) {
            object[] results = this.Invoke("getCentroCustoName", new object[] {
                        pToken,
                        idCostCenter});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getCentroCustoNameAsync(string pToken, string idCostCenter) {
            this.getCentroCustoNameAsync(pToken, idCostCenter, null);
        }
        
        /// <remarks/>
        public void getCentroCustoNameAsync(string pToken, string idCostCenter, object userState) {
            if ((this.getCentroCustoNameOperationCompleted == null)) {
                this.getCentroCustoNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetCentroCustoNameOperationCompleted);
            }
            this.InvokeAsync("getCentroCustoName", new object[] {
                        pToken,
                        idCostCenter}, this.getCentroCustoNameOperationCompleted, userState);
        }
        
        private void OngetCentroCustoNameOperationCompleted(object arg) {
            if ((this.getCentroCustoNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getCentroCustoNameCompleted(this, new getCentroCustoNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/delCentrosCusto", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int delCentrosCusto(string pToken, string idCostCenter) {
            object[] results = this.Invoke("delCentrosCusto", new object[] {
                        pToken,
                        idCostCenter});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void delCentrosCustoAsync(string pToken, string idCostCenter) {
            this.delCentrosCustoAsync(pToken, idCostCenter, null);
        }
        
        /// <remarks/>
        public void delCentrosCustoAsync(string pToken, string idCostCenter, object userState) {
            if ((this.delCentrosCustoOperationCompleted == null)) {
                this.delCentrosCustoOperationCompleted = new System.Threading.SendOrPostCallback(this.OndelCentrosCustoOperationCompleted);
            }
            this.InvokeAsync("delCentrosCusto", new object[] {
                        pToken,
                        idCostCenter}, this.delCentrosCustoOperationCompleted, userState);
        }
        
        private void OndelCentrosCustoOperationCompleted(object arg) {
            if ((this.delCentrosCustoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.delCentrosCustoCompleted(this, new delCentrosCustoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/changeCentrosCusto", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int changeCentrosCusto(string pToken, string idCostCenter, string idFather, string name, string description, string code) {
            object[] results = this.Invoke("changeCentrosCusto", new object[] {
                        pToken,
                        idCostCenter,
                        idFather,
                        name,
                        description,
                        code});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void changeCentrosCustoAsync(string pToken, string idCostCenter, string idFather, string name, string description, string code) {
            this.changeCentrosCustoAsync(pToken, idCostCenter, idFather, name, description, code, null);
        }
        
        /// <remarks/>
        public void changeCentrosCustoAsync(string pToken, string idCostCenter, string idFather, string name, string description, string code, object userState) {
            if ((this.changeCentrosCustoOperationCompleted == null)) {
                this.changeCentrosCustoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnchangeCentrosCustoOperationCompleted);
            }
            this.InvokeAsync("changeCentrosCusto", new object[] {
                        pToken,
                        idCostCenter,
                        idFather,
                        name,
                        description,
                        code}, this.changeCentrosCustoOperationCompleted, userState);
        }
        
        private void OnchangeCentrosCustoOperationCompleted(object arg) {
            if ((this.changeCentrosCustoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.changeCentrosCustoCompleted(this, new changeCentrosCustoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/addCentrosCusto", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string addCentrosCusto(string pToken, string idFather, string name, string description, string id, string code) {
            object[] results = this.Invoke("addCentrosCusto", new object[] {
                        pToken,
                        idFather,
                        name,
                        description,
                        id,
                        code});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void addCentrosCustoAsync(string pToken, string idFather, string name, string description, string id, string code) {
            this.addCentrosCustoAsync(pToken, idFather, name, description, id, code, null);
        }
        
        /// <remarks/>
        public void addCentrosCustoAsync(string pToken, string idFather, string name, string description, string id, string code, object userState) {
            if ((this.addCentrosCustoOperationCompleted == null)) {
                this.addCentrosCustoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddCentrosCustoOperationCompleted);
            }
            this.InvokeAsync("addCentrosCusto", new object[] {
                        pToken,
                        idFather,
                        name,
                        description,
                        id,
                        code}, this.addCentrosCustoOperationCompleted, userState);
        }
        
        private void OnaddCentrosCustoOperationCompleted(object arg) {
            if ((this.addCentrosCustoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addCentrosCustoCompleted(this, new addCentrosCustoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getAllCentrosCusto", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable getAllCentrosCusto(string pToken) {
            object[] results = this.Invoke("getAllCentrosCusto", new object[] {
                        pToken});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void getAllCentrosCustoAsync(string pToken) {
            this.getAllCentrosCustoAsync(pToken, null);
        }
        
        /// <remarks/>
        public void getAllCentrosCustoAsync(string pToken, object userState) {
            if ((this.getAllCentrosCustoOperationCompleted == null)) {
                this.getAllCentrosCustoOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllCentrosCustoOperationCompleted);
            }
            this.InvokeAsync("getAllCentrosCusto", new object[] {
                        pToken}, this.getAllCentrosCustoOperationCompleted, userState);
        }
        
        private void OngetAllCentrosCustoOperationCompleted(object arg) {
            if ((this.getAllCentrosCustoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllCentrosCustoCompleted(this, new getAllCentrosCustoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/addConstructionsEmployees", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int addConstructionsEmployees(string pToken, string idConstruction, string idEmployees) {
            object[] results = this.Invoke("addConstructionsEmployees", new object[] {
                        pToken,
                        idConstruction,
                        idEmployees});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void addConstructionsEmployeesAsync(string pToken, string idConstruction, string idEmployees) {
            this.addConstructionsEmployeesAsync(pToken, idConstruction, idEmployees, null);
        }
        
        /// <remarks/>
        public void addConstructionsEmployeesAsync(string pToken, string idConstruction, string idEmployees, object userState) {
            if ((this.addConstructionsEmployeesOperationCompleted == null)) {
                this.addConstructionsEmployeesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddConstructionsEmployeesOperationCompleted);
            }
            this.InvokeAsync("addConstructionsEmployees", new object[] {
                        pToken,
                        idConstruction,
                        idEmployees}, this.addConstructionsEmployeesOperationCompleted, userState);
        }
        
        private void OnaddConstructionsEmployeesOperationCompleted(object arg) {
            if ((this.addConstructionsEmployeesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addConstructionsEmployeesCompleted(this, new addConstructionsEmployeesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/delConstructionsEmployees", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int delConstructionsEmployees(string pToken, string idConstruction) {
            object[] results = this.Invoke("delConstructionsEmployees", new object[] {
                        pToken,
                        idConstruction});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void delConstructionsEmployeesAsync(string pToken, string idConstruction) {
            this.delConstructionsEmployeesAsync(pToken, idConstruction, null);
        }
        
        /// <remarks/>
        public void delConstructionsEmployeesAsync(string pToken, string idConstruction, object userState) {
            if ((this.delConstructionsEmployeesOperationCompleted == null)) {
                this.delConstructionsEmployeesOperationCompleted = new System.Threading.SendOrPostCallback(this.OndelConstructionsEmployeesOperationCompleted);
            }
            this.InvokeAsync("delConstructionsEmployees", new object[] {
                        pToken,
                        idConstruction}, this.delConstructionsEmployeesOperationCompleted, userState);
        }
        
        private void OndelConstructionsEmployeesOperationCompleted(object arg) {
            if ((this.delConstructionsEmployeesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.delConstructionsEmployeesCompleted(this, new delConstructionsEmployeesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getConstructionsEmployeesByIdConstructions", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable getConstructionsEmployeesByIdConstructions(string pToken, string idConstruction) {
            object[] results = this.Invoke("getConstructionsEmployeesByIdConstructions", new object[] {
                        pToken,
                        idConstruction});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void getConstructionsEmployeesByIdConstructionsAsync(string pToken, string idConstruction) {
            this.getConstructionsEmployeesByIdConstructionsAsync(pToken, idConstruction, null);
        }
        
        /// <remarks/>
        public void getConstructionsEmployeesByIdConstructionsAsync(string pToken, string idConstruction, object userState) {
            if ((this.getConstructionsEmployeesByIdConstructionsOperationCompleted == null)) {
                this.getConstructionsEmployeesByIdConstructionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetConstructionsEmployeesByIdConstructionsOperationCompleted);
            }
            this.InvokeAsync("getConstructionsEmployeesByIdConstructions", new object[] {
                        pToken,
                        idConstruction}, this.getConstructionsEmployeesByIdConstructionsOperationCompleted, userState);
        }
        
        private void OngetConstructionsEmployeesByIdConstructionsOperationCompleted(object arg) {
            if ((this.getConstructionsEmployeesByIdConstructionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getConstructionsEmployeesByIdConstructionsCompleted(this, new getConstructionsEmployeesByIdConstructionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getDevicesByName", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getDevicesByName(string pToken, string name) {
            object[] results = this.Invoke("getDevicesByName", new object[] {
                        pToken,
                        name});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getDevicesByNameAsync(string pToken, string name) {
            this.getDevicesByNameAsync(pToken, name, null);
        }
        
        /// <remarks/>
        public void getDevicesByNameAsync(string pToken, string name, object userState) {
            if ((this.getDevicesByNameOperationCompleted == null)) {
                this.getDevicesByNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDevicesByNameOperationCompleted);
            }
            this.InvokeAsync("getDevicesByName", new object[] {
                        pToken,
                        name}, this.getDevicesByNameOperationCompleted, userState);
        }
        
        private void OngetDevicesByNameOperationCompleted(object arg) {
            if ((this.getDevicesByNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDevicesByNameCompleted(this, new getDevicesByNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/delConstructionsDevices", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int delConstructionsDevices(string pToken, string idConstruction) {
            object[] results = this.Invoke("delConstructionsDevices", new object[] {
                        pToken,
                        idConstruction});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void delConstructionsDevicesAsync(string pToken, string idConstruction) {
            this.delConstructionsDevicesAsync(pToken, idConstruction, null);
        }
        
        /// <remarks/>
        public void delConstructionsDevicesAsync(string pToken, string idConstruction, object userState) {
            if ((this.delConstructionsDevicesOperationCompleted == null)) {
                this.delConstructionsDevicesOperationCompleted = new System.Threading.SendOrPostCallback(this.OndelConstructionsDevicesOperationCompleted);
            }
            this.InvokeAsync("delConstructionsDevices", new object[] {
                        pToken,
                        idConstruction}, this.delConstructionsDevicesOperationCompleted, userState);
        }
        
        private void OndelConstructionsDevicesOperationCompleted(object arg) {
            if ((this.delConstructionsDevicesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.delConstructionsDevicesCompleted(this, new delConstructionsDevicesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/addConstructionsDevices", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int addConstructionsDevices(string pToken, string idConstruction, string idDevices, System.DateTime beginDate, System.DateTime endDate) {
            object[] results = this.Invoke("addConstructionsDevices", new object[] {
                        pToken,
                        idConstruction,
                        idDevices,
                        beginDate,
                        endDate});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void addConstructionsDevicesAsync(string pToken, string idConstruction, string idDevices, System.DateTime beginDate, System.DateTime endDate) {
            this.addConstructionsDevicesAsync(pToken, idConstruction, idDevices, beginDate, endDate, null);
        }
        
        /// <remarks/>
        public void addConstructionsDevicesAsync(string pToken, string idConstruction, string idDevices, System.DateTime beginDate, System.DateTime endDate, object userState) {
            if ((this.addConstructionsDevicesOperationCompleted == null)) {
                this.addConstructionsDevicesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddConstructionsDevicesOperationCompleted);
            }
            this.InvokeAsync("addConstructionsDevices", new object[] {
                        pToken,
                        idConstruction,
                        idDevices,
                        beginDate,
                        endDate}, this.addConstructionsDevicesOperationCompleted, userState);
        }
        
        private void OnaddConstructionsDevicesOperationCompleted(object arg) {
            if ((this.addConstructionsDevicesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addConstructionsDevicesCompleted(this, new addConstructionsDevicesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getConstructionDevicesByIdConstructionsAndIdDevices", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable getConstructionDevicesByIdConstructionsAndIdDevices(string pToken, string idConstructions, string idDevices) {
            object[] results = this.Invoke("getConstructionDevicesByIdConstructionsAndIdDevices", new object[] {
                        pToken,
                        idConstructions,
                        idDevices});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void getConstructionDevicesByIdConstructionsAndIdDevicesAsync(string pToken, string idConstructions, string idDevices) {
            this.getConstructionDevicesByIdConstructionsAndIdDevicesAsync(pToken, idConstructions, idDevices, null);
        }
        
        /// <remarks/>
        public void getConstructionDevicesByIdConstructionsAndIdDevicesAsync(string pToken, string idConstructions, string idDevices, object userState) {
            if ((this.getConstructionDevicesByIdConstructionsAndIdDevicesOperationCompleted == null)) {
                this.getConstructionDevicesByIdConstructionsAndIdDevicesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetConstructionDevicesByIdConstructionsAndIdDevicesOperationCompleted);
            }
            this.InvokeAsync("getConstructionDevicesByIdConstructionsAndIdDevices", new object[] {
                        pToken,
                        idConstructions,
                        idDevices}, this.getConstructionDevicesByIdConstructionsAndIdDevicesOperationCompleted, userState);
        }
        
        private void OngetConstructionDevicesByIdConstructionsAndIdDevicesOperationCompleted(object arg) {
            if ((this.getConstructionDevicesByIdConstructionsAndIdDevicesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getConstructionDevicesByIdConstructionsAndIdDevicesCompleted(this, new getConstructionDevicesByIdConstructionsAndIdDevicesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getConstructionDevicesByDate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable getConstructionDevicesByDate(string pToken, System.DateTime bDate, System.DateTime eDate, System.DateTime beginDate, System.DateTime endDate, string idDevices) {
            object[] results = this.Invoke("getConstructionDevicesByDate", new object[] {
                        pToken,
                        bDate,
                        eDate,
                        beginDate,
                        endDate,
                        idDevices});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void getConstructionDevicesByDateAsync(string pToken, System.DateTime bDate, System.DateTime eDate, System.DateTime beginDate, System.DateTime endDate, string idDevices) {
            this.getConstructionDevicesByDateAsync(pToken, bDate, eDate, beginDate, endDate, idDevices, null);
        }
        
        /// <remarks/>
        public void getConstructionDevicesByDateAsync(string pToken, System.DateTime bDate, System.DateTime eDate, System.DateTime beginDate, System.DateTime endDate, string idDevices, object userState) {
            if ((this.getConstructionDevicesByDateOperationCompleted == null)) {
                this.getConstructionDevicesByDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetConstructionDevicesByDateOperationCompleted);
            }
            this.InvokeAsync("getConstructionDevicesByDate", new object[] {
                        pToken,
                        bDate,
                        eDate,
                        beginDate,
                        endDate,
                        idDevices}, this.getConstructionDevicesByDateOperationCompleted, userState);
        }
        
        private void OngetConstructionDevicesByDateOperationCompleted(object arg) {
            if ((this.getConstructionDevicesByDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getConstructionDevicesByDateCompleted(this, new getConstructionDevicesByDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getConstructionDevicesByIdDevices", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable getConstructionDevicesByIdDevices(string pToken, string idDevices) {
            object[] results = this.Invoke("getConstructionDevicesByIdDevices", new object[] {
                        pToken,
                        idDevices});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void getConstructionDevicesByIdDevicesAsync(string pToken, string idDevices) {
            this.getConstructionDevicesByIdDevicesAsync(pToken, idDevices, null);
        }
        
        /// <remarks/>
        public void getConstructionDevicesByIdDevicesAsync(string pToken, string idDevices, object userState) {
            if ((this.getConstructionDevicesByIdDevicesOperationCompleted == null)) {
                this.getConstructionDevicesByIdDevicesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetConstructionDevicesByIdDevicesOperationCompleted);
            }
            this.InvokeAsync("getConstructionDevicesByIdDevices", new object[] {
                        pToken,
                        idDevices}, this.getConstructionDevicesByIdDevicesOperationCompleted, userState);
        }
        
        private void OngetConstructionDevicesByIdDevicesOperationCompleted(object arg) {
            if ((this.getConstructionDevicesByIdDevicesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getConstructionDevicesByIdDevicesCompleted(this, new getConstructionDevicesByIdDevicesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getConstructionDevicesByIdConstruction", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable getConstructionDevicesByIdConstruction(string pToken, string idConstructions) {
            object[] results = this.Invoke("getConstructionDevicesByIdConstruction", new object[] {
                        pToken,
                        idConstructions});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void getConstructionDevicesByIdConstructionAsync(string pToken, string idConstructions) {
            this.getConstructionDevicesByIdConstructionAsync(pToken, idConstructions, null);
        }
        
        /// <remarks/>
        public void getConstructionDevicesByIdConstructionAsync(string pToken, string idConstructions, object userState) {
            if ((this.getConstructionDevicesByIdConstructionOperationCompleted == null)) {
                this.getConstructionDevicesByIdConstructionOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetConstructionDevicesByIdConstructionOperationCompleted);
            }
            this.InvokeAsync("getConstructionDevicesByIdConstruction", new object[] {
                        pToken,
                        idConstructions}, this.getConstructionDevicesByIdConstructionOperationCompleted, userState);
        }
        
        private void OngetConstructionDevicesByIdConstructionOperationCompleted(object arg) {
            if ((this.getConstructionDevicesByIdConstructionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getConstructionDevicesByIdConstructionCompleted(this, new getConstructionDevicesByIdConstructionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getEmployeesInMobileDevice", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable getEmployeesInMobileDevice(string pToken, string idDevices) {
            object[] results = this.Invoke("getEmployeesInMobileDevice", new object[] {
                        pToken,
                        idDevices});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void getEmployeesInMobileDeviceAsync(string pToken, string idDevices) {
            this.getEmployeesInMobileDeviceAsync(pToken, idDevices, null);
        }
        
        /// <remarks/>
        public void getEmployeesInMobileDeviceAsync(string pToken, string idDevices, object userState) {
            if ((this.getEmployeesInMobileDeviceOperationCompleted == null)) {
                this.getEmployeesInMobileDeviceOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetEmployeesInMobileDeviceOperationCompleted);
            }
            this.InvokeAsync("getEmployeesInMobileDevice", new object[] {
                        pToken,
                        idDevices}, this.getEmployeesInMobileDeviceOperationCompleted, userState);
        }
        
        private void OngetEmployeesInMobileDeviceOperationCompleted(object arg) {
            if ((this.getEmployeesInMobileDeviceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getEmployeesInMobileDeviceCompleted(this, new getEmployeesInMobileDeviceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getAllEmployeesDetailsToMobile", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable getAllEmployeesDetailsToMobile(string pToken, System.Data.DataTable idEmployees) {
            object[] results = this.Invoke("getAllEmployeesDetailsToMobile", new object[] {
                        pToken,
                        idEmployees});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void getAllEmployeesDetailsToMobileAsync(string pToken, System.Data.DataTable idEmployees) {
            this.getAllEmployeesDetailsToMobileAsync(pToken, idEmployees, null);
        }
        
        /// <remarks/>
        public void getAllEmployeesDetailsToMobileAsync(string pToken, System.Data.DataTable idEmployees, object userState) {
            if ((this.getAllEmployeesDetailsToMobileOperationCompleted == null)) {
                this.getAllEmployeesDetailsToMobileOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllEmployeesDetailsToMobileOperationCompleted);
            }
            this.InvokeAsync("getAllEmployeesDetailsToMobile", new object[] {
                        pToken,
                        idEmployees}, this.getAllEmployeesDetailsToMobileOperationCompleted, userState);
        }
        
        private void OngetAllEmployeesDetailsToMobileOperationCompleted(object arg) {
            if ((this.getAllEmployeesDetailsToMobileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllEmployeesDetailsToMobileCompleted(this, new getAllEmployeesDetailsToMobileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/addEmployeesInMobile", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int addEmployeesInMobile(string pToken, string idDevices, string idEmployees) {
            object[] results = this.Invoke("addEmployeesInMobile", new object[] {
                        pToken,
                        idDevices,
                        idEmployees});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void addEmployeesInMobileAsync(string pToken, string idDevices, string idEmployees) {
            this.addEmployeesInMobileAsync(pToken, idDevices, idEmployees, null);
        }
        
        /// <remarks/>
        public void addEmployeesInMobileAsync(string pToken, string idDevices, string idEmployees, object userState) {
            if ((this.addEmployeesInMobileOperationCompleted == null)) {
                this.addEmployeesInMobileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddEmployeesInMobileOperationCompleted);
            }
            this.InvokeAsync("addEmployeesInMobile", new object[] {
                        pToken,
                        idDevices,
                        idEmployees}, this.addEmployeesInMobileOperationCompleted, userState);
        }
        
        private void OnaddEmployeesInMobileOperationCompleted(object arg) {
            if ((this.addEmployeesInMobileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addEmployeesInMobileCompleted(this, new addEmployeesInMobileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/delEmployeesInMobile", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int delEmployeesInMobile(string pToken, string idEmployees) {
            object[] results = this.Invoke("delEmployeesInMobile", new object[] {
                        pToken,
                        idEmployees});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void delEmployeesInMobileAsync(string pToken, string idEmployees) {
            this.delEmployeesInMobileAsync(pToken, idEmployees, null);
        }
        
        /// <remarks/>
        public void delEmployeesInMobileAsync(string pToken, string idEmployees, object userState) {
            if ((this.delEmployeesInMobileOperationCompleted == null)) {
                this.delEmployeesInMobileOperationCompleted = new System.Threading.SendOrPostCallback(this.OndelEmployeesInMobileOperationCompleted);
            }
            this.InvokeAsync("delEmployeesInMobile", new object[] {
                        pToken,
                        idEmployees}, this.delEmployeesInMobileOperationCompleted, userState);
        }
        
        private void OndelEmployeesInMobileOperationCompleted(object arg) {
            if ((this.delEmployeesInMobileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.delEmployeesInMobileCompleted(this, new delEmployeesInMobileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getMovimentsFromMobile", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable getMovimentsFromMobile(string pToken) {
            object[] results = this.Invoke("getMovimentsFromMobile", new object[] {
                        pToken});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void getMovimentsFromMobileAsync(string pToken) {
            this.getMovimentsFromMobileAsync(pToken, null);
        }
        
        /// <remarks/>
        public void getMovimentsFromMobileAsync(string pToken, object userState) {
            if ((this.getMovimentsFromMobileOperationCompleted == null)) {
                this.getMovimentsFromMobileOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetMovimentsFromMobileOperationCompleted);
            }
            this.InvokeAsync("getMovimentsFromMobile", new object[] {
                        pToken}, this.getMovimentsFromMobileOperationCompleted, userState);
        }
        
        private void OngetMovimentsFromMobileOperationCompleted(object arg) {
            if ((this.getMovimentsFromMobileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getMovimentsFromMobileCompleted(this, new getMovimentsFromMobileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getVacationsType", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable getVacationsType(string pToken, string idVacations) {
            object[] results = this.Invoke("getVacationsType", new object[] {
                        pToken,
                        idVacations});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void getVacationsTypeAsync(string pToken, string idVacations) {
            this.getVacationsTypeAsync(pToken, idVacations, null);
        }
        
        /// <remarks/>
        public void getVacationsTypeAsync(string pToken, string idVacations, object userState) {
            if ((this.getVacationsTypeOperationCompleted == null)) {
                this.getVacationsTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetVacationsTypeOperationCompleted);
            }
            this.InvokeAsync("getVacationsType", new object[] {
                        pToken,
                        idVacations}, this.getVacationsTypeOperationCompleted, userState);
        }
        
        private void OngetVacationsTypeOperationCompleted(object arg) {
            if ((this.getVacationsTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getVacationsTypeCompleted(this, new getVacationsTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getVersionFingerPrint", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable getVersionFingerPrint(string pToken, string idDevices) {
            object[] results = this.Invoke("getVersionFingerPrint", new object[] {
                        pToken,
                        idDevices});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void getVersionFingerPrintAsync(string pToken, string idDevices) {
            this.getVersionFingerPrintAsync(pToken, idDevices, null);
        }
        
        /// <remarks/>
        public void getVersionFingerPrintAsync(string pToken, string idDevices, object userState) {
            if ((this.getVersionFingerPrintOperationCompleted == null)) {
                this.getVersionFingerPrintOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetVersionFingerPrintOperationCompleted);
            }
            this.InvokeAsync("getVersionFingerPrint", new object[] {
                        pToken,
                        idDevices}, this.getVersionFingerPrintOperationCompleted, userState);
        }
        
        private void OngetVersionFingerPrintOperationCompleted(object arg) {
            if ((this.getVersionFingerPrintCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getVersionFingerPrintCompleted(this, new getVersionFingerPrintCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/addEmployeesInGPRS", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int addEmployeesInGPRS(string pToken, string idEmployees, string idDevices) {
            object[] results = this.Invoke("addEmployeesInGPRS", new object[] {
                        pToken,
                        idEmployees,
                        idDevices});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void addEmployeesInGPRSAsync(string pToken, string idEmployees, string idDevices) {
            this.addEmployeesInGPRSAsync(pToken, idEmployees, idDevices, null);
        }
        
        /// <remarks/>
        public void addEmployeesInGPRSAsync(string pToken, string idEmployees, string idDevices, object userState) {
            if ((this.addEmployeesInGPRSOperationCompleted == null)) {
                this.addEmployeesInGPRSOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddEmployeesInGPRSOperationCompleted);
            }
            this.InvokeAsync("addEmployeesInGPRS", new object[] {
                        pToken,
                        idEmployees,
                        idDevices}, this.addEmployeesInGPRSOperationCompleted, userState);
        }
        
        private void OnaddEmployeesInGPRSOperationCompleted(object arg) {
            if ((this.addEmployeesInGPRSCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addEmployeesInGPRSCompleted(this, new addEmployeesInGPRSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/delEmployeesInGPRS", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int delEmployeesInGPRS(string pToken, string idEmployees, string idDevices) {
            object[] results = this.Invoke("delEmployeesInGPRS", new object[] {
                        pToken,
                        idEmployees,
                        idDevices});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void delEmployeesInGPRSAsync(string pToken, string idEmployees, string idDevices) {
            this.delEmployeesInGPRSAsync(pToken, idEmployees, idDevices, null);
        }
        
        /// <remarks/>
        public void delEmployeesInGPRSAsync(string pToken, string idEmployees, string idDevices, object userState) {
            if ((this.delEmployeesInGPRSOperationCompleted == null)) {
                this.delEmployeesInGPRSOperationCompleted = new System.Threading.SendOrPostCallback(this.OndelEmployeesInGPRSOperationCompleted);
            }
            this.InvokeAsync("delEmployeesInGPRS", new object[] {
                        pToken,
                        idEmployees,
                        idDevices}, this.delEmployeesInGPRSOperationCompleted, userState);
        }
        
        private void OndelEmployeesInGPRSOperationCompleted(object arg) {
            if ((this.delEmployeesInGPRSCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.delEmployeesInGPRSCompleted(this, new delEmployeesInGPRSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getAllEmployeesDetailsToGPRS", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable getAllEmployeesDetailsToGPRS(string pToken, System.Data.DataTable idEmployees) {
            object[] results = this.Invoke("getAllEmployeesDetailsToGPRS", new object[] {
                        pToken,
                        idEmployees});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void getAllEmployeesDetailsToGPRSAsync(string pToken, System.Data.DataTable idEmployees) {
            this.getAllEmployeesDetailsToGPRSAsync(pToken, idEmployees, null);
        }
        
        /// <remarks/>
        public void getAllEmployeesDetailsToGPRSAsync(string pToken, System.Data.DataTable idEmployees, object userState) {
            if ((this.getAllEmployeesDetailsToGPRSOperationCompleted == null)) {
                this.getAllEmployeesDetailsToGPRSOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllEmployeesDetailsToGPRSOperationCompleted);
            }
            this.InvokeAsync("getAllEmployeesDetailsToGPRS", new object[] {
                        pToken,
                        idEmployees}, this.getAllEmployeesDetailsToGPRSOperationCompleted, userState);
        }
        
        private void OngetAllEmployeesDetailsToGPRSOperationCompleted(object arg) {
            if ((this.getAllEmployeesDetailsToGPRSCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllEmployeesDetailsToGPRSCompleted(this, new getAllEmployeesDetailsToGPRSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getEmployeesInGPRS", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable getEmployeesInGPRS(string pToken, string idDevices) {
            object[] results = this.Invoke("getEmployeesInGPRS", new object[] {
                        pToken,
                        idDevices});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void getEmployeesInGPRSAsync(string pToken, string idDevices) {
            this.getEmployeesInGPRSAsync(pToken, idDevices, null);
        }
        
        /// <remarks/>
        public void getEmployeesInGPRSAsync(string pToken, string idDevices, object userState) {
            if ((this.getEmployeesInGPRSOperationCompleted == null)) {
                this.getEmployeesInGPRSOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetEmployeesInGPRSOperationCompleted);
            }
            this.InvokeAsync("getEmployeesInGPRS", new object[] {
                        pToken,
                        idDevices}, this.getEmployeesInGPRSOperationCompleted, userState);
        }
        
        private void OngetEmployeesInGPRSOperationCompleted(object arg) {
            if ((this.getEmployeesInGPRSCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getEmployeesInGPRSCompleted(this, new getEmployeesInGPRSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/addProfileMonthSchedule", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int addProfileMonthSchedule(string pToken, int year, int month, string idProfile, string idMonthSchedule) {
            object[] results = this.Invoke("addProfileMonthSchedule", new object[] {
                        pToken,
                        year,
                        month,
                        idProfile,
                        idMonthSchedule});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void addProfileMonthScheduleAsync(string pToken, int year, int month, string idProfile, string idMonthSchedule) {
            this.addProfileMonthScheduleAsync(pToken, year, month, idProfile, idMonthSchedule, null);
        }
        
        /// <remarks/>
        public void addProfileMonthScheduleAsync(string pToken, int year, int month, string idProfile, string idMonthSchedule, object userState) {
            if ((this.addProfileMonthScheduleOperationCompleted == null)) {
                this.addProfileMonthScheduleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddProfileMonthScheduleOperationCompleted);
            }
            this.InvokeAsync("addProfileMonthSchedule", new object[] {
                        pToken,
                        year,
                        month,
                        idProfile,
                        idMonthSchedule}, this.addProfileMonthScheduleOperationCompleted, userState);
        }
        
        private void OnaddProfileMonthScheduleOperationCompleted(object arg) {
            if ((this.addProfileMonthScheduleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addProfileMonthScheduleCompleted(this, new addProfileMonthScheduleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/addEmployeeProfile", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int addEmployeeProfile(string pToken, string idEmployee, string idProfile, System.DateTime startDate, System.DateTime endDate) {
            object[] results = this.Invoke("addEmployeeProfile", new object[] {
                        pToken,
                        idEmployee,
                        idProfile,
                        startDate,
                        endDate});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void addEmployeeProfileAsync(string pToken, string idEmployee, string idProfile, System.DateTime startDate, System.DateTime endDate) {
            this.addEmployeeProfileAsync(pToken, idEmployee, idProfile, startDate, endDate, null);
        }
        
        /// <remarks/>
        public void addEmployeeProfileAsync(string pToken, string idEmployee, string idProfile, System.DateTime startDate, System.DateTime endDate, object userState) {
            if ((this.addEmployeeProfileOperationCompleted == null)) {
                this.addEmployeeProfileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddEmployeeProfileOperationCompleted);
            }
            this.InvokeAsync("addEmployeeProfile", new object[] {
                        pToken,
                        idEmployee,
                        idProfile,
                        startDate,
                        endDate}, this.addEmployeeProfileOperationCompleted, userState);
        }
        
        private void OnaddEmployeeProfileOperationCompleted(object arg) {
            if ((this.addEmployeeProfileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addEmployeeProfileCompleted(this, new addEmployeeProfileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/updateEmployeeProfile", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int updateEmployeeProfile(string pToken, string idEmployeeProfile, string idProfile, System.DateTime startDate, System.DateTime endDate) {
            object[] results = this.Invoke("updateEmployeeProfile", new object[] {
                        pToken,
                        idEmployeeProfile,
                        idProfile,
                        startDate,
                        endDate});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void updateEmployeeProfileAsync(string pToken, string idEmployeeProfile, string idProfile, System.DateTime startDate, System.DateTime endDate) {
            this.updateEmployeeProfileAsync(pToken, idEmployeeProfile, idProfile, startDate, endDate, null);
        }
        
        /// <remarks/>
        public void updateEmployeeProfileAsync(string pToken, string idEmployeeProfile, string idProfile, System.DateTime startDate, System.DateTime endDate, object userState) {
            if ((this.updateEmployeeProfileOperationCompleted == null)) {
                this.updateEmployeeProfileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateEmployeeProfileOperationCompleted);
            }
            this.InvokeAsync("updateEmployeeProfile", new object[] {
                        pToken,
                        idEmployeeProfile,
                        idProfile,
                        startDate,
                        endDate}, this.updateEmployeeProfileOperationCompleted, userState);
        }
        
        private void OnupdateEmployeeProfileOperationCompleted(object arg) {
            if ((this.updateEmployeeProfileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateEmployeeProfileCompleted(this, new updateEmployeeProfileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/deleteEmployeeProfile", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int deleteEmployeeProfile(string pToken, string idEmployeeProfile) {
            object[] results = this.Invoke("deleteEmployeeProfile", new object[] {
                        pToken,
                        idEmployeeProfile});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void deleteEmployeeProfileAsync(string pToken, string idEmployeeProfile) {
            this.deleteEmployeeProfileAsync(pToken, idEmployeeProfile, null);
        }
        
        /// <remarks/>
        public void deleteEmployeeProfileAsync(string pToken, string idEmployeeProfile, object userState) {
            if ((this.deleteEmployeeProfileOperationCompleted == null)) {
                this.deleteEmployeeProfileOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeleteEmployeeProfileOperationCompleted);
            }
            this.InvokeAsync("deleteEmployeeProfile", new object[] {
                        pToken,
                        idEmployeeProfile}, this.deleteEmployeeProfileOperationCompleted, userState);
        }
        
        private void OndeleteEmployeeProfileOperationCompleted(object arg) {
            if ((this.deleteEmployeeProfileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deleteEmployeeProfileCompleted(this, new deleteEmployeeProfileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getAllProfileMonthSchedules", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getAllProfileMonthSchedules(string pToken, string idProfile) {
            object[] results = this.Invoke("getAllProfileMonthSchedules", new object[] {
                        pToken,
                        idProfile});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getAllProfileMonthSchedulesAsync(string pToken, string idProfile) {
            this.getAllProfileMonthSchedulesAsync(pToken, idProfile, null);
        }
        
        /// <remarks/>
        public void getAllProfileMonthSchedulesAsync(string pToken, string idProfile, object userState) {
            if ((this.getAllProfileMonthSchedulesOperationCompleted == null)) {
                this.getAllProfileMonthSchedulesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllProfileMonthSchedulesOperationCompleted);
            }
            this.InvokeAsync("getAllProfileMonthSchedules", new object[] {
                        pToken,
                        idProfile}, this.getAllProfileMonthSchedulesOperationCompleted, userState);
        }
        
        private void OngetAllProfileMonthSchedulesOperationCompleted(object arg) {
            if ((this.getAllProfileMonthSchedulesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllProfileMonthSchedulesCompleted(this, new getAllProfileMonthSchedulesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getAllProfileYearMonthSchedules", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getAllProfileYearMonthSchedules(string pToken, string idProfile, int year) {
            object[] results = this.Invoke("getAllProfileYearMonthSchedules", new object[] {
                        pToken,
                        idProfile,
                        year});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getAllProfileYearMonthSchedulesAsync(string pToken, string idProfile, int year) {
            this.getAllProfileYearMonthSchedulesAsync(pToken, idProfile, year, null);
        }
        
        /// <remarks/>
        public void getAllProfileYearMonthSchedulesAsync(string pToken, string idProfile, int year, object userState) {
            if ((this.getAllProfileYearMonthSchedulesOperationCompleted == null)) {
                this.getAllProfileYearMonthSchedulesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllProfileYearMonthSchedulesOperationCompleted);
            }
            this.InvokeAsync("getAllProfileYearMonthSchedules", new object[] {
                        pToken,
                        idProfile,
                        year}, this.getAllProfileYearMonthSchedulesOperationCompleted, userState);
        }
        
        private void OngetAllProfileYearMonthSchedulesOperationCompleted(object arg) {
            if ((this.getAllProfileYearMonthSchedulesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllProfileYearMonthSchedulesCompleted(this, new getAllProfileYearMonthSchedulesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getProfileMonthSchedules", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getProfileMonthSchedules(string pToken, string idProfile, int month, int year) {
            object[] results = this.Invoke("getProfileMonthSchedules", new object[] {
                        pToken,
                        idProfile,
                        month,
                        year});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getProfileMonthSchedulesAsync(string pToken, string idProfile, int month, int year) {
            this.getProfileMonthSchedulesAsync(pToken, idProfile, month, year, null);
        }
        
        /// <remarks/>
        public void getProfileMonthSchedulesAsync(string pToken, string idProfile, int month, int year, object userState) {
            if ((this.getProfileMonthSchedulesOperationCompleted == null)) {
                this.getProfileMonthSchedulesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetProfileMonthSchedulesOperationCompleted);
            }
            this.InvokeAsync("getProfileMonthSchedules", new object[] {
                        pToken,
                        idProfile,
                        month,
                        year}, this.getProfileMonthSchedulesOperationCompleted, userState);
        }
        
        private void OngetProfileMonthSchedulesOperationCompleted(object arg) {
            if ((this.getProfileMonthSchedulesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getProfileMonthSchedulesCompleted(this, new getProfileMonthSchedulesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getEmployeeProfileByDate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getEmployeeProfileByDate(string pToken, string idEmployee, System.DateTime day) {
            object[] results = this.Invoke("getEmployeeProfileByDate", new object[] {
                        pToken,
                        idEmployee,
                        day});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getEmployeeProfileByDateAsync(string pToken, string idEmployee, System.DateTime day) {
            this.getEmployeeProfileByDateAsync(pToken, idEmployee, day, null);
        }
        
        /// <remarks/>
        public void getEmployeeProfileByDateAsync(string pToken, string idEmployee, System.DateTime day, object userState) {
            if ((this.getEmployeeProfileByDateOperationCompleted == null)) {
                this.getEmployeeProfileByDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetEmployeeProfileByDateOperationCompleted);
            }
            this.InvokeAsync("getEmployeeProfileByDate", new object[] {
                        pToken,
                        idEmployee,
                        day}, this.getEmployeeProfileByDateOperationCompleted, userState);
        }
        
        private void OngetEmployeeProfileByDateOperationCompleted(object arg) {
            if ((this.getEmployeeProfileByDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getEmployeeProfileByDateCompleted(this, new getEmployeeProfileByDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getTodayIdMonthSchedules", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getTodayIdMonthSchedules(string pToken, System.DateTime date) {
            object[] results = this.Invoke("getTodayIdMonthSchedules", new object[] {
                        pToken,
                        date});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getTodayIdMonthSchedulesAsync(string pToken, System.DateTime date) {
            this.getTodayIdMonthSchedulesAsync(pToken, date, null);
        }
        
        /// <remarks/>
        public void getTodayIdMonthSchedulesAsync(string pToken, System.DateTime date, object userState) {
            if ((this.getTodayIdMonthSchedulesOperationCompleted == null)) {
                this.getTodayIdMonthSchedulesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetTodayIdMonthSchedulesOperationCompleted);
            }
            this.InvokeAsync("getTodayIdMonthSchedules", new object[] {
                        pToken,
                        date}, this.getTodayIdMonthSchedulesOperationCompleted, userState);
        }
        
        private void OngetTodayIdMonthSchedulesOperationCompleted(object arg) {
            if ((this.getTodayIdMonthSchedulesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getTodayIdMonthSchedulesCompleted(this, new getTodayIdMonthSchedulesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/addSchedules", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string addSchedules(
                    string pToken, 
                    string name, 
                    System.DateTime minWorkHours, 
                    System.DateTime entryHour, 
                    System.DateTime exitHour, 
                    System.DateTime startEntryHour, 
                    System.DateTime stopEntryHour, 
                    System.DateTime startExitHour, 
                    System.DateTime stopExitHour, 
                    bool isento, 
                    string colorHtml, 
                    int minEmpQuant, 
                    int maxEmpQuant, 
                    string abbrev, 
                    string textColor, 
                    bool ignoreBreakHours, 
                    bool weekIsento, 
                    System.DateTime minWeekWorkHours, 
                    System.DateTime hourToChangeDay, 
                    bool startPreviousDay, 
                    string code, 
                    System.DateTime isentoBreakTime, 
                    bool fixed1, 
                    System.DateTime fixedStart1, 
                    System.DateTime fixedStop1, 
                    bool fixed2, 
                    System.DateTime fixedStart2, 
                    System.DateTime fixedStop2, 
                    System.DateTime notDiscountBreakIfWorkLessThan, 
                    bool availableToAllDepartments) {
            object[] results = this.Invoke("addSchedules", new object[] {
                        pToken,
                        name,
                        minWorkHours,
                        entryHour,
                        exitHour,
                        startEntryHour,
                        stopEntryHour,
                        startExitHour,
                        stopExitHour,
                        isento,
                        colorHtml,
                        minEmpQuant,
                        maxEmpQuant,
                        abbrev,
                        textColor,
                        ignoreBreakHours,
                        weekIsento,
                        minWeekWorkHours,
                        hourToChangeDay,
                        startPreviousDay,
                        code,
                        isentoBreakTime,
                        fixed1,
                        fixedStart1,
                        fixedStop1,
                        fixed2,
                        fixedStart2,
                        fixedStop2,
                        notDiscountBreakIfWorkLessThan,
                        availableToAllDepartments});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void addSchedulesAsync(
                    string pToken, 
                    string name, 
                    System.DateTime minWorkHours, 
                    System.DateTime entryHour, 
                    System.DateTime exitHour, 
                    System.DateTime startEntryHour, 
                    System.DateTime stopEntryHour, 
                    System.DateTime startExitHour, 
                    System.DateTime stopExitHour, 
                    bool isento, 
                    string colorHtml, 
                    int minEmpQuant, 
                    int maxEmpQuant, 
                    string abbrev, 
                    string textColor, 
                    bool ignoreBreakHours, 
                    bool weekIsento, 
                    System.DateTime minWeekWorkHours, 
                    System.DateTime hourToChangeDay, 
                    bool startPreviousDay, 
                    string code, 
                    System.DateTime isentoBreakTime, 
                    bool fixed1, 
                    System.DateTime fixedStart1, 
                    System.DateTime fixedStop1, 
                    bool fixed2, 
                    System.DateTime fixedStart2, 
                    System.DateTime fixedStop2, 
                    System.DateTime notDiscountBreakIfWorkLessThan, 
                    bool availableToAllDepartments) {
            this.addSchedulesAsync(pToken, name, minWorkHours, entryHour, exitHour, startEntryHour, stopEntryHour, startExitHour, stopExitHour, isento, colorHtml, minEmpQuant, maxEmpQuant, abbrev, textColor, ignoreBreakHours, weekIsento, minWeekWorkHours, hourToChangeDay, startPreviousDay, code, isentoBreakTime, fixed1, fixedStart1, fixedStop1, fixed2, fixedStart2, fixedStop2, notDiscountBreakIfWorkLessThan, availableToAllDepartments, null);
        }
        
        /// <remarks/>
        public void addSchedulesAsync(
                    string pToken, 
                    string name, 
                    System.DateTime minWorkHours, 
                    System.DateTime entryHour, 
                    System.DateTime exitHour, 
                    System.DateTime startEntryHour, 
                    System.DateTime stopEntryHour, 
                    System.DateTime startExitHour, 
                    System.DateTime stopExitHour, 
                    bool isento, 
                    string colorHtml, 
                    int minEmpQuant, 
                    int maxEmpQuant, 
                    string abbrev, 
                    string textColor, 
                    bool ignoreBreakHours, 
                    bool weekIsento, 
                    System.DateTime minWeekWorkHours, 
                    System.DateTime hourToChangeDay, 
                    bool startPreviousDay, 
                    string code, 
                    System.DateTime isentoBreakTime, 
                    bool fixed1, 
                    System.DateTime fixedStart1, 
                    System.DateTime fixedStop1, 
                    bool fixed2, 
                    System.DateTime fixedStart2, 
                    System.DateTime fixedStop2, 
                    System.DateTime notDiscountBreakIfWorkLessThan, 
                    bool availableToAllDepartments, 
                    object userState) {
            if ((this.addSchedulesOperationCompleted == null)) {
                this.addSchedulesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddSchedulesOperationCompleted);
            }
            this.InvokeAsync("addSchedules", new object[] {
                        pToken,
                        name,
                        minWorkHours,
                        entryHour,
                        exitHour,
                        startEntryHour,
                        stopEntryHour,
                        startExitHour,
                        stopExitHour,
                        isento,
                        colorHtml,
                        minEmpQuant,
                        maxEmpQuant,
                        abbrev,
                        textColor,
                        ignoreBreakHours,
                        weekIsento,
                        minWeekWorkHours,
                        hourToChangeDay,
                        startPreviousDay,
                        code,
                        isentoBreakTime,
                        fixed1,
                        fixedStart1,
                        fixedStop1,
                        fixed2,
                        fixedStart2,
                        fixedStop2,
                        notDiscountBreakIfWorkLessThan,
                        availableToAllDepartments}, this.addSchedulesOperationCompleted, userState);
        }
        
        private void OnaddSchedulesOperationCompleted(object arg) {
            if ((this.addSchedulesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addSchedulesCompleted(this, new addSchedulesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/delSchedule", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int delSchedule(string pToken, string idSchedule) {
            object[] results = this.Invoke("delSchedule", new object[] {
                        pToken,
                        idSchedule});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void delScheduleAsync(string pToken, string idSchedule) {
            this.delScheduleAsync(pToken, idSchedule, null);
        }
        
        /// <remarks/>
        public void delScheduleAsync(string pToken, string idSchedule, object userState) {
            if ((this.delScheduleOperationCompleted == null)) {
                this.delScheduleOperationCompleted = new System.Threading.SendOrPostCallback(this.OndelScheduleOperationCompleted);
            }
            this.InvokeAsync("delSchedule", new object[] {
                        pToken,
                        idSchedule}, this.delScheduleOperationCompleted, userState);
        }
        
        private void OndelScheduleOperationCompleted(object arg) {
            if ((this.delScheduleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.delScheduleCompleted(this, new delScheduleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/updateSchedules", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int updateSchedules(
                    string pToken, 
                    string idSchedules, 
                    string name, 
                    System.DateTime minWorkHours, 
                    System.DateTime entryHour, 
                    System.DateTime exitHour, 
                    System.DateTime startEntryHour, 
                    System.DateTime stopEntryHour, 
                    System.DateTime startExitHour, 
                    System.DateTime stopExitHour, 
                    bool isento, 
                    string colorHtml, 
                    int minEmpQuant, 
                    int maxEmpQuant, 
                    string abbrev, 
                    string textColor, 
                    bool ignoreBreakHours, 
                    bool weekIsento, 
                    System.DateTime minWeekWorkHours, 
                    System.DateTime hourToChangeDay, 
                    bool startPreviousDay, 
                    string code, 
                    System.DateTime isentoBreakTime, 
                    bool fixed1, 
                    System.DateTime fixedStart1, 
                    System.DateTime fixedStop1, 
                    bool fixed2, 
                    System.DateTime fixedStart2, 
                    System.DateTime fixedStop2, 
                    System.DateTime notDiscountBreakIfWorkLessThan, 
                    bool availableToAllDepartments) {
            object[] results = this.Invoke("updateSchedules", new object[] {
                        pToken,
                        idSchedules,
                        name,
                        minWorkHours,
                        entryHour,
                        exitHour,
                        startEntryHour,
                        stopEntryHour,
                        startExitHour,
                        stopExitHour,
                        isento,
                        colorHtml,
                        minEmpQuant,
                        maxEmpQuant,
                        abbrev,
                        textColor,
                        ignoreBreakHours,
                        weekIsento,
                        minWeekWorkHours,
                        hourToChangeDay,
                        startPreviousDay,
                        code,
                        isentoBreakTime,
                        fixed1,
                        fixedStart1,
                        fixedStop1,
                        fixed2,
                        fixedStart2,
                        fixedStop2,
                        notDiscountBreakIfWorkLessThan,
                        availableToAllDepartments});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void updateSchedulesAsync(
                    string pToken, 
                    string idSchedules, 
                    string name, 
                    System.DateTime minWorkHours, 
                    System.DateTime entryHour, 
                    System.DateTime exitHour, 
                    System.DateTime startEntryHour, 
                    System.DateTime stopEntryHour, 
                    System.DateTime startExitHour, 
                    System.DateTime stopExitHour, 
                    bool isento, 
                    string colorHtml, 
                    int minEmpQuant, 
                    int maxEmpQuant, 
                    string abbrev, 
                    string textColor, 
                    bool ignoreBreakHours, 
                    bool weekIsento, 
                    System.DateTime minWeekWorkHours, 
                    System.DateTime hourToChangeDay, 
                    bool startPreviousDay, 
                    string code, 
                    System.DateTime isentoBreakTime, 
                    bool fixed1, 
                    System.DateTime fixedStart1, 
                    System.DateTime fixedStop1, 
                    bool fixed2, 
                    System.DateTime fixedStart2, 
                    System.DateTime fixedStop2, 
                    System.DateTime notDiscountBreakIfWorkLessThan, 
                    bool availableToAllDepartments) {
            this.updateSchedulesAsync(pToken, idSchedules, name, minWorkHours, entryHour, exitHour, startEntryHour, stopEntryHour, startExitHour, stopExitHour, isento, colorHtml, minEmpQuant, maxEmpQuant, abbrev, textColor, ignoreBreakHours, weekIsento, minWeekWorkHours, hourToChangeDay, startPreviousDay, code, isentoBreakTime, fixed1, fixedStart1, fixedStop1, fixed2, fixedStart2, fixedStop2, notDiscountBreakIfWorkLessThan, availableToAllDepartments, null);
        }
        
        /// <remarks/>
        public void updateSchedulesAsync(
                    string pToken, 
                    string idSchedules, 
                    string name, 
                    System.DateTime minWorkHours, 
                    System.DateTime entryHour, 
                    System.DateTime exitHour, 
                    System.DateTime startEntryHour, 
                    System.DateTime stopEntryHour, 
                    System.DateTime startExitHour, 
                    System.DateTime stopExitHour, 
                    bool isento, 
                    string colorHtml, 
                    int minEmpQuant, 
                    int maxEmpQuant, 
                    string abbrev, 
                    string textColor, 
                    bool ignoreBreakHours, 
                    bool weekIsento, 
                    System.DateTime minWeekWorkHours, 
                    System.DateTime hourToChangeDay, 
                    bool startPreviousDay, 
                    string code, 
                    System.DateTime isentoBreakTime, 
                    bool fixed1, 
                    System.DateTime fixedStart1, 
                    System.DateTime fixedStop1, 
                    bool fixed2, 
                    System.DateTime fixedStart2, 
                    System.DateTime fixedStop2, 
                    System.DateTime notDiscountBreakIfWorkLessThan, 
                    bool availableToAllDepartments, 
                    object userState) {
            if ((this.updateSchedulesOperationCompleted == null)) {
                this.updateSchedulesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateSchedulesOperationCompleted);
            }
            this.InvokeAsync("updateSchedules", new object[] {
                        pToken,
                        idSchedules,
                        name,
                        minWorkHours,
                        entryHour,
                        exitHour,
                        startEntryHour,
                        stopEntryHour,
                        startExitHour,
                        stopExitHour,
                        isento,
                        colorHtml,
                        minEmpQuant,
                        maxEmpQuant,
                        abbrev,
                        textColor,
                        ignoreBreakHours,
                        weekIsento,
                        minWeekWorkHours,
                        hourToChangeDay,
                        startPreviousDay,
                        code,
                        isentoBreakTime,
                        fixed1,
                        fixedStart1,
                        fixedStop1,
                        fixed2,
                        fixedStart2,
                        fixedStop2,
                        notDiscountBreakIfWorkLessThan,
                        availableToAllDepartments}, this.updateSchedulesOperationCompleted, userState);
        }
        
        private void OnupdateSchedulesOperationCompleted(object arg) {
            if ((this.updateSchedulesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateSchedulesCompleted(this, new updateSchedulesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getAllSchedules", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getAllSchedules(string pToken, string filter) {
            object[] results = this.Invoke("getAllSchedules", new object[] {
                        pToken,
                        filter});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getAllSchedulesAsync(string pToken, string filter) {
            this.getAllSchedulesAsync(pToken, filter, null);
        }
        
        /// <remarks/>
        public void getAllSchedulesAsync(string pToken, string filter, object userState) {
            if ((this.getAllSchedulesOperationCompleted == null)) {
                this.getAllSchedulesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllSchedulesOperationCompleted);
            }
            this.InvokeAsync("getAllSchedules", new object[] {
                        pToken,
                        filter}, this.getAllSchedulesOperationCompleted, userState);
        }
        
        private void OngetAllSchedulesOperationCompleted(object arg) {
            if ((this.getAllSchedulesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllSchedulesCompleted(this, new getAllSchedulesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getScheduleFromEnrollNumberAndDate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getScheduleFromEnrollNumberAndDate(string pToken, int enrollNumber, string idDevice, int year, int month, int day) {
            object[] results = this.Invoke("getScheduleFromEnrollNumberAndDate", new object[] {
                        pToken,
                        enrollNumber,
                        idDevice,
                        year,
                        month,
                        day});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getScheduleFromEnrollNumberAndDateAsync(string pToken, int enrollNumber, string idDevice, int year, int month, int day) {
            this.getScheduleFromEnrollNumberAndDateAsync(pToken, enrollNumber, idDevice, year, month, day, null);
        }
        
        /// <remarks/>
        public void getScheduleFromEnrollNumberAndDateAsync(string pToken, int enrollNumber, string idDevice, int year, int month, int day, object userState) {
            if ((this.getScheduleFromEnrollNumberAndDateOperationCompleted == null)) {
                this.getScheduleFromEnrollNumberAndDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetScheduleFromEnrollNumberAndDateOperationCompleted);
            }
            this.InvokeAsync("getScheduleFromEnrollNumberAndDate", new object[] {
                        pToken,
                        enrollNumber,
                        idDevice,
                        year,
                        month,
                        day}, this.getScheduleFromEnrollNumberAndDateOperationCompleted, userState);
        }
        
        private void OngetScheduleFromEnrollNumberAndDateOperationCompleted(object arg) {
            if ((this.getScheduleFromEnrollNumberAndDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getScheduleFromEnrollNumberAndDateCompleted(this, new getScheduleFromEnrollNumberAndDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getScalesFromEmployeeBetweenDate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getScalesFromEmployeeBetweenDate(string pToken, string idEmp, System.DateTime init, System.DateTime end) {
            object[] results = this.Invoke("getScalesFromEmployeeBetweenDate", new object[] {
                        pToken,
                        idEmp,
                        init,
                        end});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getScalesFromEmployeeBetweenDateAsync(string pToken, string idEmp, System.DateTime init, System.DateTime end) {
            this.getScalesFromEmployeeBetweenDateAsync(pToken, idEmp, init, end, null);
        }
        
        /// <remarks/>
        public void getScalesFromEmployeeBetweenDateAsync(string pToken, string idEmp, System.DateTime init, System.DateTime end, object userState) {
            if ((this.getScalesFromEmployeeBetweenDateOperationCompleted == null)) {
                this.getScalesFromEmployeeBetweenDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetScalesFromEmployeeBetweenDateOperationCompleted);
            }
            this.InvokeAsync("getScalesFromEmployeeBetweenDate", new object[] {
                        pToken,
                        idEmp,
                        init,
                        end}, this.getScalesFromEmployeeBetweenDateOperationCompleted, userState);
        }
        
        private void OngetScalesFromEmployeeBetweenDateOperationCompleted(object arg) {
            if ((this.getScalesFromEmployeeBetweenDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getScalesFromEmployeeBetweenDateCompleted(this, new getScalesFromEmployeeBetweenDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/setScaleFromEmployeeDate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int setScaleFromEmployeeDate(string pToken, string idEmp, string idShift, string idScaleService, System.DateTime day) {
            object[] results = this.Invoke("setScaleFromEmployeeDate", new object[] {
                        pToken,
                        idEmp,
                        idShift,
                        idScaleService,
                        day});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void setScaleFromEmployeeDateAsync(string pToken, string idEmp, string idShift, string idScaleService, System.DateTime day) {
            this.setScaleFromEmployeeDateAsync(pToken, idEmp, idShift, idScaleService, day, null);
        }
        
        /// <remarks/>
        public void setScaleFromEmployeeDateAsync(string pToken, string idEmp, string idShift, string idScaleService, System.DateTime day, object userState) {
            if ((this.setScaleFromEmployeeDateOperationCompleted == null)) {
                this.setScaleFromEmployeeDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetScaleFromEmployeeDateOperationCompleted);
            }
            this.InvokeAsync("setScaleFromEmployeeDate", new object[] {
                        pToken,
                        idEmp,
                        idShift,
                        idScaleService,
                        day}, this.setScaleFromEmployeeDateOperationCompleted, userState);
        }
        
        private void OnsetScaleFromEmployeeDateOperationCompleted(object arg) {
            if ((this.setScaleFromEmployeeDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setScaleFromEmployeeDateCompleted(this, new setScaleFromEmployeeDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/delAllScalesFromEmployeeDate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int delAllScalesFromEmployeeDate(string pToken, string idEmp, System.DateTime day) {
            object[] results = this.Invoke("delAllScalesFromEmployeeDate", new object[] {
                        pToken,
                        idEmp,
                        day});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void delAllScalesFromEmployeeDateAsync(string pToken, string idEmp, System.DateTime day) {
            this.delAllScalesFromEmployeeDateAsync(pToken, idEmp, day, null);
        }
        
        /// <remarks/>
        public void delAllScalesFromEmployeeDateAsync(string pToken, string idEmp, System.DateTime day, object userState) {
            if ((this.delAllScalesFromEmployeeDateOperationCompleted == null)) {
                this.delAllScalesFromEmployeeDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OndelAllScalesFromEmployeeDateOperationCompleted);
            }
            this.InvokeAsync("delAllScalesFromEmployeeDate", new object[] {
                        pToken,
                        idEmp,
                        day}, this.delAllScalesFromEmployeeDateOperationCompleted, userState);
        }
        
        private void OndelAllScalesFromEmployeeDateOperationCompleted(object arg) {
            if ((this.delAllScalesFromEmployeeDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.delAllScalesFromEmployeeDateCompleted(this, new delAllScalesFromEmployeeDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getSchedule", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getSchedule(string pToken, string idSchedule) {
            object[] results = this.Invoke("getSchedule", new object[] {
                        pToken,
                        idSchedule});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getScheduleAsync(string pToken, string idSchedule) {
            this.getScheduleAsync(pToken, idSchedule, null);
        }
        
        /// <remarks/>
        public void getScheduleAsync(string pToken, string idSchedule, object userState) {
            if ((this.getScheduleOperationCompleted == null)) {
                this.getScheduleOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetScheduleOperationCompleted);
            }
            this.InvokeAsync("getSchedule", new object[] {
                        pToken,
                        idSchedule}, this.getScheduleOperationCompleted, userState);
        }
        
        private void OngetScheduleOperationCompleted(object arg) {
            if ((this.getScheduleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getScheduleCompleted(this, new getScheduleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getScheduleByName", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getScheduleByName(string pToken, string name) {
            object[] results = this.Invoke("getScheduleByName", new object[] {
                        pToken,
                        name});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getScheduleByNameAsync(string pToken, string name) {
            this.getScheduleByNameAsync(pToken, name, null);
        }
        
        /// <remarks/>
        public void getScheduleByNameAsync(string pToken, string name, object userState) {
            if ((this.getScheduleByNameOperationCompleted == null)) {
                this.getScheduleByNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetScheduleByNameOperationCompleted);
            }
            this.InvokeAsync("getScheduleByName", new object[] {
                        pToken,
                        name}, this.getScheduleByNameOperationCompleted, userState);
        }
        
        private void OngetScheduleByNameOperationCompleted(object arg) {
            if ((this.getScheduleByNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getScheduleByNameCompleted(this, new getScheduleByNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getAllSchedulesProfileMonth", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getAllSchedulesProfileMonth(string pToken, int profile, int month, int year) {
            object[] results = this.Invoke("getAllSchedulesProfileMonth", new object[] {
                        pToken,
                        profile,
                        month,
                        year});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getAllSchedulesProfileMonthAsync(string pToken, int profile, int month, int year) {
            this.getAllSchedulesProfileMonthAsync(pToken, profile, month, year, null);
        }
        
        /// <remarks/>
        public void getAllSchedulesProfileMonthAsync(string pToken, int profile, int month, int year, object userState) {
            if ((this.getAllSchedulesProfileMonthOperationCompleted == null)) {
                this.getAllSchedulesProfileMonthOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllSchedulesProfileMonthOperationCompleted);
            }
            this.InvokeAsync("getAllSchedulesProfileMonth", new object[] {
                        pToken,
                        profile,
                        month,
                        year}, this.getAllSchedulesProfileMonthOperationCompleted, userState);
        }
        
        private void OngetAllSchedulesProfileMonthOperationCompleted(object arg) {
            if ((this.getAllSchedulesProfileMonthCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllSchedulesProfileMonthCompleted(this, new getAllSchedulesProfileMonthCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getTodayIdSchedule", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getTodayIdSchedule(string pToken, string idMonthSchedules, int day) {
            object[] results = this.Invoke("getTodayIdSchedule", new object[] {
                        pToken,
                        idMonthSchedules,
                        day});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getTodayIdScheduleAsync(string pToken, string idMonthSchedules, int day) {
            this.getTodayIdScheduleAsync(pToken, idMonthSchedules, day, null);
        }
        
        /// <remarks/>
        public void getTodayIdScheduleAsync(string pToken, string idMonthSchedules, int day, object userState) {
            if ((this.getTodayIdScheduleOperationCompleted == null)) {
                this.getTodayIdScheduleOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetTodayIdScheduleOperationCompleted);
            }
            this.InvokeAsync("getTodayIdSchedule", new object[] {
                        pToken,
                        idMonthSchedules,
                        day}, this.getTodayIdScheduleOperationCompleted, userState);
        }
        
        private void OngetTodayIdScheduleOperationCompleted(object arg) {
            if ((this.getTodayIdScheduleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getTodayIdScheduleCompleted(this, new getTodayIdScheduleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getDateIdSchedules", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getDateIdSchedules(string pToken, System.DateTime date) {
            object[] results = this.Invoke("getDateIdSchedules", new object[] {
                        pToken,
                        date});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getDateIdSchedulesAsync(string pToken, System.DateTime date) {
            this.getDateIdSchedulesAsync(pToken, date, null);
        }
        
        /// <remarks/>
        public void getDateIdSchedulesAsync(string pToken, System.DateTime date, object userState) {
            if ((this.getDateIdSchedulesOperationCompleted == null)) {
                this.getDateIdSchedulesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDateIdSchedulesOperationCompleted);
            }
            this.InvokeAsync("getDateIdSchedules", new object[] {
                        pToken,
                        date}, this.getDateIdSchedulesOperationCompleted, userState);
        }
        
        private void OngetDateIdSchedulesOperationCompleted(object arg) {
            if ((this.getDateIdSchedulesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDateIdSchedulesCompleted(this, new getDateIdSchedulesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getEmployeeScheduleFromDate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getEmployeeScheduleFromDate(string pToken, string idEmployee, System.DateTime date) {
            object[] results = this.Invoke("getEmployeeScheduleFromDate", new object[] {
                        pToken,
                        idEmployee,
                        date});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getEmployeeScheduleFromDateAsync(string pToken, string idEmployee, System.DateTime date) {
            this.getEmployeeScheduleFromDateAsync(pToken, idEmployee, date, null);
        }
        
        /// <remarks/>
        public void getEmployeeScheduleFromDateAsync(string pToken, string idEmployee, System.DateTime date, object userState) {
            if ((this.getEmployeeScheduleFromDateOperationCompleted == null)) {
                this.getEmployeeScheduleFromDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetEmployeeScheduleFromDateOperationCompleted);
            }
            this.InvokeAsync("getEmployeeScheduleFromDate", new object[] {
                        pToken,
                        idEmployee,
                        date}, this.getEmployeeScheduleFromDateOperationCompleted, userState);
        }
        
        private void OngetEmployeeScheduleFromDateOperationCompleted(object arg) {
            if ((this.getEmployeeScheduleFromDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getEmployeeScheduleFromDateCompleted(this, new getEmployeeScheduleFromDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getEmployeeShiftScheduleFromDate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getEmployeeShiftScheduleFromDate(string pToken, string idEmployee, System.DateTime date) {
            object[] results = this.Invoke("getEmployeeShiftScheduleFromDate", new object[] {
                        pToken,
                        idEmployee,
                        date});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getEmployeeShiftScheduleFromDateAsync(string pToken, string idEmployee, System.DateTime date) {
            this.getEmployeeShiftScheduleFromDateAsync(pToken, idEmployee, date, null);
        }
        
        /// <remarks/>
        public void getEmployeeShiftScheduleFromDateAsync(string pToken, string idEmployee, System.DateTime date, object userState) {
            if ((this.getEmployeeShiftScheduleFromDateOperationCompleted == null)) {
                this.getEmployeeShiftScheduleFromDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetEmployeeShiftScheduleFromDateOperationCompleted);
            }
            this.InvokeAsync("getEmployeeShiftScheduleFromDate", new object[] {
                        pToken,
                        idEmployee,
                        date}, this.getEmployeeShiftScheduleFromDateOperationCompleted, userState);
        }
        
        private void OngetEmployeeShiftScheduleFromDateOperationCompleted(object arg) {
            if ((this.getEmployeeShiftScheduleFromDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getEmployeeShiftScheduleFromDateCompleted(this, new getEmployeeShiftScheduleFromDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/addSchedulesBreaks", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string addSchedulesBreaks(string pToken, string idSchedules, string breakType, System.DateTime duration, System.DateTime startHour, System.DateTime stopHour, System.DateTime startExitHour, System.DateTime stopExitHour, System.DateTime startEntryHour, System.DateTime stopEntryHour) {
            object[] results = this.Invoke("addSchedulesBreaks", new object[] {
                        pToken,
                        idSchedules,
                        breakType,
                        duration,
                        startHour,
                        stopHour,
                        startExitHour,
                        stopExitHour,
                        startEntryHour,
                        stopEntryHour});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void addSchedulesBreaksAsync(string pToken, string idSchedules, string breakType, System.DateTime duration, System.DateTime startHour, System.DateTime stopHour, System.DateTime startExitHour, System.DateTime stopExitHour, System.DateTime startEntryHour, System.DateTime stopEntryHour) {
            this.addSchedulesBreaksAsync(pToken, idSchedules, breakType, duration, startHour, stopHour, startExitHour, stopExitHour, startEntryHour, stopEntryHour, null);
        }
        
        /// <remarks/>
        public void addSchedulesBreaksAsync(string pToken, string idSchedules, string breakType, System.DateTime duration, System.DateTime startHour, System.DateTime stopHour, System.DateTime startExitHour, System.DateTime stopExitHour, System.DateTime startEntryHour, System.DateTime stopEntryHour, object userState) {
            if ((this.addSchedulesBreaksOperationCompleted == null)) {
                this.addSchedulesBreaksOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddSchedulesBreaksOperationCompleted);
            }
            this.InvokeAsync("addSchedulesBreaks", new object[] {
                        pToken,
                        idSchedules,
                        breakType,
                        duration,
                        startHour,
                        stopHour,
                        startExitHour,
                        stopExitHour,
                        startEntryHour,
                        stopEntryHour}, this.addSchedulesBreaksOperationCompleted, userState);
        }
        
        private void OnaddSchedulesBreaksOperationCompleted(object arg) {
            if ((this.addSchedulesBreaksCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addSchedulesBreaksCompleted(this, new addSchedulesBreaksCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/delSchedulesBreaks", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int delSchedulesBreaks(string pToken, string idSchedules) {
            object[] results = this.Invoke("delSchedulesBreaks", new object[] {
                        pToken,
                        idSchedules});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void delSchedulesBreaksAsync(string pToken, string idSchedules) {
            this.delSchedulesBreaksAsync(pToken, idSchedules, null);
        }
        
        /// <remarks/>
        public void delSchedulesBreaksAsync(string pToken, string idSchedules, object userState) {
            if ((this.delSchedulesBreaksOperationCompleted == null)) {
                this.delSchedulesBreaksOperationCompleted = new System.Threading.SendOrPostCallback(this.OndelSchedulesBreaksOperationCompleted);
            }
            this.InvokeAsync("delSchedulesBreaks", new object[] {
                        pToken,
                        idSchedules}, this.delSchedulesBreaksOperationCompleted, userState);
        }
        
        private void OndelSchedulesBreaksOperationCompleted(object arg) {
            if ((this.delSchedulesBreaksCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.delSchedulesBreaksCompleted(this, new delSchedulesBreaksCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/delRelationSchedulesBreaks", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int delRelationSchedulesBreaks(string pToken, string idSchedules, string idBreak) {
            object[] results = this.Invoke("delRelationSchedulesBreaks", new object[] {
                        pToken,
                        idSchedules,
                        idBreak});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void delRelationSchedulesBreaksAsync(string pToken, string idSchedules, string idBreak) {
            this.delRelationSchedulesBreaksAsync(pToken, idSchedules, idBreak, null);
        }
        
        /// <remarks/>
        public void delRelationSchedulesBreaksAsync(string pToken, string idSchedules, string idBreak, object userState) {
            if ((this.delRelationSchedulesBreaksOperationCompleted == null)) {
                this.delRelationSchedulesBreaksOperationCompleted = new System.Threading.SendOrPostCallback(this.OndelRelationSchedulesBreaksOperationCompleted);
            }
            this.InvokeAsync("delRelationSchedulesBreaks", new object[] {
                        pToken,
                        idSchedules,
                        idBreak}, this.delRelationSchedulesBreaksOperationCompleted, userState);
        }
        
        private void OndelRelationSchedulesBreaksOperationCompleted(object arg) {
            if ((this.delRelationSchedulesBreaksCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.delRelationSchedulesBreaksCompleted(this, new delRelationSchedulesBreaksCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getAllSchedulesBreaks", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getAllSchedulesBreaks(string pToken) {
            object[] results = this.Invoke("getAllSchedulesBreaks", new object[] {
                        pToken});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getAllSchedulesBreaksAsync(string pToken) {
            this.getAllSchedulesBreaksAsync(pToken, null);
        }
        
        /// <remarks/>
        public void getAllSchedulesBreaksAsync(string pToken, object userState) {
            if ((this.getAllSchedulesBreaksOperationCompleted == null)) {
                this.getAllSchedulesBreaksOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllSchedulesBreaksOperationCompleted);
            }
            this.InvokeAsync("getAllSchedulesBreaks", new object[] {
                        pToken}, this.getAllSchedulesBreaksOperationCompleted, userState);
        }
        
        private void OngetAllSchedulesBreaksOperationCompleted(object arg) {
            if ((this.getAllSchedulesBreaksCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllSchedulesBreaksCompleted(this, new getAllSchedulesBreaksCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getSchedulesBreaks", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getSchedulesBreaks(string pToken, string idSchedules) {
            object[] results = this.Invoke("getSchedulesBreaks", new object[] {
                        pToken,
                        idSchedules});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getSchedulesBreaksAsync(string pToken, string idSchedules) {
            this.getSchedulesBreaksAsync(pToken, idSchedules, null);
        }
        
        /// <remarks/>
        public void getSchedulesBreaksAsync(string pToken, string idSchedules, object userState) {
            if ((this.getSchedulesBreaksOperationCompleted == null)) {
                this.getSchedulesBreaksOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetSchedulesBreaksOperationCompleted);
            }
            this.InvokeAsync("getSchedulesBreaks", new object[] {
                        pToken,
                        idSchedules}, this.getSchedulesBreaksOperationCompleted, userState);
        }
        
        private void OngetSchedulesBreaksOperationCompleted(object arg) {
            if ((this.getSchedulesBreaksCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getSchedulesBreaksCompleted(this, new getSchedulesBreaksCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/addSchedulesChanges", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string addSchedulesChanges(string pToken, System.DateTime date, string idEmployee, string idScheduleAfer, string idSchedueBefore, string comments) {
            object[] results = this.Invoke("addSchedulesChanges", new object[] {
                        pToken,
                        date,
                        idEmployee,
                        idScheduleAfer,
                        idSchedueBefore,
                        comments});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void addSchedulesChangesAsync(string pToken, System.DateTime date, string idEmployee, string idScheduleAfer, string idSchedueBefore, string comments) {
            this.addSchedulesChangesAsync(pToken, date, idEmployee, idScheduleAfer, idSchedueBefore, comments, null);
        }
        
        /// <remarks/>
        public void addSchedulesChangesAsync(string pToken, System.DateTime date, string idEmployee, string idScheduleAfer, string idSchedueBefore, string comments, object userState) {
            if ((this.addSchedulesChangesOperationCompleted == null)) {
                this.addSchedulesChangesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddSchedulesChangesOperationCompleted);
            }
            this.InvokeAsync("addSchedulesChanges", new object[] {
                        pToken,
                        date,
                        idEmployee,
                        idScheduleAfer,
                        idSchedueBefore,
                        comments}, this.addSchedulesChangesOperationCompleted, userState);
        }
        
        private void OnaddSchedulesChangesOperationCompleted(object arg) {
            if ((this.addSchedulesChangesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addSchedulesChangesCompleted(this, new addSchedulesChangesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/updateSchedulesChanges", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int updateSchedulesChanges(string pToken, string idSchedulesChanges, System.DateTime date, string idEmployee, string idScheduleAfter, string idSchedueBefore, string comments) {
            object[] results = this.Invoke("updateSchedulesChanges", new object[] {
                        pToken,
                        idSchedulesChanges,
                        date,
                        idEmployee,
                        idScheduleAfter,
                        idSchedueBefore,
                        comments});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void updateSchedulesChangesAsync(string pToken, string idSchedulesChanges, System.DateTime date, string idEmployee, string idScheduleAfter, string idSchedueBefore, string comments) {
            this.updateSchedulesChangesAsync(pToken, idSchedulesChanges, date, idEmployee, idScheduleAfter, idSchedueBefore, comments, null);
        }
        
        /// <remarks/>
        public void updateSchedulesChangesAsync(string pToken, string idSchedulesChanges, System.DateTime date, string idEmployee, string idScheduleAfter, string idSchedueBefore, string comments, object userState) {
            if ((this.updateSchedulesChangesOperationCompleted == null)) {
                this.updateSchedulesChangesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateSchedulesChangesOperationCompleted);
            }
            this.InvokeAsync("updateSchedulesChanges", new object[] {
                        pToken,
                        idSchedulesChanges,
                        date,
                        idEmployee,
                        idScheduleAfter,
                        idSchedueBefore,
                        comments}, this.updateSchedulesChangesOperationCompleted, userState);
        }
        
        private void OnupdateSchedulesChangesOperationCompleted(object arg) {
            if ((this.updateSchedulesChangesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateSchedulesChangesCompleted(this, new updateSchedulesChangesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/delSchedulesChanges", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int delSchedulesChanges(string pToken, string idSchedulesChanges) {
            object[] results = this.Invoke("delSchedulesChanges", new object[] {
                        pToken,
                        idSchedulesChanges});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void delSchedulesChangesAsync(string pToken, string idSchedulesChanges) {
            this.delSchedulesChangesAsync(pToken, idSchedulesChanges, null);
        }
        
        /// <remarks/>
        public void delSchedulesChangesAsync(string pToken, string idSchedulesChanges, object userState) {
            if ((this.delSchedulesChangesOperationCompleted == null)) {
                this.delSchedulesChangesOperationCompleted = new System.Threading.SendOrPostCallback(this.OndelSchedulesChangesOperationCompleted);
            }
            this.InvokeAsync("delSchedulesChanges", new object[] {
                        pToken,
                        idSchedulesChanges}, this.delSchedulesChangesOperationCompleted, userState);
        }
        
        private void OndelSchedulesChangesOperationCompleted(object arg) {
            if ((this.delSchedulesChangesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.delSchedulesChangesCompleted(this, new delSchedulesChangesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getEmployeeScheduleChangeFromDate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getEmployeeScheduleChangeFromDate(string pToken, string idEmployee, System.DateTime date) {
            object[] results = this.Invoke("getEmployeeScheduleChangeFromDate", new object[] {
                        pToken,
                        idEmployee,
                        date});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getEmployeeScheduleChangeFromDateAsync(string pToken, string idEmployee, System.DateTime date) {
            this.getEmployeeScheduleChangeFromDateAsync(pToken, idEmployee, date, null);
        }
        
        /// <remarks/>
        public void getEmployeeScheduleChangeFromDateAsync(string pToken, string idEmployee, System.DateTime date, object userState) {
            if ((this.getEmployeeScheduleChangeFromDateOperationCompleted == null)) {
                this.getEmployeeScheduleChangeFromDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetEmployeeScheduleChangeFromDateOperationCompleted);
            }
            this.InvokeAsync("getEmployeeScheduleChangeFromDate", new object[] {
                        pToken,
                        idEmployee,
                        date}, this.getEmployeeScheduleChangeFromDateOperationCompleted, userState);
        }
        
        private void OngetEmployeeScheduleChangeFromDateOperationCompleted(object arg) {
            if ((this.getEmployeeScheduleChangeFromDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getEmployeeScheduleChangeFromDateCompleted(this, new getEmployeeScheduleChangeFromDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/addWorkResume", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int addWorkResume(
                    string pToken, 
                    string idEmployee, 
                    System.DateTime date, 
                    string idSchedule, 
                    bool onAbsences, 
                    bool onVacancies, 
                    bool changedSchedule, 
                    bool isento, 
                    System.DateTime expectedWorkHours, 
                    System.DateTime efectiveWorkHours, 
                    System.DateTime extraHours, 
                    string comments, 
                    string resumeInfo, 
                    bool late, 
                    bool fault, 
                    System.DateTime lateTime, 
                    bool existExceptions, 
                    System.DateTime expectedBreakHours, 
                    System.DateTime breakHours, 
                    int absenceHours, 
                    int absenceMinutes, 
                    bool removeBreakHour, 
                    bool extraHoursAproved, 
                    string compensation, 
                    string fundament, 
                    System.DateTime fullEfectiveWorkHours, 
                    System.DateTime hoursPackage, 
                    System.DateTime m1, 
                    System.DateTime m2, 
                    System.DateTime m3, 
                    System.DateTime m4, 
                    System.DateTime m5, 
                    System.DateTime m6, 
                    System.DateTime m7, 
                    System.DateTime m8, 
                    System.DateTime m9, 
                    System.DateTime m10, 
                    System.DateTime extraDiurnal, 
                    System.DateTime extraStart, 
                    System.DateTime extraEnd, 
                    System.DateTime extraNight, 
                    System.DateTime extraNightStart, 
                    System.DateTime extraNightEnd, 
                    System.DateTime weeklyComplementaryBreakUntil8h, 
                    System.DateTime weeklyComplementaryBreakAfter8h, 
                    System.DateTime holidayUntil8h, 
                    System.DateTime holidayAfter8h, 
                    System.DateTime compensatoryBreak, 
                    System.DateTime weeklyRequiredBreakUntil8h, 
                    System.DateTime weeklyRequiredBreakAfter8h, 
                    int meal, 
                    int compensatoryBreakSeconds) {
            object[] results = this.Invoke("addWorkResume", new object[] {
                        pToken,
                        idEmployee,
                        date,
                        idSchedule,
                        onAbsences,
                        onVacancies,
                        changedSchedule,
                        isento,
                        expectedWorkHours,
                        efectiveWorkHours,
                        extraHours,
                        comments,
                        resumeInfo,
                        late,
                        fault,
                        lateTime,
                        existExceptions,
                        expectedBreakHours,
                        breakHours,
                        absenceHours,
                        absenceMinutes,
                        removeBreakHour,
                        extraHoursAproved,
                        compensation,
                        fundament,
                        fullEfectiveWorkHours,
                        hoursPackage,
                        m1,
                        m2,
                        m3,
                        m4,
                        m5,
                        m6,
                        m7,
                        m8,
                        m9,
                        m10,
                        extraDiurnal,
                        extraStart,
                        extraEnd,
                        extraNight,
                        extraNightStart,
                        extraNightEnd,
                        weeklyComplementaryBreakUntil8h,
                        weeklyComplementaryBreakAfter8h,
                        holidayUntil8h,
                        holidayAfter8h,
                        compensatoryBreak,
                        weeklyRequiredBreakUntil8h,
                        weeklyRequiredBreakAfter8h,
                        meal,
                        compensatoryBreakSeconds});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void addWorkResumeAsync(
                    string pToken, 
                    string idEmployee, 
                    System.DateTime date, 
                    string idSchedule, 
                    bool onAbsences, 
                    bool onVacancies, 
                    bool changedSchedule, 
                    bool isento, 
                    System.DateTime expectedWorkHours, 
                    System.DateTime efectiveWorkHours, 
                    System.DateTime extraHours, 
                    string comments, 
                    string resumeInfo, 
                    bool late, 
                    bool fault, 
                    System.DateTime lateTime, 
                    bool existExceptions, 
                    System.DateTime expectedBreakHours, 
                    System.DateTime breakHours, 
                    int absenceHours, 
                    int absenceMinutes, 
                    bool removeBreakHour, 
                    bool extraHoursAproved, 
                    string compensation, 
                    string fundament, 
                    System.DateTime fullEfectiveWorkHours, 
                    System.DateTime hoursPackage, 
                    System.DateTime m1, 
                    System.DateTime m2, 
                    System.DateTime m3, 
                    System.DateTime m4, 
                    System.DateTime m5, 
                    System.DateTime m6, 
                    System.DateTime m7, 
                    System.DateTime m8, 
                    System.DateTime m9, 
                    System.DateTime m10, 
                    System.DateTime extraDiurnal, 
                    System.DateTime extraStart, 
                    System.DateTime extraEnd, 
                    System.DateTime extraNight, 
                    System.DateTime extraNightStart, 
                    System.DateTime extraNightEnd, 
                    System.DateTime weeklyComplementaryBreakUntil8h, 
                    System.DateTime weeklyComplementaryBreakAfter8h, 
                    System.DateTime holidayUntil8h, 
                    System.DateTime holidayAfter8h, 
                    System.DateTime compensatoryBreak, 
                    System.DateTime weeklyRequiredBreakUntil8h, 
                    System.DateTime weeklyRequiredBreakAfter8h, 
                    int meal, 
                    int compensatoryBreakSeconds) {
            this.addWorkResumeAsync(pToken, idEmployee, date, idSchedule, onAbsences, onVacancies, changedSchedule, isento, expectedWorkHours, efectiveWorkHours, extraHours, comments, resumeInfo, late, fault, lateTime, existExceptions, expectedBreakHours, breakHours, absenceHours, absenceMinutes, removeBreakHour, extraHoursAproved, compensation, fundament, fullEfectiveWorkHours, hoursPackage, m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, extraDiurnal, extraStart, extraEnd, extraNight, extraNightStart, extraNightEnd, weeklyComplementaryBreakUntil8h, weeklyComplementaryBreakAfter8h, holidayUntil8h, holidayAfter8h, compensatoryBreak, weeklyRequiredBreakUntil8h, weeklyRequiredBreakAfter8h, meal, compensatoryBreakSeconds, null);
        }
        
        /// <remarks/>
        public void addWorkResumeAsync(
                    string pToken, 
                    string idEmployee, 
                    System.DateTime date, 
                    string idSchedule, 
                    bool onAbsences, 
                    bool onVacancies, 
                    bool changedSchedule, 
                    bool isento, 
                    System.DateTime expectedWorkHours, 
                    System.DateTime efectiveWorkHours, 
                    System.DateTime extraHours, 
                    string comments, 
                    string resumeInfo, 
                    bool late, 
                    bool fault, 
                    System.DateTime lateTime, 
                    bool existExceptions, 
                    System.DateTime expectedBreakHours, 
                    System.DateTime breakHours, 
                    int absenceHours, 
                    int absenceMinutes, 
                    bool removeBreakHour, 
                    bool extraHoursAproved, 
                    string compensation, 
                    string fundament, 
                    System.DateTime fullEfectiveWorkHours, 
                    System.DateTime hoursPackage, 
                    System.DateTime m1, 
                    System.DateTime m2, 
                    System.DateTime m3, 
                    System.DateTime m4, 
                    System.DateTime m5, 
                    System.DateTime m6, 
                    System.DateTime m7, 
                    System.DateTime m8, 
                    System.DateTime m9, 
                    System.DateTime m10, 
                    System.DateTime extraDiurnal, 
                    System.DateTime extraStart, 
                    System.DateTime extraEnd, 
                    System.DateTime extraNight, 
                    System.DateTime extraNightStart, 
                    System.DateTime extraNightEnd, 
                    System.DateTime weeklyComplementaryBreakUntil8h, 
                    System.DateTime weeklyComplementaryBreakAfter8h, 
                    System.DateTime holidayUntil8h, 
                    System.DateTime holidayAfter8h, 
                    System.DateTime compensatoryBreak, 
                    System.DateTime weeklyRequiredBreakUntil8h, 
                    System.DateTime weeklyRequiredBreakAfter8h, 
                    int meal, 
                    int compensatoryBreakSeconds, 
                    object userState) {
            if ((this.addWorkResumeOperationCompleted == null)) {
                this.addWorkResumeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddWorkResumeOperationCompleted);
            }
            this.InvokeAsync("addWorkResume", new object[] {
                        pToken,
                        idEmployee,
                        date,
                        idSchedule,
                        onAbsences,
                        onVacancies,
                        changedSchedule,
                        isento,
                        expectedWorkHours,
                        efectiveWorkHours,
                        extraHours,
                        comments,
                        resumeInfo,
                        late,
                        fault,
                        lateTime,
                        existExceptions,
                        expectedBreakHours,
                        breakHours,
                        absenceHours,
                        absenceMinutes,
                        removeBreakHour,
                        extraHoursAproved,
                        compensation,
                        fundament,
                        fullEfectiveWorkHours,
                        hoursPackage,
                        m1,
                        m2,
                        m3,
                        m4,
                        m5,
                        m6,
                        m7,
                        m8,
                        m9,
                        m10,
                        extraDiurnal,
                        extraStart,
                        extraEnd,
                        extraNight,
                        extraNightStart,
                        extraNightEnd,
                        weeklyComplementaryBreakUntil8h,
                        weeklyComplementaryBreakAfter8h,
                        holidayUntil8h,
                        holidayAfter8h,
                        compensatoryBreak,
                        weeklyRequiredBreakUntil8h,
                        weeklyRequiredBreakAfter8h,
                        meal,
                        compensatoryBreakSeconds}, this.addWorkResumeOperationCompleted, userState);
        }
        
        private void OnaddWorkResumeOperationCompleted(object arg) {
            if ((this.addWorkResumeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addWorkResumeCompleted(this, new addWorkResumeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/delWorkResume", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int delWorkResume(string pToken, string idWorkResume) {
            object[] results = this.Invoke("delWorkResume", new object[] {
                        pToken,
                        idWorkResume});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void delWorkResumeAsync(string pToken, string idWorkResume) {
            this.delWorkResumeAsync(pToken, idWorkResume, null);
        }
        
        /// <remarks/>
        public void delWorkResumeAsync(string pToken, string idWorkResume, object userState) {
            if ((this.delWorkResumeOperationCompleted == null)) {
                this.delWorkResumeOperationCompleted = new System.Threading.SendOrPostCallback(this.OndelWorkResumeOperationCompleted);
            }
            this.InvokeAsync("delWorkResume", new object[] {
                        pToken,
                        idWorkResume}, this.delWorkResumeOperationCompleted, userState);
        }
        
        private void OndelWorkResumeOperationCompleted(object arg) {
            if ((this.delWorkResumeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.delWorkResumeCompleted(this, new delWorkResumeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/changeWorkResume", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int changeWorkResume(
                    string pToken, 
                    string idWorkResume, 
                    string idEmployee, 
                    System.DateTime date, 
                    string idSchedule, 
                    bool onAbsences, 
                    bool onVacancies, 
                    bool changedSchedule, 
                    bool isento, 
                    System.DateTime expectedWorkHours, 
                    System.DateTime efectiveWorkHours, 
                    System.DateTime extraHours, 
                    string comments, 
                    string resumeInfo, 
                    bool late, 
                    bool fault, 
                    System.DateTime lateTime, 
                    bool existExceptions, 
                    System.DateTime expectedBreakHours, 
                    System.DateTime breakHours, 
                    int absenceHours, 
                    int absenceMinutes, 
                    bool removeBreakHour, 
                    System.DateTime fullEfectiveWorkHours, 
                    System.DateTime hoursPackage, 
                    System.DateTime m1, 
                    System.DateTime m2, 
                    System.DateTime m3, 
                    System.DateTime m4, 
                    System.DateTime m5, 
                    System.DateTime m6, 
                    System.DateTime m7, 
                    System.DateTime m8, 
                    System.DateTime m9, 
                    System.DateTime m10, 
                    System.DateTime extraDiurnal, 
                    System.DateTime extraStart, 
                    System.DateTime extraEnd, 
                    System.DateTime extraNight, 
                    System.DateTime extraNightStart, 
                    System.DateTime extraNightEnd, 
                    System.DateTime weeklyComplementaryBreakUntil8h, 
                    System.DateTime weeklyComplementaryBreakAfter8h, 
                    System.DateTime holidayUntil8h, 
                    System.DateTime holidayAfter8h, 
                    System.DateTime compensatoryBreak, 
                    System.DateTime weeklyRequiredBreakUntil8h, 
                    System.DateTime weeklyRequiredBreakAfter8h, 
                    int meal, 
                    int compensatoryBreakSeconds) {
            object[] results = this.Invoke("changeWorkResume", new object[] {
                        pToken,
                        idWorkResume,
                        idEmployee,
                        date,
                        idSchedule,
                        onAbsences,
                        onVacancies,
                        changedSchedule,
                        isento,
                        expectedWorkHours,
                        efectiveWorkHours,
                        extraHours,
                        comments,
                        resumeInfo,
                        late,
                        fault,
                        lateTime,
                        existExceptions,
                        expectedBreakHours,
                        breakHours,
                        absenceHours,
                        absenceMinutes,
                        removeBreakHour,
                        fullEfectiveWorkHours,
                        hoursPackage,
                        m1,
                        m2,
                        m3,
                        m4,
                        m5,
                        m6,
                        m7,
                        m8,
                        m9,
                        m10,
                        extraDiurnal,
                        extraStart,
                        extraEnd,
                        extraNight,
                        extraNightStart,
                        extraNightEnd,
                        weeklyComplementaryBreakUntil8h,
                        weeklyComplementaryBreakAfter8h,
                        holidayUntil8h,
                        holidayAfter8h,
                        compensatoryBreak,
                        weeklyRequiredBreakUntil8h,
                        weeklyRequiredBreakAfter8h,
                        meal,
                        compensatoryBreakSeconds});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void changeWorkResumeAsync(
                    string pToken, 
                    string idWorkResume, 
                    string idEmployee, 
                    System.DateTime date, 
                    string idSchedule, 
                    bool onAbsences, 
                    bool onVacancies, 
                    bool changedSchedule, 
                    bool isento, 
                    System.DateTime expectedWorkHours, 
                    System.DateTime efectiveWorkHours, 
                    System.DateTime extraHours, 
                    string comments, 
                    string resumeInfo, 
                    bool late, 
                    bool fault, 
                    System.DateTime lateTime, 
                    bool existExceptions, 
                    System.DateTime expectedBreakHours, 
                    System.DateTime breakHours, 
                    int absenceHours, 
                    int absenceMinutes, 
                    bool removeBreakHour, 
                    System.DateTime fullEfectiveWorkHours, 
                    System.DateTime hoursPackage, 
                    System.DateTime m1, 
                    System.DateTime m2, 
                    System.DateTime m3, 
                    System.DateTime m4, 
                    System.DateTime m5, 
                    System.DateTime m6, 
                    System.DateTime m7, 
                    System.DateTime m8, 
                    System.DateTime m9, 
                    System.DateTime m10, 
                    System.DateTime extraDiurnal, 
                    System.DateTime extraStart, 
                    System.DateTime extraEnd, 
                    System.DateTime extraNight, 
                    System.DateTime extraNightStart, 
                    System.DateTime extraNightEnd, 
                    System.DateTime weeklyComplementaryBreakUntil8h, 
                    System.DateTime weeklyComplementaryBreakAfter8h, 
                    System.DateTime holidayUntil8h, 
                    System.DateTime holidayAfter8h, 
                    System.DateTime compensatoryBreak, 
                    System.DateTime weeklyRequiredBreakUntil8h, 
                    System.DateTime weeklyRequiredBreakAfter8h, 
                    int meal, 
                    int compensatoryBreakSeconds) {
            this.changeWorkResumeAsync(pToken, idWorkResume, idEmployee, date, idSchedule, onAbsences, onVacancies, changedSchedule, isento, expectedWorkHours, efectiveWorkHours, extraHours, comments, resumeInfo, late, fault, lateTime, existExceptions, expectedBreakHours, breakHours, absenceHours, absenceMinutes, removeBreakHour, fullEfectiveWorkHours, hoursPackage, m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, extraDiurnal, extraStart, extraEnd, extraNight, extraNightStart, extraNightEnd, weeklyComplementaryBreakUntil8h, weeklyComplementaryBreakAfter8h, holidayUntil8h, holidayAfter8h, compensatoryBreak, weeklyRequiredBreakUntil8h, weeklyRequiredBreakAfter8h, meal, compensatoryBreakSeconds, null);
        }
        
        /// <remarks/>
        public void changeWorkResumeAsync(
                    string pToken, 
                    string idWorkResume, 
                    string idEmployee, 
                    System.DateTime date, 
                    string idSchedule, 
                    bool onAbsences, 
                    bool onVacancies, 
                    bool changedSchedule, 
                    bool isento, 
                    System.DateTime expectedWorkHours, 
                    System.DateTime efectiveWorkHours, 
                    System.DateTime extraHours, 
                    string comments, 
                    string resumeInfo, 
                    bool late, 
                    bool fault, 
                    System.DateTime lateTime, 
                    bool existExceptions, 
                    System.DateTime expectedBreakHours, 
                    System.DateTime breakHours, 
                    int absenceHours, 
                    int absenceMinutes, 
                    bool removeBreakHour, 
                    System.DateTime fullEfectiveWorkHours, 
                    System.DateTime hoursPackage, 
                    System.DateTime m1, 
                    System.DateTime m2, 
                    System.DateTime m3, 
                    System.DateTime m4, 
                    System.DateTime m5, 
                    System.DateTime m6, 
                    System.DateTime m7, 
                    System.DateTime m8, 
                    System.DateTime m9, 
                    System.DateTime m10, 
                    System.DateTime extraDiurnal, 
                    System.DateTime extraStart, 
                    System.DateTime extraEnd, 
                    System.DateTime extraNight, 
                    System.DateTime extraNightStart, 
                    System.DateTime extraNightEnd, 
                    System.DateTime weeklyComplementaryBreakUntil8h, 
                    System.DateTime weeklyComplementaryBreakAfter8h, 
                    System.DateTime holidayUntil8h, 
                    System.DateTime holidayAfter8h, 
                    System.DateTime compensatoryBreak, 
                    System.DateTime weeklyRequiredBreakUntil8h, 
                    System.DateTime weeklyRequiredBreakAfter8h, 
                    int meal, 
                    int compensatoryBreakSeconds, 
                    object userState) {
            if ((this.changeWorkResumeOperationCompleted == null)) {
                this.changeWorkResumeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnchangeWorkResumeOperationCompleted);
            }
            this.InvokeAsync("changeWorkResume", new object[] {
                        pToken,
                        idWorkResume,
                        idEmployee,
                        date,
                        idSchedule,
                        onAbsences,
                        onVacancies,
                        changedSchedule,
                        isento,
                        expectedWorkHours,
                        efectiveWorkHours,
                        extraHours,
                        comments,
                        resumeInfo,
                        late,
                        fault,
                        lateTime,
                        existExceptions,
                        expectedBreakHours,
                        breakHours,
                        absenceHours,
                        absenceMinutes,
                        removeBreakHour,
                        fullEfectiveWorkHours,
                        hoursPackage,
                        m1,
                        m2,
                        m3,
                        m4,
                        m5,
                        m6,
                        m7,
                        m8,
                        m9,
                        m10,
                        extraDiurnal,
                        extraStart,
                        extraEnd,
                        extraNight,
                        extraNightStart,
                        extraNightEnd,
                        weeklyComplementaryBreakUntil8h,
                        weeklyComplementaryBreakAfter8h,
                        holidayUntil8h,
                        holidayAfter8h,
                        compensatoryBreak,
                        weeklyRequiredBreakUntil8h,
                        weeklyRequiredBreakAfter8h,
                        meal,
                        compensatoryBreakSeconds}, this.changeWorkResumeOperationCompleted, userState);
        }
        
        private void OnchangeWorkResumeOperationCompleted(object arg) {
            if ((this.changeWorkResumeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.changeWorkResumeCompleted(this, new changeWorkResumeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/changeWorkResumeClosedState", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int changeWorkResumeClosedState(string pToken, string idWorkResume, bool closedSate) {
            object[] results = this.Invoke("changeWorkResumeClosedState", new object[] {
                        pToken,
                        idWorkResume,
                        closedSate});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void changeWorkResumeClosedStateAsync(string pToken, string idWorkResume, bool closedSate) {
            this.changeWorkResumeClosedStateAsync(pToken, idWorkResume, closedSate, null);
        }
        
        /// <remarks/>
        public void changeWorkResumeClosedStateAsync(string pToken, string idWorkResume, bool closedSate, object userState) {
            if ((this.changeWorkResumeClosedStateOperationCompleted == null)) {
                this.changeWorkResumeClosedStateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnchangeWorkResumeClosedStateOperationCompleted);
            }
            this.InvokeAsync("changeWorkResumeClosedState", new object[] {
                        pToken,
                        idWorkResume,
                        closedSate}, this.changeWorkResumeClosedStateOperationCompleted, userState);
        }
        
        private void OnchangeWorkResumeClosedStateOperationCompleted(object arg) {
            if ((this.changeWorkResumeClosedStateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.changeWorkResumeClosedStateCompleted(this, new changeWorkResumeClosedStateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getEmployeeDateResume", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getEmployeeDateResume(string pToken, string idEmployee, System.DateTime date) {
            object[] results = this.Invoke("getEmployeeDateResume", new object[] {
                        pToken,
                        idEmployee,
                        date});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getEmployeeDateResumeAsync(string pToken, string idEmployee, System.DateTime date) {
            this.getEmployeeDateResumeAsync(pToken, idEmployee, date, null);
        }
        
        /// <remarks/>
        public void getEmployeeDateResumeAsync(string pToken, string idEmployee, System.DateTime date, object userState) {
            if ((this.getEmployeeDateResumeOperationCompleted == null)) {
                this.getEmployeeDateResumeOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetEmployeeDateResumeOperationCompleted);
            }
            this.InvokeAsync("getEmployeeDateResume", new object[] {
                        pToken,
                        idEmployee,
                        date}, this.getEmployeeDateResumeOperationCompleted, userState);
        }
        
        private void OngetEmployeeDateResumeOperationCompleted(object arg) {
            if ((this.getEmployeeDateResumeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getEmployeeDateResumeCompleted(this, new getEmployeeDateResumeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getEmployeeDatePeriodResume", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getEmployeeDatePeriodResume(string pToken, string idEmployee, System.DateTime startDate, System.DateTime endDate) {
            object[] results = this.Invoke("getEmployeeDatePeriodResume", new object[] {
                        pToken,
                        idEmployee,
                        startDate,
                        endDate});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getEmployeeDatePeriodResumeAsync(string pToken, string idEmployee, System.DateTime startDate, System.DateTime endDate) {
            this.getEmployeeDatePeriodResumeAsync(pToken, idEmployee, startDate, endDate, null);
        }
        
        /// <remarks/>
        public void getEmployeeDatePeriodResumeAsync(string pToken, string idEmployee, System.DateTime startDate, System.DateTime endDate, object userState) {
            if ((this.getEmployeeDatePeriodResumeOperationCompleted == null)) {
                this.getEmployeeDatePeriodResumeOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetEmployeeDatePeriodResumeOperationCompleted);
            }
            this.InvokeAsync("getEmployeeDatePeriodResume", new object[] {
                        pToken,
                        idEmployee,
                        startDate,
                        endDate}, this.getEmployeeDatePeriodResumeOperationCompleted, userState);
        }
        
        private void OngetEmployeeDatePeriodResumeOperationCompleted(object arg) {
            if ((this.getEmployeeDatePeriodResumeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getEmployeeDatePeriodResumeCompleted(this, new getEmployeeDatePeriodResumeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getDatePeriodResumeByDep", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getDatePeriodResumeByDep(string pToken, string idDepartment, System.DateTime startDate, System.DateTime endDate) {
            object[] results = this.Invoke("getDatePeriodResumeByDep", new object[] {
                        pToken,
                        idDepartment,
                        startDate,
                        endDate});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getDatePeriodResumeByDepAsync(string pToken, string idDepartment, System.DateTime startDate, System.DateTime endDate) {
            this.getDatePeriodResumeByDepAsync(pToken, idDepartment, startDate, endDate, null);
        }
        
        /// <remarks/>
        public void getDatePeriodResumeByDepAsync(string pToken, string idDepartment, System.DateTime startDate, System.DateTime endDate, object userState) {
            if ((this.getDatePeriodResumeByDepOperationCompleted == null)) {
                this.getDatePeriodResumeByDepOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDatePeriodResumeByDepOperationCompleted);
            }
            this.InvokeAsync("getDatePeriodResumeByDep", new object[] {
                        pToken,
                        idDepartment,
                        startDate,
                        endDate}, this.getDatePeriodResumeByDepOperationCompleted, userState);
        }
        
        private void OngetDatePeriodResumeByDepOperationCompleted(object arg) {
            if ((this.getDatePeriodResumeByDepCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDatePeriodResumeByDepCompleted(this, new getDatePeriodResumeByDepCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/addExtraHours", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int addExtraHours(string pToken, System.DateTime date, string quantity, string idTypeExtrahours, string idEmployees) {
            object[] results = this.Invoke("addExtraHours", new object[] {
                        pToken,
                        date,
                        quantity,
                        idTypeExtrahours,
                        idEmployees});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void addExtraHoursAsync(string pToken, System.DateTime date, string quantity, string idTypeExtrahours, string idEmployees) {
            this.addExtraHoursAsync(pToken, date, quantity, idTypeExtrahours, idEmployees, null);
        }
        
        /// <remarks/>
        public void addExtraHoursAsync(string pToken, System.DateTime date, string quantity, string idTypeExtrahours, string idEmployees, object userState) {
            if ((this.addExtraHoursOperationCompleted == null)) {
                this.addExtraHoursOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddExtraHoursOperationCompleted);
            }
            this.InvokeAsync("addExtraHours", new object[] {
                        pToken,
                        date,
                        quantity,
                        idTypeExtrahours,
                        idEmployees}, this.addExtraHoursOperationCompleted, userState);
        }
        
        private void OnaddExtraHoursOperationCompleted(object arg) {
            if ((this.addExtraHoursCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addExtraHoursCompleted(this, new addExtraHoursCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/delExtraHours", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int delExtraHours(string pToken, string idExtraHours) {
            object[] results = this.Invoke("delExtraHours", new object[] {
                        pToken,
                        idExtraHours});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void delExtraHoursAsync(string pToken, string idExtraHours) {
            this.delExtraHoursAsync(pToken, idExtraHours, null);
        }
        
        /// <remarks/>
        public void delExtraHoursAsync(string pToken, string idExtraHours, object userState) {
            if ((this.delExtraHoursOperationCompleted == null)) {
                this.delExtraHoursOperationCompleted = new System.Threading.SendOrPostCallback(this.OndelExtraHoursOperationCompleted);
            }
            this.InvokeAsync("delExtraHours", new object[] {
                        pToken,
                        idExtraHours}, this.delExtraHoursOperationCompleted, userState);
        }
        
        private void OndelExtraHoursOperationCompleted(object arg) {
            if ((this.delExtraHoursCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.delExtraHoursCompleted(this, new delExtraHoursCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/delExtraHoursFromEmployeeOnDate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int delExtraHoursFromEmployeeOnDate(string pToken, string idEmployees, System.DateTime date) {
            object[] results = this.Invoke("delExtraHoursFromEmployeeOnDate", new object[] {
                        pToken,
                        idEmployees,
                        date});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void delExtraHoursFromEmployeeOnDateAsync(string pToken, string idEmployees, System.DateTime date) {
            this.delExtraHoursFromEmployeeOnDateAsync(pToken, idEmployees, date, null);
        }
        
        /// <remarks/>
        public void delExtraHoursFromEmployeeOnDateAsync(string pToken, string idEmployees, System.DateTime date, object userState) {
            if ((this.delExtraHoursFromEmployeeOnDateOperationCompleted == null)) {
                this.delExtraHoursFromEmployeeOnDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OndelExtraHoursFromEmployeeOnDateOperationCompleted);
            }
            this.InvokeAsync("delExtraHoursFromEmployeeOnDate", new object[] {
                        pToken,
                        idEmployees,
                        date}, this.delExtraHoursFromEmployeeOnDateOperationCompleted, userState);
        }
        
        private void OndelExtraHoursFromEmployeeOnDateOperationCompleted(object arg) {
            if ((this.delExtraHoursFromEmployeeOnDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.delExtraHoursFromEmployeeOnDateCompleted(this, new delExtraHoursFromEmployeeOnDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getEmployeeExtraHours", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getEmployeeExtraHours(string pToken, string idEmployees, System.DateTime date) {
            object[] results = this.Invoke("getEmployeeExtraHours", new object[] {
                        pToken,
                        idEmployees,
                        date});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getEmployeeExtraHoursAsync(string pToken, string idEmployees, System.DateTime date) {
            this.getEmployeeExtraHoursAsync(pToken, idEmployees, date, null);
        }
        
        /// <remarks/>
        public void getEmployeeExtraHoursAsync(string pToken, string idEmployees, System.DateTime date, object userState) {
            if ((this.getEmployeeExtraHoursOperationCompleted == null)) {
                this.getEmployeeExtraHoursOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetEmployeeExtraHoursOperationCompleted);
            }
            this.InvokeAsync("getEmployeeExtraHours", new object[] {
                        pToken,
                        idEmployees,
                        date}, this.getEmployeeExtraHoursOperationCompleted, userState);
        }
        
        private void OngetEmployeeExtraHoursOperationCompleted(object arg) {
            if ((this.getEmployeeExtraHoursCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getEmployeeExtraHoursCompleted(this, new getEmployeeExtraHoursCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getEmployeeDatePeriodExtraHours", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getEmployeeDatePeriodExtraHours(string pToken, string idEmployees, System.DateTime startDate, System.DateTime endDate) {
            object[] results = this.Invoke("getEmployeeDatePeriodExtraHours", new object[] {
                        pToken,
                        idEmployees,
                        startDate,
                        endDate});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getEmployeeDatePeriodExtraHoursAsync(string pToken, string idEmployees, System.DateTime startDate, System.DateTime endDate) {
            this.getEmployeeDatePeriodExtraHoursAsync(pToken, idEmployees, startDate, endDate, null);
        }
        
        /// <remarks/>
        public void getEmployeeDatePeriodExtraHoursAsync(string pToken, string idEmployees, System.DateTime startDate, System.DateTime endDate, object userState) {
            if ((this.getEmployeeDatePeriodExtraHoursOperationCompleted == null)) {
                this.getEmployeeDatePeriodExtraHoursOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetEmployeeDatePeriodExtraHoursOperationCompleted);
            }
            this.InvokeAsync("getEmployeeDatePeriodExtraHours", new object[] {
                        pToken,
                        idEmployees,
                        startDate,
                        endDate}, this.getEmployeeDatePeriodExtraHoursOperationCompleted, userState);
        }
        
        private void OngetEmployeeDatePeriodExtraHoursOperationCompleted(object arg) {
            if ((this.getEmployeeDatePeriodExtraHoursCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getEmployeeDatePeriodExtraHoursCompleted(this, new getEmployeeDatePeriodExtraHoursCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getEmployeeDatePeriodExtraHoursFromWorkResume", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getEmployeeDatePeriodExtraHoursFromWorkResume(string pToken, string idEmployees, System.DateTime startDate, System.DateTime endDate) {
            object[] results = this.Invoke("getEmployeeDatePeriodExtraHoursFromWorkResume", new object[] {
                        pToken,
                        idEmployees,
                        startDate,
                        endDate});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getEmployeeDatePeriodExtraHoursFromWorkResumeAsync(string pToken, string idEmployees, System.DateTime startDate, System.DateTime endDate) {
            this.getEmployeeDatePeriodExtraHoursFromWorkResumeAsync(pToken, idEmployees, startDate, endDate, null);
        }
        
        /// <remarks/>
        public void getEmployeeDatePeriodExtraHoursFromWorkResumeAsync(string pToken, string idEmployees, System.DateTime startDate, System.DateTime endDate, object userState) {
            if ((this.getEmployeeDatePeriodExtraHoursFromWorkResumeOperationCompleted == null)) {
                this.getEmployeeDatePeriodExtraHoursFromWorkResumeOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetEmployeeDatePeriodExtraHoursFromWorkResumeOperationCompleted);
            }
            this.InvokeAsync("getEmployeeDatePeriodExtraHoursFromWorkResume", new object[] {
                        pToken,
                        idEmployees,
                        startDate,
                        endDate}, this.getEmployeeDatePeriodExtraHoursFromWorkResumeOperationCompleted, userState);
        }
        
        private void OngetEmployeeDatePeriodExtraHoursFromWorkResumeOperationCompleted(object arg) {
            if ((this.getEmployeeDatePeriodExtraHoursFromWorkResumeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getEmployeeDatePeriodExtraHoursFromWorkResumeCompleted(this, new getEmployeeDatePeriodExtraHoursFromWorkResumeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/addScheduleSequence", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string addScheduleSequence(string pToken, string code, string name, int numberDays, bool enable) {
            object[] results = this.Invoke("addScheduleSequence", new object[] {
                        pToken,
                        code,
                        name,
                        numberDays,
                        enable});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void addScheduleSequenceAsync(string pToken, string code, string name, int numberDays, bool enable) {
            this.addScheduleSequenceAsync(pToken, code, name, numberDays, enable, null);
        }
        
        /// <remarks/>
        public void addScheduleSequenceAsync(string pToken, string code, string name, int numberDays, bool enable, object userState) {
            if ((this.addScheduleSequenceOperationCompleted == null)) {
                this.addScheduleSequenceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddScheduleSequenceOperationCompleted);
            }
            this.InvokeAsync("addScheduleSequence", new object[] {
                        pToken,
                        code,
                        name,
                        numberDays,
                        enable}, this.addScheduleSequenceOperationCompleted, userState);
        }
        
        private void OnaddScheduleSequenceOperationCompleted(object arg) {
            if ((this.addScheduleSequenceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addScheduleSequenceCompleted(this, new addScheduleSequenceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/updateScheduleSequence", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int updateScheduleSequence(string pToken, string idScheduleSequence, string code, string name, int numberDays, bool enable) {
            object[] results = this.Invoke("updateScheduleSequence", new object[] {
                        pToken,
                        idScheduleSequence,
                        code,
                        name,
                        numberDays,
                        enable});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void updateScheduleSequenceAsync(string pToken, string idScheduleSequence, string code, string name, int numberDays, bool enable) {
            this.updateScheduleSequenceAsync(pToken, idScheduleSequence, code, name, numberDays, enable, null);
        }
        
        /// <remarks/>
        public void updateScheduleSequenceAsync(string pToken, string idScheduleSequence, string code, string name, int numberDays, bool enable, object userState) {
            if ((this.updateScheduleSequenceOperationCompleted == null)) {
                this.updateScheduleSequenceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateScheduleSequenceOperationCompleted);
            }
            this.InvokeAsync("updateScheduleSequence", new object[] {
                        pToken,
                        idScheduleSequence,
                        code,
                        name,
                        numberDays,
                        enable}, this.updateScheduleSequenceOperationCompleted, userState);
        }
        
        private void OnupdateScheduleSequenceOperationCompleted(object arg) {
            if ((this.updateScheduleSequenceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateScheduleSequenceCompleted(this, new updateScheduleSequenceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/delScheduleSequence", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int delScheduleSequence(string pToken, string idScheduleSequence) {
            object[] results = this.Invoke("delScheduleSequence", new object[] {
                        pToken,
                        idScheduleSequence});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void delScheduleSequenceAsync(string pToken, string idScheduleSequence) {
            this.delScheduleSequenceAsync(pToken, idScheduleSequence, null);
        }
        
        /// <remarks/>
        public void delScheduleSequenceAsync(string pToken, string idScheduleSequence, object userState) {
            if ((this.delScheduleSequenceOperationCompleted == null)) {
                this.delScheduleSequenceOperationCompleted = new System.Threading.SendOrPostCallback(this.OndelScheduleSequenceOperationCompleted);
            }
            this.InvokeAsync("delScheduleSequence", new object[] {
                        pToken,
                        idScheduleSequence}, this.delScheduleSequenceOperationCompleted, userState);
        }
        
        private void OndelScheduleSequenceOperationCompleted(object arg) {
            if ((this.delScheduleSequenceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.delScheduleSequenceCompleted(this, new delScheduleSequenceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getAllScheduleSequence", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getAllScheduleSequence(string pToken) {
            object[] results = this.Invoke("getAllScheduleSequence", new object[] {
                        pToken});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getAllScheduleSequenceAsync(string pToken) {
            this.getAllScheduleSequenceAsync(pToken, null);
        }
        
        /// <remarks/>
        public void getAllScheduleSequenceAsync(string pToken, object userState) {
            if ((this.getAllScheduleSequenceOperationCompleted == null)) {
                this.getAllScheduleSequenceOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllScheduleSequenceOperationCompleted);
            }
            this.InvokeAsync("getAllScheduleSequence", new object[] {
                        pToken}, this.getAllScheduleSequenceOperationCompleted, userState);
        }
        
        private void OngetAllScheduleSequenceOperationCompleted(object arg) {
            if ((this.getAllScheduleSequenceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllScheduleSequenceCompleted(this, new getAllScheduleSequenceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getScheduleSequence", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getScheduleSequence(string pToken, string idScheduleSequence) {
            object[] results = this.Invoke("getScheduleSequence", new object[] {
                        pToken,
                        idScheduleSequence});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getScheduleSequenceAsync(string pToken, string idScheduleSequence) {
            this.getScheduleSequenceAsync(pToken, idScheduleSequence, null);
        }
        
        /// <remarks/>
        public void getScheduleSequenceAsync(string pToken, string idScheduleSequence, object userState) {
            if ((this.getScheduleSequenceOperationCompleted == null)) {
                this.getScheduleSequenceOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetScheduleSequenceOperationCompleted);
            }
            this.InvokeAsync("getScheduleSequence", new object[] {
                        pToken,
                        idScheduleSequence}, this.getScheduleSequenceOperationCompleted, userState);
        }
        
        private void OngetScheduleSequenceOperationCompleted(object arg) {
            if ((this.getScheduleSequenceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getScheduleSequenceCompleted(this, new getScheduleSequenceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/addSSElement", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string addSSElement(string pToken, string idScheduleSequence, int number, string idSchedule) {
            object[] results = this.Invoke("addSSElement", new object[] {
                        pToken,
                        idScheduleSequence,
                        number,
                        idSchedule});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void addSSElementAsync(string pToken, string idScheduleSequence, int number, string idSchedule) {
            this.addSSElementAsync(pToken, idScheduleSequence, number, idSchedule, null);
        }
        
        /// <remarks/>
        public void addSSElementAsync(string pToken, string idScheduleSequence, int number, string idSchedule, object userState) {
            if ((this.addSSElementOperationCompleted == null)) {
                this.addSSElementOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddSSElementOperationCompleted);
            }
            this.InvokeAsync("addSSElement", new object[] {
                        pToken,
                        idScheduleSequence,
                        number,
                        idSchedule}, this.addSSElementOperationCompleted, userState);
        }
        
        private void OnaddSSElementOperationCompleted(object arg) {
            if ((this.addSSElementCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addSSElementCompleted(this, new addSSElementCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/updateSSElement", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int updateSSElement(string pToken, string idSSElement, string idScheduleSequence, int number, string idSchedule) {
            object[] results = this.Invoke("updateSSElement", new object[] {
                        pToken,
                        idSSElement,
                        idScheduleSequence,
                        number,
                        idSchedule});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void updateSSElementAsync(string pToken, string idSSElement, string idScheduleSequence, int number, string idSchedule) {
            this.updateSSElementAsync(pToken, idSSElement, idScheduleSequence, number, idSchedule, null);
        }
        
        /// <remarks/>
        public void updateSSElementAsync(string pToken, string idSSElement, string idScheduleSequence, int number, string idSchedule, object userState) {
            if ((this.updateSSElementOperationCompleted == null)) {
                this.updateSSElementOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateSSElementOperationCompleted);
            }
            this.InvokeAsync("updateSSElement", new object[] {
                        pToken,
                        idSSElement,
                        idScheduleSequence,
                        number,
                        idSchedule}, this.updateSSElementOperationCompleted, userState);
        }
        
        private void OnupdateSSElementOperationCompleted(object arg) {
            if ((this.updateSSElementCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateSSElementCompleted(this, new updateSSElementCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/delSSElement", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int delSSElement(string pToken, string idSSElement) {
            object[] results = this.Invoke("delSSElement", new object[] {
                        pToken,
                        idSSElement});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void delSSElementAsync(string pToken, string idSSElement) {
            this.delSSElementAsync(pToken, idSSElement, null);
        }
        
        /// <remarks/>
        public void delSSElementAsync(string pToken, string idSSElement, object userState) {
            if ((this.delSSElementOperationCompleted == null)) {
                this.delSSElementOperationCompleted = new System.Threading.SendOrPostCallback(this.OndelSSElementOperationCompleted);
            }
            this.InvokeAsync("delSSElement", new object[] {
                        pToken,
                        idSSElement}, this.delSSElementOperationCompleted, userState);
        }
        
        private void OndelSSElementOperationCompleted(object arg) {
            if ((this.delSSElementCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.delSSElementCompleted(this, new delSSElementCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getAllSSElementFromScheduleSequence", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getAllSSElementFromScheduleSequence(string pToken, string idScheduleSequence) {
            object[] results = this.Invoke("getAllSSElementFromScheduleSequence", new object[] {
                        pToken,
                        idScheduleSequence});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getAllSSElementFromScheduleSequenceAsync(string pToken, string idScheduleSequence) {
            this.getAllSSElementFromScheduleSequenceAsync(pToken, idScheduleSequence, null);
        }
        
        /// <remarks/>
        public void getAllSSElementFromScheduleSequenceAsync(string pToken, string idScheduleSequence, object userState) {
            if ((this.getAllSSElementFromScheduleSequenceOperationCompleted == null)) {
                this.getAllSSElementFromScheduleSequenceOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllSSElementFromScheduleSequenceOperationCompleted);
            }
            this.InvokeAsync("getAllSSElementFromScheduleSequence", new object[] {
                        pToken,
                        idScheduleSequence}, this.getAllSSElementFromScheduleSequenceOperationCompleted, userState);
        }
        
        private void OngetAllSSElementFromScheduleSequenceOperationCompleted(object arg) {
            if ((this.getAllSSElementFromScheduleSequenceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllSSElementFromScheduleSequenceCompleted(this, new getAllSSElementFromScheduleSequenceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/setMonthScheduleIdScheduleInDay", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int setMonthScheduleIdScheduleInDay(string pToken, string idMonthSchedule, int day, string idSchedule) {
            object[] results = this.Invoke("setMonthScheduleIdScheduleInDay", new object[] {
                        pToken,
                        idMonthSchedule,
                        day,
                        idSchedule});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void setMonthScheduleIdScheduleInDayAsync(string pToken, string idMonthSchedule, int day, string idSchedule) {
            this.setMonthScheduleIdScheduleInDayAsync(pToken, idMonthSchedule, day, idSchedule, null);
        }
        
        /// <remarks/>
        public void setMonthScheduleIdScheduleInDayAsync(string pToken, string idMonthSchedule, int day, string idSchedule, object userState) {
            if ((this.setMonthScheduleIdScheduleInDayOperationCompleted == null)) {
                this.setMonthScheduleIdScheduleInDayOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetMonthScheduleIdScheduleInDayOperationCompleted);
            }
            this.InvokeAsync("setMonthScheduleIdScheduleInDay", new object[] {
                        pToken,
                        idMonthSchedule,
                        day,
                        idSchedule}, this.setMonthScheduleIdScheduleInDayOperationCompleted, userState);
        }
        
        private void OnsetMonthScheduleIdScheduleInDayOperationCompleted(object arg) {
            if ((this.setMonthScheduleIdScheduleInDayCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setMonthScheduleIdScheduleInDayCompleted(this, new setMonthScheduleIdScheduleInDayCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getProfileIdScheduleAndIdMonthScheduleFromDate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getProfileIdScheduleAndIdMonthScheduleFromDate(string pToken, string idProfile, System.DateTime date) {
            object[] results = this.Invoke("getProfileIdScheduleAndIdMonthScheduleFromDate", new object[] {
                        pToken,
                        idProfile,
                        date});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getProfileIdScheduleAndIdMonthScheduleFromDateAsync(string pToken, string idProfile, System.DateTime date) {
            this.getProfileIdScheduleAndIdMonthScheduleFromDateAsync(pToken, idProfile, date, null);
        }
        
        /// <remarks/>
        public void getProfileIdScheduleAndIdMonthScheduleFromDateAsync(string pToken, string idProfile, System.DateTime date, object userState) {
            if ((this.getProfileIdScheduleAndIdMonthScheduleFromDateOperationCompleted == null)) {
                this.getProfileIdScheduleAndIdMonthScheduleFromDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetProfileIdScheduleAndIdMonthScheduleFromDateOperationCompleted);
            }
            this.InvokeAsync("getProfileIdScheduleAndIdMonthScheduleFromDate", new object[] {
                        pToken,
                        idProfile,
                        date}, this.getProfileIdScheduleAndIdMonthScheduleFromDateOperationCompleted, userState);
        }
        
        private void OngetProfileIdScheduleAndIdMonthScheduleFromDateOperationCompleted(object arg) {
            if ((this.getProfileIdScheduleAndIdMonthScheduleFromDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getProfileIdScheduleAndIdMonthScheduleFromDateCompleted(this, new getProfileIdScheduleAndIdMonthScheduleFromDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getPcMovementsLogs", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getPcMovementsLogs(string pToken, string idDevice) {
            object[] results = this.Invoke("getPcMovementsLogs", new object[] {
                        pToken,
                        idDevice});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getPcMovementsLogsAsync(string pToken, string idDevice) {
            this.getPcMovementsLogsAsync(pToken, idDevice, null);
        }
        
        /// <remarks/>
        public void getPcMovementsLogsAsync(string pToken, string idDevice, object userState) {
            if ((this.getPcMovementsLogsOperationCompleted == null)) {
                this.getPcMovementsLogsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetPcMovementsLogsOperationCompleted);
            }
            this.InvokeAsync("getPcMovementsLogs", new object[] {
                        pToken,
                        idDevice}, this.getPcMovementsLogsOperationCompleted, userState);
        }
        
        private void OngetPcMovementsLogsOperationCompleted(object arg) {
            if ((this.getPcMovementsLogsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getPcMovementsLogsCompleted(this, new getPcMovementsLogsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/addPcMovimentLog", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int addPcMovimentLog(string pToken, System.DateTime hora, int movementType, string idDevice, int enrollNumber, string obs, string activeDirName) {
            object[] results = this.Invoke("addPcMovimentLog", new object[] {
                        pToken,
                        hora,
                        movementType,
                        idDevice,
                        enrollNumber,
                        obs,
                        activeDirName});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void addPcMovimentLogAsync(string pToken, System.DateTime hora, int movementType, string idDevice, int enrollNumber, string obs, string activeDirName) {
            this.addPcMovimentLogAsync(pToken, hora, movementType, idDevice, enrollNumber, obs, activeDirName, null);
        }
        
        /// <remarks/>
        public void addPcMovimentLogAsync(string pToken, System.DateTime hora, int movementType, string idDevice, int enrollNumber, string obs, string activeDirName, object userState) {
            if ((this.addPcMovimentLogOperationCompleted == null)) {
                this.addPcMovimentLogOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddPcMovimentLogOperationCompleted);
            }
            this.InvokeAsync("addPcMovimentLog", new object[] {
                        pToken,
                        hora,
                        movementType,
                        idDevice,
                        enrollNumber,
                        obs,
                        activeDirName}, this.addPcMovimentLogOperationCompleted, userState);
        }
        
        private void OnaddPcMovimentLogOperationCompleted(object arg) {
            if ((this.addPcMovimentLogCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addPcMovimentLogCompleted(this, new addPcMovimentLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/setImportedPcMov", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int setImportedPcMov(string pToken, string idPcMovementsTemp) {
            object[] results = this.Invoke("setImportedPcMov", new object[] {
                        pToken,
                        idPcMovementsTemp});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void setImportedPcMovAsync(string pToken, string idPcMovementsTemp) {
            this.setImportedPcMovAsync(pToken, idPcMovementsTemp, null);
        }
        
        /// <remarks/>
        public void setImportedPcMovAsync(string pToken, string idPcMovementsTemp, object userState) {
            if ((this.setImportedPcMovOperationCompleted == null)) {
                this.setImportedPcMovOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetImportedPcMovOperationCompleted);
            }
            this.InvokeAsync("setImportedPcMov", new object[] {
                        pToken,
                        idPcMovementsTemp}, this.setImportedPcMovOperationCompleted, userState);
        }
        
        private void OnsetImportedPcMovOperationCompleted(object arg) {
            if ((this.setImportedPcMovCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setImportedPcMovCompleted(this, new setImportedPcMovCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getEnrollNumber", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int getEnrollNumber(string pToken, string activeDirName) {
            object[] results = this.Invoke("getEnrollNumber", new object[] {
                        pToken,
                        activeDirName});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void getEnrollNumberAsync(string pToken, string activeDirName) {
            this.getEnrollNumberAsync(pToken, activeDirName, null);
        }
        
        /// <remarks/>
        public void getEnrollNumberAsync(string pToken, string activeDirName, object userState) {
            if ((this.getEnrollNumberOperationCompleted == null)) {
                this.getEnrollNumberOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetEnrollNumberOperationCompleted);
            }
            this.InvokeAsync("getEnrollNumber", new object[] {
                        pToken,
                        activeDirName}, this.getEnrollNumberOperationCompleted, userState);
        }
        
        private void OngetEnrollNumberOperationCompleted(object arg) {
            if ((this.getEnrollNumberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getEnrollNumberCompleted(this, new getEnrollNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getIdDeviceByCode", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getIdDeviceByCode(string pToken, string pcId) {
            object[] results = this.Invoke("getIdDeviceByCode", new object[] {
                        pToken,
                        pcId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getIdDeviceByCodeAsync(string pToken, string pcId) {
            this.getIdDeviceByCodeAsync(pToken, pcId, null);
        }
        
        /// <remarks/>
        public void getIdDeviceByCodeAsync(string pToken, string pcId, object userState) {
            if ((this.getIdDeviceByCodeOperationCompleted == null)) {
                this.getIdDeviceByCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetIdDeviceByCodeOperationCompleted);
            }
            this.InvokeAsync("getIdDeviceByCode", new object[] {
                        pToken,
                        pcId}, this.getIdDeviceByCodeOperationCompleted, userState);
        }
        
        private void OngetIdDeviceByCodeOperationCompleted(object arg) {
            if ((this.getIdDeviceByCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getIdDeviceByCodeCompleted(this, new getIdDeviceByCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getAllDevices", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getAllDevices(string pToken) {
            object[] results = this.Invoke("getAllDevices", new object[] {
                        pToken});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getAllDevicesAsync(string pToken) {
            this.getAllDevicesAsync(pToken, null);
        }
        
        /// <remarks/>
        public void getAllDevicesAsync(string pToken, object userState) {
            if ((this.getAllDevicesOperationCompleted == null)) {
                this.getAllDevicesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllDevicesOperationCompleted);
            }
            this.InvokeAsync("getAllDevices", new object[] {
                        pToken}, this.getAllDevicesOperationCompleted, userState);
        }
        
        private void OngetAllDevicesOperationCompleted(object arg) {
            if ((this.getAllDevicesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllDevicesCompleted(this, new getAllDevicesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getIpServer", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getIpServer(string pToken) {
            object[] results = this.Invoke("getIpServer", new object[] {
                        pToken});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getIpServerAsync(string pToken) {
            this.getIpServerAsync(pToken, null);
        }
        
        /// <remarks/>
        public void getIpServerAsync(string pToken, object userState) {
            if ((this.getIpServerOperationCompleted == null)) {
                this.getIpServerOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetIpServerOperationCompleted);
            }
            this.InvokeAsync("getIpServer", new object[] {
                        pToken}, this.getIpServerOperationCompleted, userState);
        }
        
        private void OngetIpServerOperationCompleted(object arg) {
            if ((this.getIpServerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getIpServerCompleted(this, new getIpServerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/addDevices", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string addDevices(
                    string pToken, 
                    string name, 
                    string location, 
                    bool ethernet, 
                    int password, 
                    string ipAddress, 
                    int port, 
                    int portNumber, 
                    int baundRate, 
                    string type, 
                    bool enable, 
                    int number, 
                    bool isGPRS, 
                    int gprsPort, 
                    bool importFingerPrints, 
                    int timerInterval, 
                    string serialNumber, 
                    string code, 
                    int enrollNumber, 
                    int versionFingerPrint, 
                    int deviceTimeZone) {
            object[] results = this.Invoke("addDevices", new object[] {
                        pToken,
                        name,
                        location,
                        ethernet,
                        password,
                        ipAddress,
                        port,
                        portNumber,
                        baundRate,
                        type,
                        enable,
                        number,
                        isGPRS,
                        gprsPort,
                        importFingerPrints,
                        timerInterval,
                        serialNumber,
                        code,
                        enrollNumber,
                        versionFingerPrint,
                        deviceTimeZone});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void addDevicesAsync(
                    string pToken, 
                    string name, 
                    string location, 
                    bool ethernet, 
                    int password, 
                    string ipAddress, 
                    int port, 
                    int portNumber, 
                    int baundRate, 
                    string type, 
                    bool enable, 
                    int number, 
                    bool isGPRS, 
                    int gprsPort, 
                    bool importFingerPrints, 
                    int timerInterval, 
                    string serialNumber, 
                    string code, 
                    int enrollNumber, 
                    int versionFingerPrint, 
                    int deviceTimeZone) {
            this.addDevicesAsync(pToken, name, location, ethernet, password, ipAddress, port, portNumber, baundRate, type, enable, number, isGPRS, gprsPort, importFingerPrints, timerInterval, serialNumber, code, enrollNumber, versionFingerPrint, deviceTimeZone, null);
        }
        
        /// <remarks/>
        public void addDevicesAsync(
                    string pToken, 
                    string name, 
                    string location, 
                    bool ethernet, 
                    int password, 
                    string ipAddress, 
                    int port, 
                    int portNumber, 
                    int baundRate, 
                    string type, 
                    bool enable, 
                    int number, 
                    bool isGPRS, 
                    int gprsPort, 
                    bool importFingerPrints, 
                    int timerInterval, 
                    string serialNumber, 
                    string code, 
                    int enrollNumber, 
                    int versionFingerPrint, 
                    int deviceTimeZone, 
                    object userState) {
            if ((this.addDevicesOperationCompleted == null)) {
                this.addDevicesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddDevicesOperationCompleted);
            }
            this.InvokeAsync("addDevices", new object[] {
                        pToken,
                        name,
                        location,
                        ethernet,
                        password,
                        ipAddress,
                        port,
                        portNumber,
                        baundRate,
                        type,
                        enable,
                        number,
                        isGPRS,
                        gprsPort,
                        importFingerPrints,
                        timerInterval,
                        serialNumber,
                        code,
                        enrollNumber,
                        versionFingerPrint,
                        deviceTimeZone}, this.addDevicesOperationCompleted, userState);
        }
        
        private void OnaddDevicesOperationCompleted(object arg) {
            if ((this.addDevicesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addDevicesCompleted(this, new addDevicesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/changeDevices", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int changeDevices(
                    string pToken, 
                    string idDevice, 
                    string name, 
                    string location, 
                    bool ethernet, 
                    int password, 
                    string ipAddress, 
                    int port, 
                    int portNumber, 
                    int baundRate, 
                    string type, 
                    bool enable, 
                    int number, 
                    bool isGPRS, 
                    int gprsPort, 
                    bool importFingerPrints, 
                    int timerInterval, 
                    string serialNumber, 
                    string code, 
                    int enrollNumber, 
                    int versionFingerPrint, 
                    int deviceTimeZone) {
            object[] results = this.Invoke("changeDevices", new object[] {
                        pToken,
                        idDevice,
                        name,
                        location,
                        ethernet,
                        password,
                        ipAddress,
                        port,
                        portNumber,
                        baundRate,
                        type,
                        enable,
                        number,
                        isGPRS,
                        gprsPort,
                        importFingerPrints,
                        timerInterval,
                        serialNumber,
                        code,
                        enrollNumber,
                        versionFingerPrint,
                        deviceTimeZone});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void changeDevicesAsync(
                    string pToken, 
                    string idDevice, 
                    string name, 
                    string location, 
                    bool ethernet, 
                    int password, 
                    string ipAddress, 
                    int port, 
                    int portNumber, 
                    int baundRate, 
                    string type, 
                    bool enable, 
                    int number, 
                    bool isGPRS, 
                    int gprsPort, 
                    bool importFingerPrints, 
                    int timerInterval, 
                    string serialNumber, 
                    string code, 
                    int enrollNumber, 
                    int versionFingerPrint, 
                    int deviceTimeZone) {
            this.changeDevicesAsync(pToken, idDevice, name, location, ethernet, password, ipAddress, port, portNumber, baundRate, type, enable, number, isGPRS, gprsPort, importFingerPrints, timerInterval, serialNumber, code, enrollNumber, versionFingerPrint, deviceTimeZone, null);
        }
        
        /// <remarks/>
        public void changeDevicesAsync(
                    string pToken, 
                    string idDevice, 
                    string name, 
                    string location, 
                    bool ethernet, 
                    int password, 
                    string ipAddress, 
                    int port, 
                    int portNumber, 
                    int baundRate, 
                    string type, 
                    bool enable, 
                    int number, 
                    bool isGPRS, 
                    int gprsPort, 
                    bool importFingerPrints, 
                    int timerInterval, 
                    string serialNumber, 
                    string code, 
                    int enrollNumber, 
                    int versionFingerPrint, 
                    int deviceTimeZone, 
                    object userState) {
            if ((this.changeDevicesOperationCompleted == null)) {
                this.changeDevicesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnchangeDevicesOperationCompleted);
            }
            this.InvokeAsync("changeDevices", new object[] {
                        pToken,
                        idDevice,
                        name,
                        location,
                        ethernet,
                        password,
                        ipAddress,
                        port,
                        portNumber,
                        baundRate,
                        type,
                        enable,
                        number,
                        isGPRS,
                        gprsPort,
                        importFingerPrints,
                        timerInterval,
                        serialNumber,
                        code,
                        enrollNumber,
                        versionFingerPrint,
                        deviceTimeZone}, this.changeDevicesOperationCompleted, userState);
        }
        
        private void OnchangeDevicesOperationCompleted(object arg) {
            if ((this.changeDevicesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.changeDevicesCompleted(this, new changeDevicesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getIdDeviceFromMachineNumber", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getIdDeviceFromMachineNumber(string pToken, int machineNumber) {
            object[] results = this.Invoke("getIdDeviceFromMachineNumber", new object[] {
                        pToken,
                        machineNumber});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getIdDeviceFromMachineNumberAsync(string pToken, int machineNumber) {
            this.getIdDeviceFromMachineNumberAsync(pToken, machineNumber, null);
        }
        
        /// <remarks/>
        public void getIdDeviceFromMachineNumberAsync(string pToken, int machineNumber, object userState) {
            if ((this.getIdDeviceFromMachineNumberOperationCompleted == null)) {
                this.getIdDeviceFromMachineNumberOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetIdDeviceFromMachineNumberOperationCompleted);
            }
            this.InvokeAsync("getIdDeviceFromMachineNumber", new object[] {
                        pToken,
                        machineNumber}, this.getIdDeviceFromMachineNumberOperationCompleted, userState);
        }
        
        private void OngetIdDeviceFromMachineNumberOperationCompleted(object arg) {
            if ((this.getIdDeviceFromMachineNumberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getIdDeviceFromMachineNumberCompleted(this, new getIdDeviceFromMachineNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getIpDeviceFromIdDevice", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getIpDeviceFromIdDevice(string pToken, string idDevice) {
            object[] results = this.Invoke("getIpDeviceFromIdDevice", new object[] {
                        pToken,
                        idDevice});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getIpDeviceFromIdDeviceAsync(string pToken, string idDevice) {
            this.getIpDeviceFromIdDeviceAsync(pToken, idDevice, null);
        }
        
        /// <remarks/>
        public void getIpDeviceFromIdDeviceAsync(string pToken, string idDevice, object userState) {
            if ((this.getIpDeviceFromIdDeviceOperationCompleted == null)) {
                this.getIpDeviceFromIdDeviceOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetIpDeviceFromIdDeviceOperationCompleted);
            }
            this.InvokeAsync("getIpDeviceFromIdDevice", new object[] {
                        pToken,
                        idDevice}, this.getIpDeviceFromIdDeviceOperationCompleted, userState);
        }
        
        private void OngetIpDeviceFromIdDeviceOperationCompleted(object arg) {
            if ((this.getIpDeviceFromIdDeviceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getIpDeviceFromIdDeviceCompleted(this, new getIpDeviceFromIdDeviceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/delDevice", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int delDevice(string pToken, string idDevice) {
            object[] results = this.Invoke("delDevice", new object[] {
                        pToken,
                        idDevice});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void delDeviceAsync(string pToken, string idDevice) {
            this.delDeviceAsync(pToken, idDevice, null);
        }
        
        /// <remarks/>
        public void delDeviceAsync(string pToken, string idDevice, object userState) {
            if ((this.delDeviceOperationCompleted == null)) {
                this.delDeviceOperationCompleted = new System.Threading.SendOrPostCallback(this.OndelDeviceOperationCompleted);
            }
            this.InvokeAsync("delDevice", new object[] {
                        pToken,
                        idDevice}, this.delDeviceOperationCompleted, userState);
        }
        
        private void OndelDeviceOperationCompleted(object arg) {
            if ((this.delDeviceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.delDeviceCompleted(this, new delDeviceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/addDeviceEmployees", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int addDeviceEmployees(string pToken, string idEmployee, string name, string idDepartment, string idDevice, bool password, bool rfidCard, bool fingerPrint, bool enable, int enrollNumber) {
            object[] results = this.Invoke("addDeviceEmployees", new object[] {
                        pToken,
                        idEmployee,
                        name,
                        idDepartment,
                        idDevice,
                        password,
                        rfidCard,
                        fingerPrint,
                        enable,
                        enrollNumber});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void addDeviceEmployeesAsync(string pToken, string idEmployee, string name, string idDepartment, string idDevice, bool password, bool rfidCard, bool fingerPrint, bool enable, int enrollNumber) {
            this.addDeviceEmployeesAsync(pToken, idEmployee, name, idDepartment, idDevice, password, rfidCard, fingerPrint, enable, enrollNumber, null);
        }
        
        /// <remarks/>
        public void addDeviceEmployeesAsync(string pToken, string idEmployee, string name, string idDepartment, string idDevice, bool password, bool rfidCard, bool fingerPrint, bool enable, int enrollNumber, object userState) {
            if ((this.addDeviceEmployeesOperationCompleted == null)) {
                this.addDeviceEmployeesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddDeviceEmployeesOperationCompleted);
            }
            this.InvokeAsync("addDeviceEmployees", new object[] {
                        pToken,
                        idEmployee,
                        name,
                        idDepartment,
                        idDevice,
                        password,
                        rfidCard,
                        fingerPrint,
                        enable,
                        enrollNumber}, this.addDeviceEmployeesOperationCompleted, userState);
        }
        
        private void OnaddDeviceEmployeesOperationCompleted(object arg) {
            if ((this.addDeviceEmployeesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addDeviceEmployeesCompleted(this, new addDeviceEmployeesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/changeDeviceEmployees", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int changeDeviceEmployees(string pToken, string idDeviceEmployees, string idEmployee, string name, string idDepartment, string idDevice, bool password, bool rfidCard, bool fingerPrint, bool enable, int enrollNumber) {
            object[] results = this.Invoke("changeDeviceEmployees", new object[] {
                        pToken,
                        idDeviceEmployees,
                        idEmployee,
                        name,
                        idDepartment,
                        idDevice,
                        password,
                        rfidCard,
                        fingerPrint,
                        enable,
                        enrollNumber});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void changeDeviceEmployeesAsync(string pToken, string idDeviceEmployees, string idEmployee, string name, string idDepartment, string idDevice, bool password, bool rfidCard, bool fingerPrint, bool enable, int enrollNumber) {
            this.changeDeviceEmployeesAsync(pToken, idDeviceEmployees, idEmployee, name, idDepartment, idDevice, password, rfidCard, fingerPrint, enable, enrollNumber, null);
        }
        
        /// <remarks/>
        public void changeDeviceEmployeesAsync(string pToken, string idDeviceEmployees, string idEmployee, string name, string idDepartment, string idDevice, bool password, bool rfidCard, bool fingerPrint, bool enable, int enrollNumber, object userState) {
            if ((this.changeDeviceEmployeesOperationCompleted == null)) {
                this.changeDeviceEmployeesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnchangeDeviceEmployeesOperationCompleted);
            }
            this.InvokeAsync("changeDeviceEmployees", new object[] {
                        pToken,
                        idDeviceEmployees,
                        idEmployee,
                        name,
                        idDepartment,
                        idDevice,
                        password,
                        rfidCard,
                        fingerPrint,
                        enable,
                        enrollNumber}, this.changeDeviceEmployeesOperationCompleted, userState);
        }
        
        private void OnchangeDeviceEmployeesOperationCompleted(object arg) {
            if ((this.changeDeviceEmployeesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.changeDeviceEmployeesCompleted(this, new changeDeviceEmployeesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/delDeviceEmployees", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int delDeviceEmployees(string pToken, string idDeviceEmployees) {
            object[] results = this.Invoke("delDeviceEmployees", new object[] {
                        pToken,
                        idDeviceEmployees});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void delDeviceEmployeesAsync(string pToken, string idDeviceEmployees) {
            this.delDeviceEmployeesAsync(pToken, idDeviceEmployees, null);
        }
        
        /// <remarks/>
        public void delDeviceEmployeesAsync(string pToken, string idDeviceEmployees, object userState) {
            if ((this.delDeviceEmployeesOperationCompleted == null)) {
                this.delDeviceEmployeesOperationCompleted = new System.Threading.SendOrPostCallback(this.OndelDeviceEmployeesOperationCompleted);
            }
            this.InvokeAsync("delDeviceEmployees", new object[] {
                        pToken,
                        idDeviceEmployees}, this.delDeviceEmployeesOperationCompleted, userState);
        }
        
        private void OndelDeviceEmployeesOperationCompleted(object arg) {
            if ((this.delDeviceEmployeesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.delDeviceEmployeesCompleted(this, new delDeviceEmployeesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getLastDeviceEnrollNumber", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int getLastDeviceEnrollNumber(string pToken, string idDevice) {
            object[] results = this.Invoke("getLastDeviceEnrollNumber", new object[] {
                        pToken,
                        idDevice});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void getLastDeviceEnrollNumberAsync(string pToken, string idDevice) {
            this.getLastDeviceEnrollNumberAsync(pToken, idDevice, null);
        }
        
        /// <remarks/>
        public void getLastDeviceEnrollNumberAsync(string pToken, string idDevice, object userState) {
            if ((this.getLastDeviceEnrollNumberOperationCompleted == null)) {
                this.getLastDeviceEnrollNumberOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetLastDeviceEnrollNumberOperationCompleted);
            }
            this.InvokeAsync("getLastDeviceEnrollNumber", new object[] {
                        pToken,
                        idDevice}, this.getLastDeviceEnrollNumberOperationCompleted, userState);
        }
        
        private void OngetLastDeviceEnrollNumberOperationCompleted(object arg) {
            if ((this.getLastDeviceEnrollNumberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getLastDeviceEnrollNumberCompleted(this, new getLastDeviceEnrollNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getAllDeviceEmployees", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getAllDeviceEmployees(string pToken, string idUser) {
            object[] results = this.Invoke("getAllDeviceEmployees", new object[] {
                        pToken,
                        idUser});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getAllDeviceEmployeesAsync(string pToken, string idUser) {
            this.getAllDeviceEmployeesAsync(pToken, idUser, null);
        }
        
        /// <remarks/>
        public void getAllDeviceEmployeesAsync(string pToken, string idUser, object userState) {
            if ((this.getAllDeviceEmployeesOperationCompleted == null)) {
                this.getAllDeviceEmployeesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllDeviceEmployeesOperationCompleted);
            }
            this.InvokeAsync("getAllDeviceEmployees", new object[] {
                        pToken,
                        idUser}, this.getAllDeviceEmployeesOperationCompleted, userState);
        }
        
        private void OngetAllDeviceEmployeesOperationCompleted(object arg) {
            if ((this.getAllDeviceEmployeesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllDeviceEmployeesCompleted(this, new getAllDeviceEmployeesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getAllDeviceEmployeesFromDevice", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getAllDeviceEmployeesFromDevice(string pToken, string idDevice, string idUser) {
            object[] results = this.Invoke("getAllDeviceEmployeesFromDevice", new object[] {
                        pToken,
                        idDevice,
                        idUser});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getAllDeviceEmployeesFromDeviceAsync(string pToken, string idDevice, string idUser) {
            this.getAllDeviceEmployeesFromDeviceAsync(pToken, idDevice, idUser, null);
        }
        
        /// <remarks/>
        public void getAllDeviceEmployeesFromDeviceAsync(string pToken, string idDevice, string idUser, object userState) {
            if ((this.getAllDeviceEmployeesFromDeviceOperationCompleted == null)) {
                this.getAllDeviceEmployeesFromDeviceOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllDeviceEmployeesFromDeviceOperationCompleted);
            }
            this.InvokeAsync("getAllDeviceEmployeesFromDevice", new object[] {
                        pToken,
                        idDevice,
                        idUser}, this.getAllDeviceEmployeesFromDeviceOperationCompleted, userState);
        }
        
        private void OngetAllDeviceEmployeesFromDeviceOperationCompleted(object arg) {
            if ((this.getAllDeviceEmployeesFromDeviceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllDeviceEmployeesFromDeviceCompleted(this, new getAllDeviceEmployeesFromDeviceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getDeviceEmployeesFromEnrollNumber", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable getDeviceEmployeesFromEnrollNumber(string pToken, int enroll, string idDevice) {
            object[] results = this.Invoke("getDeviceEmployeesFromEnrollNumber", new object[] {
                        pToken,
                        enroll,
                        idDevice});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void getDeviceEmployeesFromEnrollNumberAsync(string pToken, int enroll, string idDevice) {
            this.getDeviceEmployeesFromEnrollNumberAsync(pToken, enroll, idDevice, null);
        }
        
        /// <remarks/>
        public void getDeviceEmployeesFromEnrollNumberAsync(string pToken, int enroll, string idDevice, object userState) {
            if ((this.getDeviceEmployeesFromEnrollNumberOperationCompleted == null)) {
                this.getDeviceEmployeesFromEnrollNumberOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDeviceEmployeesFromEnrollNumberOperationCompleted);
            }
            this.InvokeAsync("getDeviceEmployeesFromEnrollNumber", new object[] {
                        pToken,
                        enroll,
                        idDevice}, this.getDeviceEmployeesFromEnrollNumberOperationCompleted, userState);
        }
        
        private void OngetDeviceEmployeesFromEnrollNumberOperationCompleted(object arg) {
            if ((this.getDeviceEmployeesFromEnrollNumberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDeviceEmployeesFromEnrollNumberCompleted(this, new getDeviceEmployeesFromEnrollNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getNextMovimentFromDateTime", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getNextMovimentFromDateTime(string pToken, int numbMovs, string idEmployee, System.DateTime date) {
            object[] results = this.Invoke("getNextMovimentFromDateTime", new object[] {
                        pToken,
                        numbMovs,
                        idEmployee,
                        date});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getNextMovimentFromDateTimeAsync(string pToken, int numbMovs, string idEmployee, System.DateTime date) {
            this.getNextMovimentFromDateTimeAsync(pToken, numbMovs, idEmployee, date, null);
        }
        
        /// <remarks/>
        public void getNextMovimentFromDateTimeAsync(string pToken, int numbMovs, string idEmployee, System.DateTime date, object userState) {
            if ((this.getNextMovimentFromDateTimeOperationCompleted == null)) {
                this.getNextMovimentFromDateTimeOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetNextMovimentFromDateTimeOperationCompleted);
            }
            this.InvokeAsync("getNextMovimentFromDateTime", new object[] {
                        pToken,
                        numbMovs,
                        idEmployee,
                        date}, this.getNextMovimentFromDateTimeOperationCompleted, userState);
        }
        
        private void OngetNextMovimentFromDateTimeOperationCompleted(object arg) {
            if ((this.getNextMovimentFromDateTimeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getNextMovimentFromDateTimeCompleted(this, new getNextMovimentFromDateTimeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/translateMovimentsTableDB", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool translateMovimentsTableDB(string pToken, string Lang) {
            object[] results = this.Invoke("translateMovimentsTableDB", new object[] {
                        pToken,
                        Lang});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void translateMovimentsTableDBAsync(string pToken, string Lang) {
            this.translateMovimentsTableDBAsync(pToken, Lang, null);
        }
        
        /// <remarks/>
        public void translateMovimentsTableDBAsync(string pToken, string Lang, object userState) {
            if ((this.translateMovimentsTableDBOperationCompleted == null)) {
                this.translateMovimentsTableDBOperationCompleted = new System.Threading.SendOrPostCallback(this.OntranslateMovimentsTableDBOperationCompleted);
            }
            this.InvokeAsync("translateMovimentsTableDB", new object[] {
                        pToken,
                        Lang}, this.translateMovimentsTableDBOperationCompleted, userState);
        }
        
        private void OntranslateMovimentsTableDBOperationCompleted(object arg) {
            if ((this.translateMovimentsTableDBCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.translateMovimentsTableDBCompleted(this, new translateMovimentsTableDBCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getEmployeeExceptionFromDate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getEmployeeExceptionFromDate(string pToken, string idEmployee, System.DateTime date) {
            object[] results = this.Invoke("getEmployeeExceptionFromDate", new object[] {
                        pToken,
                        idEmployee,
                        date});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getEmployeeExceptionFromDateAsync(string pToken, string idEmployee, System.DateTime date) {
            this.getEmployeeExceptionFromDateAsync(pToken, idEmployee, date, null);
        }
        
        /// <remarks/>
        public void getEmployeeExceptionFromDateAsync(string pToken, string idEmployee, System.DateTime date, object userState) {
            if ((this.getEmployeeExceptionFromDateOperationCompleted == null)) {
                this.getEmployeeExceptionFromDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetEmployeeExceptionFromDateOperationCompleted);
            }
            this.InvokeAsync("getEmployeeExceptionFromDate", new object[] {
                        pToken,
                        idEmployee,
                        date}, this.getEmployeeExceptionFromDateOperationCompleted, userState);
        }
        
        private void OngetEmployeeExceptionFromDateOperationCompleted(object arg) {
            if ((this.getEmployeeExceptionFromDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getEmployeeExceptionFromDateCompleted(this, new getEmployeeExceptionFromDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getNotTratedExceptions", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getNotTratedExceptions(string pToken, string idUser) {
            object[] results = this.Invoke("getNotTratedExceptions", new object[] {
                        pToken,
                        idUser});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getNotTratedExceptionsAsync(string pToken, string idUser) {
            this.getNotTratedExceptionsAsync(pToken, idUser, null);
        }
        
        /// <remarks/>
        public void getNotTratedExceptionsAsync(string pToken, string idUser, object userState) {
            if ((this.getNotTratedExceptionsOperationCompleted == null)) {
                this.getNotTratedExceptionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetNotTratedExceptionsOperationCompleted);
            }
            this.InvokeAsync("getNotTratedExceptions", new object[] {
                        pToken,
                        idUser}, this.getNotTratedExceptionsOperationCompleted, userState);
        }
        
        private void OngetNotTratedExceptionsOperationCompleted(object arg) {
            if ((this.getNotTratedExceptionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getNotTratedExceptionsCompleted(this, new getNotTratedExceptionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getEmployeeExceptionFromDateInterval", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getEmployeeExceptionFromDateInterval(string pToken, string idEmployee, System.DateTime start, System.DateTime stop) {
            object[] results = this.Invoke("getEmployeeExceptionFromDateInterval", new object[] {
                        pToken,
                        idEmployee,
                        start,
                        stop});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getEmployeeExceptionFromDateIntervalAsync(string pToken, string idEmployee, System.DateTime start, System.DateTime stop) {
            this.getEmployeeExceptionFromDateIntervalAsync(pToken, idEmployee, start, stop, null);
        }
        
        /// <remarks/>
        public void getEmployeeExceptionFromDateIntervalAsync(string pToken, string idEmployee, System.DateTime start, System.DateTime stop, object userState) {
            if ((this.getEmployeeExceptionFromDateIntervalOperationCompleted == null)) {
                this.getEmployeeExceptionFromDateIntervalOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetEmployeeExceptionFromDateIntervalOperationCompleted);
            }
            this.InvokeAsync("getEmployeeExceptionFromDateInterval", new object[] {
                        pToken,
                        idEmployee,
                        start,
                        stop}, this.getEmployeeExceptionFromDateIntervalOperationCompleted, userState);
        }
        
        private void OngetEmployeeExceptionFromDateIntervalOperationCompleted(object arg) {
            if ((this.getEmployeeExceptionFromDateIntervalCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getEmployeeExceptionFromDateIntervalCompleted(this, new getEmployeeExceptionFromDateIntervalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/addException", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string addException(string pToken, System.DateTime date, string idEmployee, string idMoviment, string exceptionType, int priority, string description) {
            object[] results = this.Invoke("addException", new object[] {
                        pToken,
                        date,
                        idEmployee,
                        idMoviment,
                        exceptionType,
                        priority,
                        description});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void addExceptionAsync(string pToken, System.DateTime date, string idEmployee, string idMoviment, string exceptionType, int priority, string description) {
            this.addExceptionAsync(pToken, date, idEmployee, idMoviment, exceptionType, priority, description, null);
        }
        
        /// <remarks/>
        public void addExceptionAsync(string pToken, System.DateTime date, string idEmployee, string idMoviment, string exceptionType, int priority, string description, object userState) {
            if ((this.addExceptionOperationCompleted == null)) {
                this.addExceptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddExceptionOperationCompleted);
            }
            this.InvokeAsync("addException", new object[] {
                        pToken,
                        date,
                        idEmployee,
                        idMoviment,
                        exceptionType,
                        priority,
                        description}, this.addExceptionOperationCompleted, userState);
        }
        
        private void OnaddExceptionOperationCompleted(object arg) {
            if ((this.addExceptionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addExceptionCompleted(this, new addExceptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/changeException", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int changeException(string pToken, string idException, System.DateTime date, string idEmployee, string idMoviment, int exceptionType, int priority, string description, bool trated, bool ignored) {
            object[] results = this.Invoke("changeException", new object[] {
                        pToken,
                        idException,
                        date,
                        idEmployee,
                        idMoviment,
                        exceptionType,
                        priority,
                        description,
                        trated,
                        ignored});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void changeExceptionAsync(string pToken, string idException, System.DateTime date, string idEmployee, string idMoviment, int exceptionType, int priority, string description, bool trated, bool ignored) {
            this.changeExceptionAsync(pToken, idException, date, idEmployee, idMoviment, exceptionType, priority, description, trated, ignored, null);
        }
        
        /// <remarks/>
        public void changeExceptionAsync(string pToken, string idException, System.DateTime date, string idEmployee, string idMoviment, int exceptionType, int priority, string description, bool trated, bool ignored, object userState) {
            if ((this.changeExceptionOperationCompleted == null)) {
                this.changeExceptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnchangeExceptionOperationCompleted);
            }
            this.InvokeAsync("changeException", new object[] {
                        pToken,
                        idException,
                        date,
                        idEmployee,
                        idMoviment,
                        exceptionType,
                        priority,
                        description,
                        trated,
                        ignored}, this.changeExceptionOperationCompleted, userState);
        }
        
        private void OnchangeExceptionOperationCompleted(object arg) {
            if ((this.changeExceptionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.changeExceptionCompleted(this, new changeExceptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/setExceptionTrated", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int setExceptionTrated(string pToken, string idException, bool trated) {
            object[] results = this.Invoke("setExceptionTrated", new object[] {
                        pToken,
                        idException,
                        trated});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void setExceptionTratedAsync(string pToken, string idException, bool trated) {
            this.setExceptionTratedAsync(pToken, idException, trated, null);
        }
        
        /// <remarks/>
        public void setExceptionTratedAsync(string pToken, string idException, bool trated, object userState) {
            if ((this.setExceptionTratedOperationCompleted == null)) {
                this.setExceptionTratedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetExceptionTratedOperationCompleted);
            }
            this.InvokeAsync("setExceptionTrated", new object[] {
                        pToken,
                        idException,
                        trated}, this.setExceptionTratedOperationCompleted, userState);
        }
        
        private void OnsetExceptionTratedOperationCompleted(object arg) {
            if ((this.setExceptionTratedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setExceptionTratedCompleted(this, new setExceptionTratedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/setExceptionIgnored", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int setExceptionIgnored(string pToken, string idException, bool ignored) {
            object[] results = this.Invoke("setExceptionIgnored", new object[] {
                        pToken,
                        idException,
                        ignored});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void setExceptionIgnoredAsync(string pToken, string idException, bool ignored) {
            this.setExceptionIgnoredAsync(pToken, idException, ignored, null);
        }
        
        /// <remarks/>
        public void setExceptionIgnoredAsync(string pToken, string idException, bool ignored, object userState) {
            if ((this.setExceptionIgnoredOperationCompleted == null)) {
                this.setExceptionIgnoredOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetExceptionIgnoredOperationCompleted);
            }
            this.InvokeAsync("setExceptionIgnored", new object[] {
                        pToken,
                        idException,
                        ignored}, this.setExceptionIgnoredOperationCompleted, userState);
        }
        
        private void OnsetExceptionIgnoredOperationCompleted(object arg) {
            if ((this.setExceptionIgnoredCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setExceptionIgnoredCompleted(this, new setExceptionIgnoredCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/deleteVacationsResume", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int deleteVacationsResume(string pToken, string idVacationsResume) {
            object[] results = this.Invoke("deleteVacationsResume", new object[] {
                        pToken,
                        idVacationsResume});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void deleteVacationsResumeAsync(string pToken, string idVacationsResume) {
            this.deleteVacationsResumeAsync(pToken, idVacationsResume, null);
        }
        
        /// <remarks/>
        public void deleteVacationsResumeAsync(string pToken, string idVacationsResume, object userState) {
            if ((this.deleteVacationsResumeOperationCompleted == null)) {
                this.deleteVacationsResumeOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeleteVacationsResumeOperationCompleted);
            }
            this.InvokeAsync("deleteVacationsResume", new object[] {
                        pToken,
                        idVacationsResume}, this.deleteVacationsResumeOperationCompleted, userState);
        }
        
        private void OndeleteVacationsResumeOperationCompleted(object arg) {
            if ((this.deleteVacationsResumeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deleteVacationsResumeCompleted(this, new deleteVacationsResumeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getEmployeeFingerPrint", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getEmployeeFingerPrint(string pToken, string idEmployee) {
            object[] results = this.Invoke("getEmployeeFingerPrint", new object[] {
                        pToken,
                        idEmployee});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getEmployeeFingerPrintAsync(string pToken, string idEmployee) {
            this.getEmployeeFingerPrintAsync(pToken, idEmployee, null);
        }
        
        /// <remarks/>
        public void getEmployeeFingerPrintAsync(string pToken, string idEmployee, object userState) {
            if ((this.getEmployeeFingerPrintOperationCompleted == null)) {
                this.getEmployeeFingerPrintOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetEmployeeFingerPrintOperationCompleted);
            }
            this.InvokeAsync("getEmployeeFingerPrint", new object[] {
                        pToken,
                        idEmployee}, this.getEmployeeFingerPrintOperationCompleted, userState);
        }
        
        private void OngetEmployeeFingerPrintOperationCompleted(object arg) {
            if ((this.getEmployeeFingerPrintCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getEmployeeFingerPrintCompleted(this, new getEmployeeFingerPrintCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getEmployeeFaces", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getEmployeeFaces(string pToken, string idEmployee) {
            object[] results = this.Invoke("getEmployeeFaces", new object[] {
                        pToken,
                        idEmployee});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getEmployeeFacesAsync(string pToken, string idEmployee) {
            this.getEmployeeFacesAsync(pToken, idEmployee, null);
        }
        
        /// <remarks/>
        public void getEmployeeFacesAsync(string pToken, string idEmployee, object userState) {
            if ((this.getEmployeeFacesOperationCompleted == null)) {
                this.getEmployeeFacesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetEmployeeFacesOperationCompleted);
            }
            this.InvokeAsync("getEmployeeFaces", new object[] {
                        pToken,
                        idEmployee}, this.getEmployeeFacesOperationCompleted, userState);
        }
        
        private void OngetEmployeeFacesOperationCompleted(object arg) {
            if ((this.getEmployeeFacesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getEmployeeFacesCompleted(this, new getEmployeeFacesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getFingerPrint", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getFingerPrint(string pToken, string idFingerPrint) {
            object[] results = this.Invoke("getFingerPrint", new object[] {
                        pToken,
                        idFingerPrint});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getFingerPrintAsync(string pToken, string idFingerPrint) {
            this.getFingerPrintAsync(pToken, idFingerPrint, null);
        }
        
        /// <remarks/>
        public void getFingerPrintAsync(string pToken, string idFingerPrint, object userState) {
            if ((this.getFingerPrintOperationCompleted == null)) {
                this.getFingerPrintOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetFingerPrintOperationCompleted);
            }
            this.InvokeAsync("getFingerPrint", new object[] {
                        pToken,
                        idFingerPrint}, this.getFingerPrintOperationCompleted, userState);
        }
        
        private void OngetFingerPrintOperationCompleted(object arg) {
            if ((this.getFingerPrintCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getFingerPrintCompleted(this, new getFingerPrintCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getRelationShipEmployeesFingerprints", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getRelationShipEmployeesFingerprints(string pToken, string idEmployee) {
            object[] results = this.Invoke("getRelationShipEmployeesFingerprints", new object[] {
                        pToken,
                        idEmployee});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getRelationShipEmployeesFingerprintsAsync(string pToken, string idEmployee) {
            this.getRelationShipEmployeesFingerprintsAsync(pToken, idEmployee, null);
        }
        
        /// <remarks/>
        public void getRelationShipEmployeesFingerprintsAsync(string pToken, string idEmployee, object userState) {
            if ((this.getRelationShipEmployeesFingerprintsOperationCompleted == null)) {
                this.getRelationShipEmployeesFingerprintsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetRelationShipEmployeesFingerprintsOperationCompleted);
            }
            this.InvokeAsync("getRelationShipEmployeesFingerprints", new object[] {
                        pToken,
                        idEmployee}, this.getRelationShipEmployeesFingerprintsOperationCompleted, userState);
        }
        
        private void OngetRelationShipEmployeesFingerprintsOperationCompleted(object arg) {
            if ((this.getRelationShipEmployeesFingerprintsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getRelationShipEmployeesFingerprintsCompleted(this, new getRelationShipEmployeesFingerprintsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/addFingerPrint", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int addFingerPrint(string pToken, string idEmployee, int index, string template, bool active, int password, string idFingerPrintType, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] templateBytes) {
            object[] results = this.Invoke("addFingerPrint", new object[] {
                        pToken,
                        idEmployee,
                        index,
                        template,
                        active,
                        password,
                        idFingerPrintType,
                        templateBytes});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void addFingerPrintAsync(string pToken, string idEmployee, int index, string template, bool active, int password, string idFingerPrintType, byte[] templateBytes) {
            this.addFingerPrintAsync(pToken, idEmployee, index, template, active, password, idFingerPrintType, templateBytes, null);
        }
        
        /// <remarks/>
        public void addFingerPrintAsync(string pToken, string idEmployee, int index, string template, bool active, int password, string idFingerPrintType, byte[] templateBytes, object userState) {
            if ((this.addFingerPrintOperationCompleted == null)) {
                this.addFingerPrintOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddFingerPrintOperationCompleted);
            }
            this.InvokeAsync("addFingerPrint", new object[] {
                        pToken,
                        idEmployee,
                        index,
                        template,
                        active,
                        password,
                        idFingerPrintType,
                        templateBytes}, this.addFingerPrintOperationCompleted, userState);
        }
        
        private void OnaddFingerPrintOperationCompleted(object arg) {
            if ((this.addFingerPrintCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addFingerPrintCompleted(this, new addFingerPrintCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/delFingerPrint", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int delFingerPrint(string pToken, string idFingerPrint) {
            object[] results = this.Invoke("delFingerPrint", new object[] {
                        pToken,
                        idFingerPrint});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void delFingerPrintAsync(string pToken, string idFingerPrint) {
            this.delFingerPrintAsync(pToken, idFingerPrint, null);
        }
        
        /// <remarks/>
        public void delFingerPrintAsync(string pToken, string idFingerPrint, object userState) {
            if ((this.delFingerPrintOperationCompleted == null)) {
                this.delFingerPrintOperationCompleted = new System.Threading.SendOrPostCallback(this.OndelFingerPrintOperationCompleted);
            }
            this.InvokeAsync("delFingerPrint", new object[] {
                        pToken,
                        idFingerPrint}, this.delFingerPrintOperationCompleted, userState);
        }
        
        private void OndelFingerPrintOperationCompleted(object arg) {
            if ((this.delFingerPrintCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.delFingerPrintCompleted(this, new delFingerPrintCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/updateFingerPrint", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int updateFingerPrint(string pToken, string idFingerPrint, int index, string template, bool active, int password, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] templateBytes) {
            object[] results = this.Invoke("updateFingerPrint", new object[] {
                        pToken,
                        idFingerPrint,
                        index,
                        template,
                        active,
                        password,
                        templateBytes});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void updateFingerPrintAsync(string pToken, string idFingerPrint, int index, string template, bool active, int password, byte[] templateBytes) {
            this.updateFingerPrintAsync(pToken, idFingerPrint, index, template, active, password, templateBytes, null);
        }
        
        /// <remarks/>
        public void updateFingerPrintAsync(string pToken, string idFingerPrint, int index, string template, bool active, int password, byte[] templateBytes, object userState) {
            if ((this.updateFingerPrintOperationCompleted == null)) {
                this.updateFingerPrintOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateFingerPrintOperationCompleted);
            }
            this.InvokeAsync("updateFingerPrint", new object[] {
                        pToken,
                        idFingerPrint,
                        index,
                        template,
                        active,
                        password,
                        templateBytes}, this.updateFingerPrintOperationCompleted, userState);
        }
        
        private void OnupdateFingerPrintOperationCompleted(object arg) {
            if ((this.updateFingerPrintCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateFingerPrintCompleted(this, new updateFingerPrintCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/delEmployeeFingerPrint", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int delEmployeeFingerPrint(string pToken, string idEmployee, string idFingerPrint) {
            object[] results = this.Invoke("delEmployeeFingerPrint", new object[] {
                        pToken,
                        idEmployee,
                        idFingerPrint});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void delEmployeeFingerPrintAsync(string pToken, string idEmployee, string idFingerPrint) {
            this.delEmployeeFingerPrintAsync(pToken, idEmployee, idFingerPrint, null);
        }
        
        /// <remarks/>
        public void delEmployeeFingerPrintAsync(string pToken, string idEmployee, string idFingerPrint, object userState) {
            if ((this.delEmployeeFingerPrintOperationCompleted == null)) {
                this.delEmployeeFingerPrintOperationCompleted = new System.Threading.SendOrPostCallback(this.OndelEmployeeFingerPrintOperationCompleted);
            }
            this.InvokeAsync("delEmployeeFingerPrint", new object[] {
                        pToken,
                        idEmployee,
                        idFingerPrint}, this.delEmployeeFingerPrintOperationCompleted, userState);
        }
        
        private void OndelEmployeeFingerPrintOperationCompleted(object arg) {
            if ((this.delEmployeeFingerPrintCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.delEmployeeFingerPrintCompleted(this, new delEmployeeFingerPrintCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getRfidCard", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getRfidCard(string pToken, string idRfidCard) {
            object[] results = this.Invoke("getRfidCard", new object[] {
                        pToken,
                        idRfidCard});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getRfidCardAsync(string pToken, string idRfidCard) {
            this.getRfidCardAsync(pToken, idRfidCard, null);
        }
        
        /// <remarks/>
        public void getRfidCardAsync(string pToken, string idRfidCard, object userState) {
            if ((this.getRfidCardOperationCompleted == null)) {
                this.getRfidCardOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetRfidCardOperationCompleted);
            }
            this.InvokeAsync("getRfidCard", new object[] {
                        pToken,
                        idRfidCard}, this.getRfidCardOperationCompleted, userState);
        }
        
        private void OngetRfidCardOperationCompleted(object arg) {
            if ((this.getRfidCardCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getRfidCardCompleted(this, new getRfidCardCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/addRfidCards", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int addRfidCards(string pToken, string idEmployee, uint number, bool active, string customID) {
            object[] results = this.Invoke("addRfidCards", new object[] {
                        pToken,
                        idEmployee,
                        number,
                        active,
                        customID});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void addRfidCardsAsync(string pToken, string idEmployee, uint number, bool active, string customID) {
            this.addRfidCardsAsync(pToken, idEmployee, number, active, customID, null);
        }
        
        /// <remarks/>
        public void addRfidCardsAsync(string pToken, string idEmployee, uint number, bool active, string customID, object userState) {
            if ((this.addRfidCardsOperationCompleted == null)) {
                this.addRfidCardsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddRfidCardsOperationCompleted);
            }
            this.InvokeAsync("addRfidCards", new object[] {
                        pToken,
                        idEmployee,
                        number,
                        active,
                        customID}, this.addRfidCardsOperationCompleted, userState);
        }
        
        private void OnaddRfidCardsOperationCompleted(object arg) {
            if ((this.addRfidCardsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addRfidCardsCompleted(this, new addRfidCardsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getEmployeeRfidCards", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getEmployeeRfidCards(string pToken, string idEmployee) {
            object[] results = this.Invoke("getEmployeeRfidCards", new object[] {
                        pToken,
                        idEmployee});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getEmployeeRfidCardsAsync(string pToken, string idEmployee) {
            this.getEmployeeRfidCardsAsync(pToken, idEmployee, null);
        }
        
        /// <remarks/>
        public void getEmployeeRfidCardsAsync(string pToken, string idEmployee, object userState) {
            if ((this.getEmployeeRfidCardsOperationCompleted == null)) {
                this.getEmployeeRfidCardsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetEmployeeRfidCardsOperationCompleted);
            }
            this.InvokeAsync("getEmployeeRfidCards", new object[] {
                        pToken,
                        idEmployee}, this.getEmployeeRfidCardsOperationCompleted, userState);
        }
        
        private void OngetEmployeeRfidCardsOperationCompleted(object arg) {
            if ((this.getEmployeeRfidCardsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getEmployeeRfidCardsCompleted(this, new getEmployeeRfidCardsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/updateRfidCard", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int updateRfidCard(string pToken, string idRfidCard, uint number, bool active, string customID) {
            object[] results = this.Invoke("updateRfidCard", new object[] {
                        pToken,
                        idRfidCard,
                        number,
                        active,
                        customID});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void updateRfidCardAsync(string pToken, string idRfidCard, uint number, bool active, string customID) {
            this.updateRfidCardAsync(pToken, idRfidCard, number, active, customID, null);
        }
        
        /// <remarks/>
        public void updateRfidCardAsync(string pToken, string idRfidCard, uint number, bool active, string customID, object userState) {
            if ((this.updateRfidCardOperationCompleted == null)) {
                this.updateRfidCardOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateRfidCardOperationCompleted);
            }
            this.InvokeAsync("updateRfidCard", new object[] {
                        pToken,
                        idRfidCard,
                        number,
                        active,
                        customID}, this.updateRfidCardOperationCompleted, userState);
        }
        
        private void OnupdateRfidCardOperationCompleted(object arg) {
            if ((this.updateRfidCardCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateRfidCardCompleted(this, new updateRfidCardCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getEmployeeCardNumber", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public uint getEmployeeCardNumber(string pToken, string idEmployee) {
            object[] results = this.Invoke("getEmployeeCardNumber", new object[] {
                        pToken,
                        idEmployee});
            return ((uint)(results[0]));
        }
        
        /// <remarks/>
        public void getEmployeeCardNumberAsync(string pToken, string idEmployee) {
            this.getEmployeeCardNumberAsync(pToken, idEmployee, null);
        }
        
        /// <remarks/>
        public void getEmployeeCardNumberAsync(string pToken, string idEmployee, object userState) {
            if ((this.getEmployeeCardNumberOperationCompleted == null)) {
                this.getEmployeeCardNumberOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetEmployeeCardNumberOperationCompleted);
            }
            this.InvokeAsync("getEmployeeCardNumber", new object[] {
                        pToken,
                        idEmployee}, this.getEmployeeCardNumberOperationCompleted, userState);
        }
        
        private void OngetEmployeeCardNumberOperationCompleted(object arg) {
            if ((this.getEmployeeCardNumberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getEmployeeCardNumberCompleted(this, new getEmployeeCardNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getAllEmployeeCardNumber", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable getAllEmployeeCardNumber(string pToken, string idEmployee) {
            object[] results = this.Invoke("getAllEmployeeCardNumber", new object[] {
                        pToken,
                        idEmployee});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void getAllEmployeeCardNumberAsync(string pToken, string idEmployee) {
            this.getAllEmployeeCardNumberAsync(pToken, idEmployee, null);
        }
        
        /// <remarks/>
        public void getAllEmployeeCardNumberAsync(string pToken, string idEmployee, object userState) {
            if ((this.getAllEmployeeCardNumberOperationCompleted == null)) {
                this.getAllEmployeeCardNumberOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllEmployeeCardNumberOperationCompleted);
            }
            this.InvokeAsync("getAllEmployeeCardNumber", new object[] {
                        pToken,
                        idEmployee}, this.getAllEmployeeCardNumberOperationCompleted, userState);
        }
        
        private void OngetAllEmployeeCardNumberOperationCompleted(object arg) {
            if ((this.getAllEmployeeCardNumberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllEmployeeCardNumberCompleted(this, new getAllEmployeeCardNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getAllSkills", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable getAllSkills(string pToken) {
            object[] results = this.Invoke("getAllSkills", new object[] {
                        pToken});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void getAllSkillsAsync(string pToken) {
            this.getAllSkillsAsync(pToken, null);
        }
        
        /// <remarks/>
        public void getAllSkillsAsync(string pToken, object userState) {
            if ((this.getAllSkillsOperationCompleted == null)) {
                this.getAllSkillsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllSkillsOperationCompleted);
            }
            this.InvokeAsync("getAllSkills", new object[] {
                        pToken}, this.getAllSkillsOperationCompleted, userState);
        }
        
        private void OngetAllSkillsOperationCompleted(object arg) {
            if ((this.getAllSkillsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllSkillsCompleted(this, new getAllSkillsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getAllProfessionalCategories", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable getAllProfessionalCategories(string pToken) {
            object[] results = this.Invoke("getAllProfessionalCategories", new object[] {
                        pToken});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void getAllProfessionalCategoriesAsync(string pToken) {
            this.getAllProfessionalCategoriesAsync(pToken, null);
        }
        
        /// <remarks/>
        public void getAllProfessionalCategoriesAsync(string pToken, object userState) {
            if ((this.getAllProfessionalCategoriesOperationCompleted == null)) {
                this.getAllProfessionalCategoriesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllProfessionalCategoriesOperationCompleted);
            }
            this.InvokeAsync("getAllProfessionalCategories", new object[] {
                        pToken}, this.getAllProfessionalCategoriesOperationCompleted, userState);
        }
        
        private void OngetAllProfessionalCategoriesOperationCompleted(object arg) {
            if ((this.getAllProfessionalCategoriesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllProfessionalCategoriesCompleted(this, new getAllProfessionalCategoriesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/addSkills", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int addSkills(string pToken, string name) {
            object[] results = this.Invoke("addSkills", new object[] {
                        pToken,
                        name});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void addSkillsAsync(string pToken, string name) {
            this.addSkillsAsync(pToken, name, null);
        }
        
        /// <remarks/>
        public void addSkillsAsync(string pToken, string name, object userState) {
            if ((this.addSkillsOperationCompleted == null)) {
                this.addSkillsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddSkillsOperationCompleted);
            }
            this.InvokeAsync("addSkills", new object[] {
                        pToken,
                        name}, this.addSkillsOperationCompleted, userState);
        }
        
        private void OnaddSkillsOperationCompleted(object arg) {
            if ((this.addSkillsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addSkillsCompleted(this, new addSkillsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/changeSkills", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int changeSkills(string pToken, string idSkills, string name) {
            object[] results = this.Invoke("changeSkills", new object[] {
                        pToken,
                        idSkills,
                        name});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void changeSkillsAsync(string pToken, string idSkills, string name) {
            this.changeSkillsAsync(pToken, idSkills, name, null);
        }
        
        /// <remarks/>
        public void changeSkillsAsync(string pToken, string idSkills, string name, object userState) {
            if ((this.changeSkillsOperationCompleted == null)) {
                this.changeSkillsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnchangeSkillsOperationCompleted);
            }
            this.InvokeAsync("changeSkills", new object[] {
                        pToken,
                        idSkills,
                        name}, this.changeSkillsOperationCompleted, userState);
        }
        
        private void OnchangeSkillsOperationCompleted(object arg) {
            if ((this.changeSkillsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.changeSkillsCompleted(this, new changeSkillsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/delSkills", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int delSkills(string pToken, string idSkills) {
            object[] results = this.Invoke("delSkills", new object[] {
                        pToken,
                        idSkills});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void delSkillsAsync(string pToken, string idSkills) {
            this.delSkillsAsync(pToken, idSkills, null);
        }
        
        /// <remarks/>
        public void delSkillsAsync(string pToken, string idSkills, object userState) {
            if ((this.delSkillsOperationCompleted == null)) {
                this.delSkillsOperationCompleted = new System.Threading.SendOrPostCallback(this.OndelSkillsOperationCompleted);
            }
            this.InvokeAsync("delSkills", new object[] {
                        pToken,
                        idSkills}, this.delSkillsOperationCompleted, userState);
        }
        
        private void OndelSkillsOperationCompleted(object arg) {
            if ((this.delSkillsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.delSkillsCompleted(this, new delSkillsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getScaleServiceSkills", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable getScaleServiceSkills(string pToken, string idScaleServices) {
            object[] results = this.Invoke("getScaleServiceSkills", new object[] {
                        pToken,
                        idScaleServices});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void getScaleServiceSkillsAsync(string pToken, string idScaleServices) {
            this.getScaleServiceSkillsAsync(pToken, idScaleServices, null);
        }
        
        /// <remarks/>
        public void getScaleServiceSkillsAsync(string pToken, string idScaleServices, object userState) {
            if ((this.getScaleServiceSkillsOperationCompleted == null)) {
                this.getScaleServiceSkillsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetScaleServiceSkillsOperationCompleted);
            }
            this.InvokeAsync("getScaleServiceSkills", new object[] {
                        pToken,
                        idScaleServices}, this.getScaleServiceSkillsOperationCompleted, userState);
        }
        
        private void OngetScaleServiceSkillsOperationCompleted(object arg) {
            if ((this.getScaleServiceSkillsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getScaleServiceSkillsCompleted(this, new getScaleServiceSkillsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/delAllScaleServiceSkills", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int delAllScaleServiceSkills(string pToken, string idScaleServices) {
            object[] results = this.Invoke("delAllScaleServiceSkills", new object[] {
                        pToken,
                        idScaleServices});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void delAllScaleServiceSkillsAsync(string pToken, string idScaleServices) {
            this.delAllScaleServiceSkillsAsync(pToken, idScaleServices, null);
        }
        
        /// <remarks/>
        public void delAllScaleServiceSkillsAsync(string pToken, string idScaleServices, object userState) {
            if ((this.delAllScaleServiceSkillsOperationCompleted == null)) {
                this.delAllScaleServiceSkillsOperationCompleted = new System.Threading.SendOrPostCallback(this.OndelAllScaleServiceSkillsOperationCompleted);
            }
            this.InvokeAsync("delAllScaleServiceSkills", new object[] {
                        pToken,
                        idScaleServices}, this.delAllScaleServiceSkillsOperationCompleted, userState);
        }
        
        private void OndelAllScaleServiceSkillsOperationCompleted(object arg) {
            if ((this.delAllScaleServiceSkillsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.delAllScaleServiceSkillsCompleted(this, new delAllScaleServiceSkillsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getScalesServicesSchedules", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getScalesServicesSchedules(string pToken, string idScaleServices) {
            object[] results = this.Invoke("getScalesServicesSchedules", new object[] {
                        pToken,
                        idScaleServices});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getScalesServicesSchedulesAsync(string pToken, string idScaleServices) {
            this.getScalesServicesSchedulesAsync(pToken, idScaleServices, null);
        }
        
        /// <remarks/>
        public void getScalesServicesSchedulesAsync(string pToken, string idScaleServices, object userState) {
            if ((this.getScalesServicesSchedulesOperationCompleted == null)) {
                this.getScalesServicesSchedulesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetScalesServicesSchedulesOperationCompleted);
            }
            this.InvokeAsync("getScalesServicesSchedules", new object[] {
                        pToken,
                        idScaleServices}, this.getScalesServicesSchedulesOperationCompleted, userState);
        }
        
        private void OngetScalesServicesSchedulesOperationCompleted(object arg) {
            if ((this.getScalesServicesSchedulesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getScalesServicesSchedulesCompleted(this, new getScalesServicesSchedulesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getEmployeeScales", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getEmployeeScales(string pToken, string idScalesService, System.DateTime startDate, System.DateTime endDate) {
            object[] results = this.Invoke("getEmployeeScales", new object[] {
                        pToken,
                        idScalesService,
                        startDate,
                        endDate});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getEmployeeScalesAsync(string pToken, string idScalesService, System.DateTime startDate, System.DateTime endDate) {
            this.getEmployeeScalesAsync(pToken, idScalesService, startDate, endDate, null);
        }
        
        /// <remarks/>
        public void getEmployeeScalesAsync(string pToken, string idScalesService, System.DateTime startDate, System.DateTime endDate, object userState) {
            if ((this.getEmployeeScalesOperationCompleted == null)) {
                this.getEmployeeScalesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetEmployeeScalesOperationCompleted);
            }
            this.InvokeAsync("getEmployeeScales", new object[] {
                        pToken,
                        idScalesService,
                        startDate,
                        endDate}, this.getEmployeeScalesOperationCompleted, userState);
        }
        
        private void OngetEmployeeScalesOperationCompleted(object arg) {
            if ((this.getEmployeeScalesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getEmployeeScalesCompleted(this, new getEmployeeScalesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/delAllScaleServiceSchedules", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int delAllScaleServiceSchedules(string pToken, string idScaleServices) {
            object[] results = this.Invoke("delAllScaleServiceSchedules", new object[] {
                        pToken,
                        idScaleServices});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void delAllScaleServiceSchedulesAsync(string pToken, string idScaleServices) {
            this.delAllScaleServiceSchedulesAsync(pToken, idScaleServices, null);
        }
        
        /// <remarks/>
        public void delAllScaleServiceSchedulesAsync(string pToken, string idScaleServices, object userState) {
            if ((this.delAllScaleServiceSchedulesOperationCompleted == null)) {
                this.delAllScaleServiceSchedulesOperationCompleted = new System.Threading.SendOrPostCallback(this.OndelAllScaleServiceSchedulesOperationCompleted);
            }
            this.InvokeAsync("delAllScaleServiceSchedules", new object[] {
                        pToken,
                        idScaleServices}, this.delAllScaleServiceSchedulesOperationCompleted, userState);
        }
        
        private void OndelAllScaleServiceSchedulesOperationCompleted(object arg) {
            if ((this.delAllScaleServiceSchedulesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.delAllScaleServiceSchedulesCompleted(this, new delAllScaleServiceSchedulesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/addScaleServiceSchedules", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int addScaleServiceSchedules(string pToken, string idScaleServices, string idSchedules, bool seg, bool ter, bool qua, bool qui, bool sex, bool sab, bool dom, bool vFer, bool fer, bool aFer, int numberOfEmpl) {
            object[] results = this.Invoke("addScaleServiceSchedules", new object[] {
                        pToken,
                        idScaleServices,
                        idSchedules,
                        seg,
                        ter,
                        qua,
                        qui,
                        sex,
                        sab,
                        dom,
                        vFer,
                        fer,
                        aFer,
                        numberOfEmpl});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void addScaleServiceSchedulesAsync(string pToken, string idScaleServices, string idSchedules, bool seg, bool ter, bool qua, bool qui, bool sex, bool sab, bool dom, bool vFer, bool fer, bool aFer, int numberOfEmpl) {
            this.addScaleServiceSchedulesAsync(pToken, idScaleServices, idSchedules, seg, ter, qua, qui, sex, sab, dom, vFer, fer, aFer, numberOfEmpl, null);
        }
        
        /// <remarks/>
        public void addScaleServiceSchedulesAsync(string pToken, string idScaleServices, string idSchedules, bool seg, bool ter, bool qua, bool qui, bool sex, bool sab, bool dom, bool vFer, bool fer, bool aFer, int numberOfEmpl, object userState) {
            if ((this.addScaleServiceSchedulesOperationCompleted == null)) {
                this.addScaleServiceSchedulesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddScaleServiceSchedulesOperationCompleted);
            }
            this.InvokeAsync("addScaleServiceSchedules", new object[] {
                        pToken,
                        idScaleServices,
                        idSchedules,
                        seg,
                        ter,
                        qua,
                        qui,
                        sex,
                        sab,
                        dom,
                        vFer,
                        fer,
                        aFer,
                        numberOfEmpl}, this.addScaleServiceSchedulesOperationCompleted, userState);
        }
        
        private void OnaddScaleServiceSchedulesOperationCompleted(object arg) {
            if ((this.addScaleServiceSchedulesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addScaleServiceSchedulesCompleted(this, new addScaleServiceSchedulesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/addScaleServiceSkills", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int addScaleServiceSkills(string pToken, string idScaleServices, string skill) {
            object[] results = this.Invoke("addScaleServiceSkills", new object[] {
                        pToken,
                        idScaleServices,
                        skill});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void addScaleServiceSkillsAsync(string pToken, string idScaleServices, string skill) {
            this.addScaleServiceSkillsAsync(pToken, idScaleServices, skill, null);
        }
        
        /// <remarks/>
        public void addScaleServiceSkillsAsync(string pToken, string idScaleServices, string skill, object userState) {
            if ((this.addScaleServiceSkillsOperationCompleted == null)) {
                this.addScaleServiceSkillsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddScaleServiceSkillsOperationCompleted);
            }
            this.InvokeAsync("addScaleServiceSkills", new object[] {
                        pToken,
                        idScaleServices,
                        skill}, this.addScaleServiceSkillsOperationCompleted, userState);
        }
        
        private void OnaddScaleServiceSkillsOperationCompleted(object arg) {
            if ((this.addScaleServiceSkillsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addScaleServiceSkillsCompleted(this, new addScaleServiceSkillsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getEmployeeSkills", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable getEmployeeSkills(string pToken, string idEmployee) {
            object[] results = this.Invoke("getEmployeeSkills", new object[] {
                        pToken,
                        idEmployee});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void getEmployeeSkillsAsync(string pToken, string idEmployee) {
            this.getEmployeeSkillsAsync(pToken, idEmployee, null);
        }
        
        /// <remarks/>
        public void getEmployeeSkillsAsync(string pToken, string idEmployee, object userState) {
            if ((this.getEmployeeSkillsOperationCompleted == null)) {
                this.getEmployeeSkillsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetEmployeeSkillsOperationCompleted);
            }
            this.InvokeAsync("getEmployeeSkills", new object[] {
                        pToken,
                        idEmployee}, this.getEmployeeSkillsOperationCompleted, userState);
        }
        
        private void OngetEmployeeSkillsOperationCompleted(object arg) {
            if ((this.getEmployeeSkillsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getEmployeeSkillsCompleted(this, new getEmployeeSkillsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/delEmployeeSkill", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int delEmployeeSkill(string pToken, string selectedIdEmpSkill) {
            object[] results = this.Invoke("delEmployeeSkill", new object[] {
                        pToken,
                        selectedIdEmpSkill});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void delEmployeeSkillAsync(string pToken, string selectedIdEmpSkill) {
            this.delEmployeeSkillAsync(pToken, selectedIdEmpSkill, null);
        }
        
        /// <remarks/>
        public void delEmployeeSkillAsync(string pToken, string selectedIdEmpSkill, object userState) {
            if ((this.delEmployeeSkillOperationCompleted == null)) {
                this.delEmployeeSkillOperationCompleted = new System.Threading.SendOrPostCallback(this.OndelEmployeeSkillOperationCompleted);
            }
            this.InvokeAsync("delEmployeeSkill", new object[] {
                        pToken,
                        selectedIdEmpSkill}, this.delEmployeeSkillOperationCompleted, userState);
        }
        
        private void OndelEmployeeSkillOperationCompleted(object arg) {
            if ((this.delEmployeeSkillCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.delEmployeeSkillCompleted(this, new delEmployeeSkillCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/addEmployeeSkill", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int addEmployeeSkill(string pToken, string idEmployee, string idSkill, System.DateTime dateTime) {
            object[] results = this.Invoke("addEmployeeSkill", new object[] {
                        pToken,
                        idEmployee,
                        idSkill,
                        dateTime});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void addEmployeeSkillAsync(string pToken, string idEmployee, string idSkill, System.DateTime dateTime) {
            this.addEmployeeSkillAsync(pToken, idEmployee, idSkill, dateTime, null);
        }
        
        /// <remarks/>
        public void addEmployeeSkillAsync(string pToken, string idEmployee, string idSkill, System.DateTime dateTime, object userState) {
            if ((this.addEmployeeSkillOperationCompleted == null)) {
                this.addEmployeeSkillOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddEmployeeSkillOperationCompleted);
            }
            this.InvokeAsync("addEmployeeSkill", new object[] {
                        pToken,
                        idEmployee,
                        idSkill,
                        dateTime}, this.addEmployeeSkillOperationCompleted, userState);
        }
        
        private void OnaddEmployeeSkillOperationCompleted(object arg) {
            if ((this.addEmployeeSkillCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addEmployeeSkillCompleted(this, new addEmployeeSkillCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/updateEmployeeSkills", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int updateEmployeeSkills(string pToken, string selectedIdEmpSkill, string idEmployee, string idSkill, System.DateTime dateTime) {
            object[] results = this.Invoke("updateEmployeeSkills", new object[] {
                        pToken,
                        selectedIdEmpSkill,
                        idEmployee,
                        idSkill,
                        dateTime});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void updateEmployeeSkillsAsync(string pToken, string selectedIdEmpSkill, string idEmployee, string idSkill, System.DateTime dateTime) {
            this.updateEmployeeSkillsAsync(pToken, selectedIdEmpSkill, idEmployee, idSkill, dateTime, null);
        }
        
        /// <remarks/>
        public void updateEmployeeSkillsAsync(string pToken, string selectedIdEmpSkill, string idEmployee, string idSkill, System.DateTime dateTime, object userState) {
            if ((this.updateEmployeeSkillsOperationCompleted == null)) {
                this.updateEmployeeSkillsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateEmployeeSkillsOperationCompleted);
            }
            this.InvokeAsync("updateEmployeeSkills", new object[] {
                        pToken,
                        selectedIdEmpSkill,
                        idEmployee,
                        idSkill,
                        dateTime}, this.updateEmployeeSkillsOperationCompleted, userState);
        }
        
        private void OnupdateEmployeeSkillsOperationCompleted(object arg) {
            if ((this.updateEmployeeSkillsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateEmployeeSkillsCompleted(this, new updateEmployeeSkillsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getAllContracts", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable getAllContracts(string pToken) {
            object[] results = this.Invoke("getAllContracts", new object[] {
                        pToken});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void getAllContractsAsync(string pToken) {
            this.getAllContractsAsync(pToken, null);
        }
        
        /// <remarks/>
        public void getAllContractsAsync(string pToken, object userState) {
            if ((this.getAllContractsOperationCompleted == null)) {
                this.getAllContractsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllContractsOperationCompleted);
            }
            this.InvokeAsync("getAllContracts", new object[] {
                        pToken}, this.getAllContractsOperationCompleted, userState);
        }
        
        private void OngetAllContractsOperationCompleted(object arg) {
            if ((this.getAllContractsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllContractsCompleted(this, new getAllContractsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/addContracts", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int addContracts(string pToken, string name) {
            object[] results = this.Invoke("addContracts", new object[] {
                        pToken,
                        name});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void addContractsAsync(string pToken, string name) {
            this.addContractsAsync(pToken, name, null);
        }
        
        /// <remarks/>
        public void addContractsAsync(string pToken, string name, object userState) {
            if ((this.addContractsOperationCompleted == null)) {
                this.addContractsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddContractsOperationCompleted);
            }
            this.InvokeAsync("addContracts", new object[] {
                        pToken,
                        name}, this.addContractsOperationCompleted, userState);
        }
        
        private void OnaddContractsOperationCompleted(object arg) {
            if ((this.addContractsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addContractsCompleted(this, new addContractsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/changeContracts", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int changeContracts(string pToken, string idContracts, string name) {
            object[] results = this.Invoke("changeContracts", new object[] {
                        pToken,
                        idContracts,
                        name});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void changeContractsAsync(string pToken, string idContracts, string name) {
            this.changeContractsAsync(pToken, idContracts, name, null);
        }
        
        /// <remarks/>
        public void changeContractsAsync(string pToken, string idContracts, string name, object userState) {
            if ((this.changeContractsOperationCompleted == null)) {
                this.changeContractsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnchangeContractsOperationCompleted);
            }
            this.InvokeAsync("changeContracts", new object[] {
                        pToken,
                        idContracts,
                        name}, this.changeContractsOperationCompleted, userState);
        }
        
        private void OnchangeContractsOperationCompleted(object arg) {
            if ((this.changeContractsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.changeContractsCompleted(this, new changeContractsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/delContracts", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int delContracts(string pToken, string idContracts) {
            object[] results = this.Invoke("delContracts", new object[] {
                        pToken,
                        idContracts});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void delContractsAsync(string pToken, string idContracts) {
            this.delContractsAsync(pToken, idContracts, null);
        }
        
        /// <remarks/>
        public void delContractsAsync(string pToken, string idContracts, object userState) {
            if ((this.delContractsOperationCompleted == null)) {
                this.delContractsOperationCompleted = new System.Threading.SendOrPostCallback(this.OndelContractsOperationCompleted);
            }
            this.InvokeAsync("delContracts", new object[] {
                        pToken,
                        idContracts}, this.delContractsOperationCompleted, userState);
        }
        
        private void OndelContractsOperationCompleted(object arg) {
            if ((this.delContractsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.delContractsCompleted(this, new delContractsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getEmployeeContracts", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable getEmployeeContracts(string pToken, string idEmployee) {
            object[] results = this.Invoke("getEmployeeContracts", new object[] {
                        pToken,
                        idEmployee});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void getEmployeeContractsAsync(string pToken, string idEmployee) {
            this.getEmployeeContractsAsync(pToken, idEmployee, null);
        }
        
        /// <remarks/>
        public void getEmployeeContractsAsync(string pToken, string idEmployee, object userState) {
            if ((this.getEmployeeContractsOperationCompleted == null)) {
                this.getEmployeeContractsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetEmployeeContractsOperationCompleted);
            }
            this.InvokeAsync("getEmployeeContracts", new object[] {
                        pToken,
                        idEmployee}, this.getEmployeeContractsOperationCompleted, userState);
        }
        
        private void OngetEmployeeContractsOperationCompleted(object arg) {
            if ((this.getEmployeeContractsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getEmployeeContractsCompleted(this, new getEmployeeContractsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/delEmployeeContracts", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int delEmployeeContracts(string pToken, string selectedIdEmpContracts) {
            object[] results = this.Invoke("delEmployeeContracts", new object[] {
                        pToken,
                        selectedIdEmpContracts});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void delEmployeeContractsAsync(string pToken, string selectedIdEmpContracts) {
            this.delEmployeeContractsAsync(pToken, selectedIdEmpContracts, null);
        }
        
        /// <remarks/>
        public void delEmployeeContractsAsync(string pToken, string selectedIdEmpContracts, object userState) {
            if ((this.delEmployeeContractsOperationCompleted == null)) {
                this.delEmployeeContractsOperationCompleted = new System.Threading.SendOrPostCallback(this.OndelEmployeeContractsOperationCompleted);
            }
            this.InvokeAsync("delEmployeeContracts", new object[] {
                        pToken,
                        selectedIdEmpContracts}, this.delEmployeeContractsOperationCompleted, userState);
        }
        
        private void OndelEmployeeContractsOperationCompleted(object arg) {
            if ((this.delEmployeeContractsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.delEmployeeContractsCompleted(this, new delEmployeeContractsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/addEmployeeContracts", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int addEmployeeContracts(string pToken, string idEmployee, string idContract, System.DateTime dateInit, System.DateTime dateEnd) {
            object[] results = this.Invoke("addEmployeeContracts", new object[] {
                        pToken,
                        idEmployee,
                        idContract,
                        dateInit,
                        dateEnd});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void addEmployeeContractsAsync(string pToken, string idEmployee, string idContract, System.DateTime dateInit, System.DateTime dateEnd) {
            this.addEmployeeContractsAsync(pToken, idEmployee, idContract, dateInit, dateEnd, null);
        }
        
        /// <remarks/>
        public void addEmployeeContractsAsync(string pToken, string idEmployee, string idContract, System.DateTime dateInit, System.DateTime dateEnd, object userState) {
            if ((this.addEmployeeContractsOperationCompleted == null)) {
                this.addEmployeeContractsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddEmployeeContractsOperationCompleted);
            }
            this.InvokeAsync("addEmployeeContracts", new object[] {
                        pToken,
                        idEmployee,
                        idContract,
                        dateInit,
                        dateEnd}, this.addEmployeeContractsOperationCompleted, userState);
        }
        
        private void OnaddEmployeeContractsOperationCompleted(object arg) {
            if ((this.addEmployeeContractsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addEmployeeContractsCompleted(this, new addEmployeeContractsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/updateEmployeeContracts", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int updateEmployeeContracts(string pToken, string selectedIdEmpContra, string idEmployee, string idContr, System.DateTime dateTimeStart, System.DateTime dateTimeEnd) {
            object[] results = this.Invoke("updateEmployeeContracts", new object[] {
                        pToken,
                        selectedIdEmpContra,
                        idEmployee,
                        idContr,
                        dateTimeStart,
                        dateTimeEnd});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void updateEmployeeContractsAsync(string pToken, string selectedIdEmpContra, string idEmployee, string idContr, System.DateTime dateTimeStart, System.DateTime dateTimeEnd) {
            this.updateEmployeeContractsAsync(pToken, selectedIdEmpContra, idEmployee, idContr, dateTimeStart, dateTimeEnd, null);
        }
        
        /// <remarks/>
        public void updateEmployeeContractsAsync(string pToken, string selectedIdEmpContra, string idEmployee, string idContr, System.DateTime dateTimeStart, System.DateTime dateTimeEnd, object userState) {
            if ((this.updateEmployeeContractsOperationCompleted == null)) {
                this.updateEmployeeContractsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateEmployeeContractsOperationCompleted);
            }
            this.InvokeAsync("updateEmployeeContracts", new object[] {
                        pToken,
                        selectedIdEmpContra,
                        idEmployee,
                        idContr,
                        dateTimeStart,
                        dateTimeEnd}, this.updateEmployeeContractsOperationCompleted, userState);
        }
        
        private void OnupdateEmployeeContractsOperationCompleted(object arg) {
            if ((this.updateEmployeeContractsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateEmployeeContractsCompleted(this, new updateEmployeeContractsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/updateEmployeeOperationalSkills", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int updateEmployeeOperationalSkills(string pToken, string selectedIdEmpSkill, string idEmployee, string idSkill, System.DateTime dateTime) {
            object[] results = this.Invoke("updateEmployeeOperationalSkills", new object[] {
                        pToken,
                        selectedIdEmpSkill,
                        idEmployee,
                        idSkill,
                        dateTime});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void updateEmployeeOperationalSkillsAsync(string pToken, string selectedIdEmpSkill, string idEmployee, string idSkill, System.DateTime dateTime) {
            this.updateEmployeeOperationalSkillsAsync(pToken, selectedIdEmpSkill, idEmployee, idSkill, dateTime, null);
        }
        
        /// <remarks/>
        public void updateEmployeeOperationalSkillsAsync(string pToken, string selectedIdEmpSkill, string idEmployee, string idSkill, System.DateTime dateTime, object userState) {
            if ((this.updateEmployeeOperationalSkillsOperationCompleted == null)) {
                this.updateEmployeeOperationalSkillsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateEmployeeOperationalSkillsOperationCompleted);
            }
            this.InvokeAsync("updateEmployeeOperationalSkills", new object[] {
                        pToken,
                        selectedIdEmpSkill,
                        idEmployee,
                        idSkill,
                        dateTime}, this.updateEmployeeOperationalSkillsOperationCompleted, userState);
        }
        
        private void OnupdateEmployeeOperationalSkillsOperationCompleted(object arg) {
            if ((this.updateEmployeeOperationalSkillsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateEmployeeOperationalSkillsCompleted(this, new updateEmployeeOperationalSkillsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getEmployeeOperationalSkills", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable getEmployeeOperationalSkills(string pToken, string idEmployee) {
            object[] results = this.Invoke("getEmployeeOperationalSkills", new object[] {
                        pToken,
                        idEmployee});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void getEmployeeOperationalSkillsAsync(string pToken, string idEmployee) {
            this.getEmployeeOperationalSkillsAsync(pToken, idEmployee, null);
        }
        
        /// <remarks/>
        public void getEmployeeOperationalSkillsAsync(string pToken, string idEmployee, object userState) {
            if ((this.getEmployeeOperationalSkillsOperationCompleted == null)) {
                this.getEmployeeOperationalSkillsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetEmployeeOperationalSkillsOperationCompleted);
            }
            this.InvokeAsync("getEmployeeOperationalSkills", new object[] {
                        pToken,
                        idEmployee}, this.getEmployeeOperationalSkillsOperationCompleted, userState);
        }
        
        private void OngetEmployeeOperationalSkillsOperationCompleted(object arg) {
            if ((this.getEmployeeOperationalSkillsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getEmployeeOperationalSkillsCompleted(this, new getEmployeeOperationalSkillsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/delEmployeeOperationalSkill", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int delEmployeeOperationalSkill(string pToken, string selectedIdEmpSkill) {
            object[] results = this.Invoke("delEmployeeOperationalSkill", new object[] {
                        pToken,
                        selectedIdEmpSkill});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void delEmployeeOperationalSkillAsync(string pToken, string selectedIdEmpSkill) {
            this.delEmployeeOperationalSkillAsync(pToken, selectedIdEmpSkill, null);
        }
        
        /// <remarks/>
        public void delEmployeeOperationalSkillAsync(string pToken, string selectedIdEmpSkill, object userState) {
            if ((this.delEmployeeOperationalSkillOperationCompleted == null)) {
                this.delEmployeeOperationalSkillOperationCompleted = new System.Threading.SendOrPostCallback(this.OndelEmployeeOperationalSkillOperationCompleted);
            }
            this.InvokeAsync("delEmployeeOperationalSkill", new object[] {
                        pToken,
                        selectedIdEmpSkill}, this.delEmployeeOperationalSkillOperationCompleted, userState);
        }
        
        private void OndelEmployeeOperationalSkillOperationCompleted(object arg) {
            if ((this.delEmployeeOperationalSkillCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.delEmployeeOperationalSkillCompleted(this, new delEmployeeOperationalSkillCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/addEmployeeOperationalSkill", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int addEmployeeOperationalSkill(string pToken, string idEmployee, string idSkill, System.DateTime dateTime) {
            object[] results = this.Invoke("addEmployeeOperationalSkill", new object[] {
                        pToken,
                        idEmployee,
                        idSkill,
                        dateTime});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void addEmployeeOperationalSkillAsync(string pToken, string idEmployee, string idSkill, System.DateTime dateTime) {
            this.addEmployeeOperationalSkillAsync(pToken, idEmployee, idSkill, dateTime, null);
        }
        
        /// <remarks/>
        public void addEmployeeOperationalSkillAsync(string pToken, string idEmployee, string idSkill, System.DateTime dateTime, object userState) {
            if ((this.addEmployeeOperationalSkillOperationCompleted == null)) {
                this.addEmployeeOperationalSkillOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddEmployeeOperationalSkillOperationCompleted);
            }
            this.InvokeAsync("addEmployeeOperationalSkill", new object[] {
                        pToken,
                        idEmployee,
                        idSkill,
                        dateTime}, this.addEmployeeOperationalSkillOperationCompleted, userState);
        }
        
        private void OnaddEmployeeOperationalSkillOperationCompleted(object arg) {
            if ((this.addEmployeeOperationalSkillCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addEmployeeOperationalSkillCompleted(this, new addEmployeeOperationalSkillCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getAllCareerFunctions", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable getAllCareerFunctions(string pToken) {
            object[] results = this.Invoke("getAllCareerFunctions", new object[] {
                        pToken});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void getAllCareerFunctionsAsync(string pToken) {
            this.getAllCareerFunctionsAsync(pToken, null);
        }
        
        /// <remarks/>
        public void getAllCareerFunctionsAsync(string pToken, object userState) {
            if ((this.getAllCareerFunctionsOperationCompleted == null)) {
                this.getAllCareerFunctionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllCareerFunctionsOperationCompleted);
            }
            this.InvokeAsync("getAllCareerFunctions", new object[] {
                        pToken}, this.getAllCareerFunctionsOperationCompleted, userState);
        }
        
        private void OngetAllCareerFunctionsOperationCompleted(object arg) {
            if ((this.getAllCareerFunctionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllCareerFunctionsCompleted(this, new getAllCareerFunctionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/addCareerFunctions", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string addCareerFunctions(string pToken, string name) {
            object[] results = this.Invoke("addCareerFunctions", new object[] {
                        pToken,
                        name});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void addCareerFunctionsAsync(string pToken, string name) {
            this.addCareerFunctionsAsync(pToken, name, null);
        }
        
        /// <remarks/>
        public void addCareerFunctionsAsync(string pToken, string name, object userState) {
            if ((this.addCareerFunctionsOperationCompleted == null)) {
                this.addCareerFunctionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddCareerFunctionsOperationCompleted);
            }
            this.InvokeAsync("addCareerFunctions", new object[] {
                        pToken,
                        name}, this.addCareerFunctionsOperationCompleted, userState);
        }
        
        private void OnaddCareerFunctionsOperationCompleted(object arg) {
            if ((this.addCareerFunctionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addCareerFunctionsCompleted(this, new addCareerFunctionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/changeCareerFunctions", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int changeCareerFunctions(string pToken, string idCareerFunctions, string name) {
            object[] results = this.Invoke("changeCareerFunctions", new object[] {
                        pToken,
                        idCareerFunctions,
                        name});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void changeCareerFunctionsAsync(string pToken, string idCareerFunctions, string name) {
            this.changeCareerFunctionsAsync(pToken, idCareerFunctions, name, null);
        }
        
        /// <remarks/>
        public void changeCareerFunctionsAsync(string pToken, string idCareerFunctions, string name, object userState) {
            if ((this.changeCareerFunctionsOperationCompleted == null)) {
                this.changeCareerFunctionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnchangeCareerFunctionsOperationCompleted);
            }
            this.InvokeAsync("changeCareerFunctions", new object[] {
                        pToken,
                        idCareerFunctions,
                        name}, this.changeCareerFunctionsOperationCompleted, userState);
        }
        
        private void OnchangeCareerFunctionsOperationCompleted(object arg) {
            if ((this.changeCareerFunctionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.changeCareerFunctionsCompleted(this, new changeCareerFunctionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/delCareerFunctions", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int delCareerFunctions(string pToken, string idCareerFunctions) {
            object[] results = this.Invoke("delCareerFunctions", new object[] {
                        pToken,
                        idCareerFunctions});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void delCareerFunctionsAsync(string pToken, string idCareerFunctions) {
            this.delCareerFunctionsAsync(pToken, idCareerFunctions, null);
        }
        
        /// <remarks/>
        public void delCareerFunctionsAsync(string pToken, string idCareerFunctions, object userState) {
            if ((this.delCareerFunctionsOperationCompleted == null)) {
                this.delCareerFunctionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OndelCareerFunctionsOperationCompleted);
            }
            this.InvokeAsync("delCareerFunctions", new object[] {
                        pToken,
                        idCareerFunctions}, this.delCareerFunctionsOperationCompleted, userState);
        }
        
        private void OndelCareerFunctionsOperationCompleted(object arg) {
            if ((this.delCareerFunctionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.delCareerFunctionsCompleted(this, new delCareerFunctionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getEmployeeCareerFunction", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable getEmployeeCareerFunction(string pToken, string idEmployee) {
            object[] results = this.Invoke("getEmployeeCareerFunction", new object[] {
                        pToken,
                        idEmployee});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void getEmployeeCareerFunctionAsync(string pToken, string idEmployee) {
            this.getEmployeeCareerFunctionAsync(pToken, idEmployee, null);
        }
        
        /// <remarks/>
        public void getEmployeeCareerFunctionAsync(string pToken, string idEmployee, object userState) {
            if ((this.getEmployeeCareerFunctionOperationCompleted == null)) {
                this.getEmployeeCareerFunctionOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetEmployeeCareerFunctionOperationCompleted);
            }
            this.InvokeAsync("getEmployeeCareerFunction", new object[] {
                        pToken,
                        idEmployee}, this.getEmployeeCareerFunctionOperationCompleted, userState);
        }
        
        private void OngetEmployeeCareerFunctionOperationCompleted(object arg) {
            if ((this.getEmployeeCareerFunctionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getEmployeeCareerFunctionCompleted(this, new getEmployeeCareerFunctionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/delEmployeeCareerFunction", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int delEmployeeCareerFunction(string pToken, string selectedIdEmpFunc) {
            object[] results = this.Invoke("delEmployeeCareerFunction", new object[] {
                        pToken,
                        selectedIdEmpFunc});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void delEmployeeCareerFunctionAsync(string pToken, string selectedIdEmpFunc) {
            this.delEmployeeCareerFunctionAsync(pToken, selectedIdEmpFunc, null);
        }
        
        /// <remarks/>
        public void delEmployeeCareerFunctionAsync(string pToken, string selectedIdEmpFunc, object userState) {
            if ((this.delEmployeeCareerFunctionOperationCompleted == null)) {
                this.delEmployeeCareerFunctionOperationCompleted = new System.Threading.SendOrPostCallback(this.OndelEmployeeCareerFunctionOperationCompleted);
            }
            this.InvokeAsync("delEmployeeCareerFunction", new object[] {
                        pToken,
                        selectedIdEmpFunc}, this.delEmployeeCareerFunctionOperationCompleted, userState);
        }
        
        private void OndelEmployeeCareerFunctionOperationCompleted(object arg) {
            if ((this.delEmployeeCareerFunctionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.delEmployeeCareerFunctionCompleted(this, new delEmployeeCareerFunctionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/updateEmployeeCareerFunction", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int updateEmployeeCareerFunction(string pToken, string selectedIdEmpFunc, string idEmployee, string idCarrF, System.DateTime dateTimeStart, System.DateTime dateTimeEnd) {
            object[] results = this.Invoke("updateEmployeeCareerFunction", new object[] {
                        pToken,
                        selectedIdEmpFunc,
                        idEmployee,
                        idCarrF,
                        dateTimeStart,
                        dateTimeEnd});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void updateEmployeeCareerFunctionAsync(string pToken, string selectedIdEmpFunc, string idEmployee, string idCarrF, System.DateTime dateTimeStart, System.DateTime dateTimeEnd) {
            this.updateEmployeeCareerFunctionAsync(pToken, selectedIdEmpFunc, idEmployee, idCarrF, dateTimeStart, dateTimeEnd, null);
        }
        
        /// <remarks/>
        public void updateEmployeeCareerFunctionAsync(string pToken, string selectedIdEmpFunc, string idEmployee, string idCarrF, System.DateTime dateTimeStart, System.DateTime dateTimeEnd, object userState) {
            if ((this.updateEmployeeCareerFunctionOperationCompleted == null)) {
                this.updateEmployeeCareerFunctionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateEmployeeCareerFunctionOperationCompleted);
            }
            this.InvokeAsync("updateEmployeeCareerFunction", new object[] {
                        pToken,
                        selectedIdEmpFunc,
                        idEmployee,
                        idCarrF,
                        dateTimeStart,
                        dateTimeEnd}, this.updateEmployeeCareerFunctionOperationCompleted, userState);
        }
        
        private void OnupdateEmployeeCareerFunctionOperationCompleted(object arg) {
            if ((this.updateEmployeeCareerFunctionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateEmployeeCareerFunctionCompleted(this, new updateEmployeeCareerFunctionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/addEmployeeCareerFunction", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int addEmployeeCareerFunction(string pToken, string idEmployee, string idCarrF, System.DateTime dateInit, System.DateTime dateEnd) {
            object[] results = this.Invoke("addEmployeeCareerFunction", new object[] {
                        pToken,
                        idEmployee,
                        idCarrF,
                        dateInit,
                        dateEnd});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void addEmployeeCareerFunctionAsync(string pToken, string idEmployee, string idCarrF, System.DateTime dateInit, System.DateTime dateEnd) {
            this.addEmployeeCareerFunctionAsync(pToken, idEmployee, idCarrF, dateInit, dateEnd, null);
        }
        
        /// <remarks/>
        public void addEmployeeCareerFunctionAsync(string pToken, string idEmployee, string idCarrF, System.DateTime dateInit, System.DateTime dateEnd, object userState) {
            if ((this.addEmployeeCareerFunctionOperationCompleted == null)) {
                this.addEmployeeCareerFunctionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddEmployeeCareerFunctionOperationCompleted);
            }
            this.InvokeAsync("addEmployeeCareerFunction", new object[] {
                        pToken,
                        idEmployee,
                        idCarrF,
                        dateInit,
                        dateEnd}, this.addEmployeeCareerFunctionOperationCompleted, userState);
        }
        
        private void OnaddEmployeeCareerFunctionOperationCompleted(object arg) {
            if ((this.addEmployeeCareerFunctionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addEmployeeCareerFunctionCompleted(this, new addEmployeeCareerFunctionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getAllAptitudeExams", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable getAllAptitudeExams(string pToken) {
            object[] results = this.Invoke("getAllAptitudeExams", new object[] {
                        pToken});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void getAllAptitudeExamsAsync(string pToken) {
            this.getAllAptitudeExamsAsync(pToken, null);
        }
        
        /// <remarks/>
        public void getAllAptitudeExamsAsync(string pToken, object userState) {
            if ((this.getAllAptitudeExamsOperationCompleted == null)) {
                this.getAllAptitudeExamsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllAptitudeExamsOperationCompleted);
            }
            this.InvokeAsync("getAllAptitudeExams", new object[] {
                        pToken}, this.getAllAptitudeExamsOperationCompleted, userState);
        }
        
        private void OngetAllAptitudeExamsOperationCompleted(object arg) {
            if ((this.getAllAptitudeExamsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllAptitudeExamsCompleted(this, new getAllAptitudeExamsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/addAptitudeExams", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int addAptitudeExams(string pToken, string name) {
            object[] results = this.Invoke("addAptitudeExams", new object[] {
                        pToken,
                        name});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void addAptitudeExamsAsync(string pToken, string name) {
            this.addAptitudeExamsAsync(pToken, name, null);
        }
        
        /// <remarks/>
        public void addAptitudeExamsAsync(string pToken, string name, object userState) {
            if ((this.addAptitudeExamsOperationCompleted == null)) {
                this.addAptitudeExamsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddAptitudeExamsOperationCompleted);
            }
            this.InvokeAsync("addAptitudeExams", new object[] {
                        pToken,
                        name}, this.addAptitudeExamsOperationCompleted, userState);
        }
        
        private void OnaddAptitudeExamsOperationCompleted(object arg) {
            if ((this.addAptitudeExamsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addAptitudeExamsCompleted(this, new addAptitudeExamsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/changeAptitudeExams", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int changeAptitudeExams(string pToken, string idAptitudeExams, string name) {
            object[] results = this.Invoke("changeAptitudeExams", new object[] {
                        pToken,
                        idAptitudeExams,
                        name});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void changeAptitudeExamsAsync(string pToken, string idAptitudeExams, string name) {
            this.changeAptitudeExamsAsync(pToken, idAptitudeExams, name, null);
        }
        
        /// <remarks/>
        public void changeAptitudeExamsAsync(string pToken, string idAptitudeExams, string name, object userState) {
            if ((this.changeAptitudeExamsOperationCompleted == null)) {
                this.changeAptitudeExamsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnchangeAptitudeExamsOperationCompleted);
            }
            this.InvokeAsync("changeAptitudeExams", new object[] {
                        pToken,
                        idAptitudeExams,
                        name}, this.changeAptitudeExamsOperationCompleted, userState);
        }
        
        private void OnchangeAptitudeExamsOperationCompleted(object arg) {
            if ((this.changeAptitudeExamsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.changeAptitudeExamsCompleted(this, new changeAptitudeExamsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/delAptitudeExams", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int delAptitudeExams(string pToken, string idAptitudeExams) {
            object[] results = this.Invoke("delAptitudeExams", new object[] {
                        pToken,
                        idAptitudeExams});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void delAptitudeExamsAsync(string pToken, string idAptitudeExams) {
            this.delAptitudeExamsAsync(pToken, idAptitudeExams, null);
        }
        
        /// <remarks/>
        public void delAptitudeExamsAsync(string pToken, string idAptitudeExams, object userState) {
            if ((this.delAptitudeExamsOperationCompleted == null)) {
                this.delAptitudeExamsOperationCompleted = new System.Threading.SendOrPostCallback(this.OndelAptitudeExamsOperationCompleted);
            }
            this.InvokeAsync("delAptitudeExams", new object[] {
                        pToken,
                        idAptitudeExams}, this.delAptitudeExamsOperationCompleted, userState);
        }
        
        private void OndelAptitudeExamsOperationCompleted(object arg) {
            if ((this.delAptitudeExamsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.delAptitudeExamsCompleted(this, new delAptitudeExamsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getAllAptitudeExamsEmployee", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable getAllAptitudeExamsEmployee(string pToken, string idEmployee) {
            object[] results = this.Invoke("getAllAptitudeExamsEmployee", new object[] {
                        pToken,
                        idEmployee});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void getAllAptitudeExamsEmployeeAsync(string pToken, string idEmployee) {
            this.getAllAptitudeExamsEmployeeAsync(pToken, idEmployee, null);
        }
        
        /// <remarks/>
        public void getAllAptitudeExamsEmployeeAsync(string pToken, string idEmployee, object userState) {
            if ((this.getAllAptitudeExamsEmployeeOperationCompleted == null)) {
                this.getAllAptitudeExamsEmployeeOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllAptitudeExamsEmployeeOperationCompleted);
            }
            this.InvokeAsync("getAllAptitudeExamsEmployee", new object[] {
                        pToken,
                        idEmployee}, this.getAllAptitudeExamsEmployeeOperationCompleted, userState);
        }
        
        private void OngetAllAptitudeExamsEmployeeOperationCompleted(object arg) {
            if ((this.getAllAptitudeExamsEmployeeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllAptitudeExamsEmployeeCompleted(this, new getAllAptitudeExamsEmployeeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/delEmployeeAptitudeExam", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int delEmployeeAptitudeExam(string pToken, string selectedIdAptitudeExamsEmployee) {
            object[] results = this.Invoke("delEmployeeAptitudeExam", new object[] {
                        pToken,
                        selectedIdAptitudeExamsEmployee});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void delEmployeeAptitudeExamAsync(string pToken, string selectedIdAptitudeExamsEmployee) {
            this.delEmployeeAptitudeExamAsync(pToken, selectedIdAptitudeExamsEmployee, null);
        }
        
        /// <remarks/>
        public void delEmployeeAptitudeExamAsync(string pToken, string selectedIdAptitudeExamsEmployee, object userState) {
            if ((this.delEmployeeAptitudeExamOperationCompleted == null)) {
                this.delEmployeeAptitudeExamOperationCompleted = new System.Threading.SendOrPostCallback(this.OndelEmployeeAptitudeExamOperationCompleted);
            }
            this.InvokeAsync("delEmployeeAptitudeExam", new object[] {
                        pToken,
                        selectedIdAptitudeExamsEmployee}, this.delEmployeeAptitudeExamOperationCompleted, userState);
        }
        
        private void OndelEmployeeAptitudeExamOperationCompleted(object arg) {
            if ((this.delEmployeeAptitudeExamCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.delEmployeeAptitudeExamCompleted(this, new delEmployeeAptitudeExamCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/addEmployeeAptitudeExams", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int addEmployeeAptitudeExams(string pToken, string idEmployee, string idExam, System.DateTime dateTime, System.DateTime exameDate, string description) {
            object[] results = this.Invoke("addEmployeeAptitudeExams", new object[] {
                        pToken,
                        idEmployee,
                        idExam,
                        dateTime,
                        exameDate,
                        description});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void addEmployeeAptitudeExamsAsync(string pToken, string idEmployee, string idExam, System.DateTime dateTime, System.DateTime exameDate, string description) {
            this.addEmployeeAptitudeExamsAsync(pToken, idEmployee, idExam, dateTime, exameDate, description, null);
        }
        
        /// <remarks/>
        public void addEmployeeAptitudeExamsAsync(string pToken, string idEmployee, string idExam, System.DateTime dateTime, System.DateTime exameDate, string description, object userState) {
            if ((this.addEmployeeAptitudeExamsOperationCompleted == null)) {
                this.addEmployeeAptitudeExamsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddEmployeeAptitudeExamsOperationCompleted);
            }
            this.InvokeAsync("addEmployeeAptitudeExams", new object[] {
                        pToken,
                        idEmployee,
                        idExam,
                        dateTime,
                        exameDate,
                        description}, this.addEmployeeAptitudeExamsOperationCompleted, userState);
        }
        
        private void OnaddEmployeeAptitudeExamsOperationCompleted(object arg) {
            if ((this.addEmployeeAptitudeExamsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addEmployeeAptitudeExamsCompleted(this, new addEmployeeAptitudeExamsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/updateEmployeeExams", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int updateEmployeeExams(string pToken, string selectedIdEmpExam, string idEmployee, string idExams, System.DateTime dateTime, System.DateTime exameDate, string description) {
            object[] results = this.Invoke("updateEmployeeExams", new object[] {
                        pToken,
                        selectedIdEmpExam,
                        idEmployee,
                        idExams,
                        dateTime,
                        exameDate,
                        description});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void updateEmployeeExamsAsync(string pToken, string selectedIdEmpExam, string idEmployee, string idExams, System.DateTime dateTime, System.DateTime exameDate, string description) {
            this.updateEmployeeExamsAsync(pToken, selectedIdEmpExam, idEmployee, idExams, dateTime, exameDate, description, null);
        }
        
        /// <remarks/>
        public void updateEmployeeExamsAsync(string pToken, string selectedIdEmpExam, string idEmployee, string idExams, System.DateTime dateTime, System.DateTime exameDate, string description, object userState) {
            if ((this.updateEmployeeExamsOperationCompleted == null)) {
                this.updateEmployeeExamsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateEmployeeExamsOperationCompleted);
            }
            this.InvokeAsync("updateEmployeeExams", new object[] {
                        pToken,
                        selectedIdEmpExam,
                        idEmployee,
                        idExams,
                        dateTime,
                        exameDate,
                        description}, this.updateEmployeeExamsOperationCompleted, userState);
        }
        
        private void OnupdateEmployeeExamsOperationCompleted(object arg) {
            if ((this.updateEmployeeExamsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateEmployeeExamsCompleted(this, new updateEmployeeExamsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getEmployeeDocuments", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable getEmployeeDocuments(string pToken, string idDocument) {
            object[] results = this.Invoke("getEmployeeDocuments", new object[] {
                        pToken,
                        idDocument});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void getEmployeeDocumentsAsync(string pToken, string idDocument) {
            this.getEmployeeDocumentsAsync(pToken, idDocument, null);
        }
        
        /// <remarks/>
        public void getEmployeeDocumentsAsync(string pToken, string idDocument, object userState) {
            if ((this.getEmployeeDocumentsOperationCompleted == null)) {
                this.getEmployeeDocumentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetEmployeeDocumentsOperationCompleted);
            }
            this.InvokeAsync("getEmployeeDocuments", new object[] {
                        pToken,
                        idDocument}, this.getEmployeeDocumentsOperationCompleted, userState);
        }
        
        private void OngetEmployeeDocumentsOperationCompleted(object arg) {
            if ((this.getEmployeeDocumentsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getEmployeeDocumentsCompleted(this, new getEmployeeDocumentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/addEmployeeDocuments", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int addEmployeeDocuments(string pToken, string idEmployee, string name, string path, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] documentBytes, System.DateTime expirationDate) {
            object[] results = this.Invoke("addEmployeeDocuments", new object[] {
                        pToken,
                        idEmployee,
                        name,
                        path,
                        documentBytes,
                        expirationDate});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void addEmployeeDocumentsAsync(string pToken, string idEmployee, string name, string path, byte[] documentBytes, System.DateTime expirationDate) {
            this.addEmployeeDocumentsAsync(pToken, idEmployee, name, path, documentBytes, expirationDate, null);
        }
        
        /// <remarks/>
        public void addEmployeeDocumentsAsync(string pToken, string idEmployee, string name, string path, byte[] documentBytes, System.DateTime expirationDate, object userState) {
            if ((this.addEmployeeDocumentsOperationCompleted == null)) {
                this.addEmployeeDocumentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddEmployeeDocumentsOperationCompleted);
            }
            this.InvokeAsync("addEmployeeDocuments", new object[] {
                        pToken,
                        idEmployee,
                        name,
                        path,
                        documentBytes,
                        expirationDate}, this.addEmployeeDocumentsOperationCompleted, userState);
        }
        
        private void OnaddEmployeeDocumentsOperationCompleted(object arg) {
            if ((this.addEmployeeDocumentsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addEmployeeDocumentsCompleted(this, new addEmployeeDocumentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/updateEmployeeDocuments", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int updateEmployeeDocuments(string pToken, string idDocument, System.DateTime expirationDate) {
            object[] results = this.Invoke("updateEmployeeDocuments", new object[] {
                        pToken,
                        idDocument,
                        expirationDate});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void updateEmployeeDocumentsAsync(string pToken, string idDocument, System.DateTime expirationDate) {
            this.updateEmployeeDocumentsAsync(pToken, idDocument, expirationDate, null);
        }
        
        /// <remarks/>
        public void updateEmployeeDocumentsAsync(string pToken, string idDocument, System.DateTime expirationDate, object userState) {
            if ((this.updateEmployeeDocumentsOperationCompleted == null)) {
                this.updateEmployeeDocumentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateEmployeeDocumentsOperationCompleted);
            }
            this.InvokeAsync("updateEmployeeDocuments", new object[] {
                        pToken,
                        idDocument,
                        expirationDate}, this.updateEmployeeDocumentsOperationCompleted, userState);
        }
        
        private void OnupdateEmployeeDocumentsOperationCompleted(object arg) {
            if ((this.updateEmployeeDocumentsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateEmployeeDocumentsCompleted(this, new updateEmployeeDocumentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/delEmployeeDocuments", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int delEmployeeDocuments(string pToken, string idDocument) {
            object[] results = this.Invoke("delEmployeeDocuments", new object[] {
                        pToken,
                        idDocument});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void delEmployeeDocumentsAsync(string pToken, string idDocument) {
            this.delEmployeeDocumentsAsync(pToken, idDocument, null);
        }
        
        /// <remarks/>
        public void delEmployeeDocumentsAsync(string pToken, string idDocument, object userState) {
            if ((this.delEmployeeDocumentsOperationCompleted == null)) {
                this.delEmployeeDocumentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OndelEmployeeDocumentsOperationCompleted);
            }
            this.InvokeAsync("delEmployeeDocuments", new object[] {
                        pToken,
                        idDocument}, this.delEmployeeDocumentsOperationCompleted, userState);
        }
        
        private void OndelEmployeeDocumentsOperationCompleted(object arg) {
            if ((this.delEmployeeDocumentsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.delEmployeeDocumentsCompleted(this, new delEmployeeDocumentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getAllTraining", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable getAllTraining(string pToken, string idTraining) {
            object[] results = this.Invoke("getAllTraining", new object[] {
                        pToken,
                        idTraining});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void getAllTrainingAsync(string pToken, string idTraining) {
            this.getAllTrainingAsync(pToken, idTraining, null);
        }
        
        /// <remarks/>
        public void getAllTrainingAsync(string pToken, string idTraining, object userState) {
            if ((this.getAllTrainingOperationCompleted == null)) {
                this.getAllTrainingOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllTrainingOperationCompleted);
            }
            this.InvokeAsync("getAllTraining", new object[] {
                        pToken,
                        idTraining}, this.getAllTrainingOperationCompleted, userState);
        }
        
        private void OngetAllTrainingOperationCompleted(object arg) {
            if ((this.getAllTrainingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllTrainingCompleted(this, new getAllTrainingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/addTraining", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int addTraining(string pToken, string idEmployee, string trainingName, System.DateTime trainingDate, string trainingDescription, int numberOfHours, bool presence, bool efficiency) {
            object[] results = this.Invoke("addTraining", new object[] {
                        pToken,
                        idEmployee,
                        trainingName,
                        trainingDate,
                        trainingDescription,
                        numberOfHours,
                        presence,
                        efficiency});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void addTrainingAsync(string pToken, string idEmployee, string trainingName, System.DateTime trainingDate, string trainingDescription, int numberOfHours, bool presence, bool efficiency) {
            this.addTrainingAsync(pToken, idEmployee, trainingName, trainingDate, trainingDescription, numberOfHours, presence, efficiency, null);
        }
        
        /// <remarks/>
        public void addTrainingAsync(string pToken, string idEmployee, string trainingName, System.DateTime trainingDate, string trainingDescription, int numberOfHours, bool presence, bool efficiency, object userState) {
            if ((this.addTrainingOperationCompleted == null)) {
                this.addTrainingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddTrainingOperationCompleted);
            }
            this.InvokeAsync("addTraining", new object[] {
                        pToken,
                        idEmployee,
                        trainingName,
                        trainingDate,
                        trainingDescription,
                        numberOfHours,
                        presence,
                        efficiency}, this.addTrainingOperationCompleted, userState);
        }
        
        private void OnaddTrainingOperationCompleted(object arg) {
            if ((this.addTrainingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addTrainingCompleted(this, new addTrainingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/updateTraining", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int updateTraining(string pToken, string idTraining, string idEmployee, string trainingName, System.DateTime trainingDate, string trainingDescription, int numberOfHours, bool presence, bool efficiency) {
            object[] results = this.Invoke("updateTraining", new object[] {
                        pToken,
                        idTraining,
                        idEmployee,
                        trainingName,
                        trainingDate,
                        trainingDescription,
                        numberOfHours,
                        presence,
                        efficiency});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void updateTrainingAsync(string pToken, string idTraining, string idEmployee, string trainingName, System.DateTime trainingDate, string trainingDescription, int numberOfHours, bool presence, bool efficiency) {
            this.updateTrainingAsync(pToken, idTraining, idEmployee, trainingName, trainingDate, trainingDescription, numberOfHours, presence, efficiency, null);
        }
        
        /// <remarks/>
        public void updateTrainingAsync(string pToken, string idTraining, string idEmployee, string trainingName, System.DateTime trainingDate, string trainingDescription, int numberOfHours, bool presence, bool efficiency, object userState) {
            if ((this.updateTrainingOperationCompleted == null)) {
                this.updateTrainingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateTrainingOperationCompleted);
            }
            this.InvokeAsync("updateTraining", new object[] {
                        pToken,
                        idTraining,
                        idEmployee,
                        trainingName,
                        trainingDate,
                        trainingDescription,
                        numberOfHours,
                        presence,
                        efficiency}, this.updateTrainingOperationCompleted, userState);
        }
        
        private void OnupdateTrainingOperationCompleted(object arg) {
            if ((this.updateTrainingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateTrainingCompleted(this, new updateTrainingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/delTraining", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int delTraining(string pToken, string idTraining) {
            object[] results = this.Invoke("delTraining", new object[] {
                        pToken,
                        idTraining});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void delTrainingAsync(string pToken, string idTraining) {
            this.delTrainingAsync(pToken, idTraining, null);
        }
        
        /// <remarks/>
        public void delTrainingAsync(string pToken, string idTraining, object userState) {
            if ((this.delTrainingOperationCompleted == null)) {
                this.delTrainingOperationCompleted = new System.Threading.SendOrPostCallback(this.OndelTrainingOperationCompleted);
            }
            this.InvokeAsync("delTraining", new object[] {
                        pToken,
                        idTraining}, this.delTrainingOperationCompleted, userState);
        }
        
        private void OndelTrainingOperationCompleted(object arg) {
            if ((this.delTrainingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.delTrainingCompleted(this, new delTrainingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getAllActivationsEmploy", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable getAllActivationsEmploy(string pToken, string idEmployee) {
            object[] results = this.Invoke("getAllActivationsEmploy", new object[] {
                        pToken,
                        idEmployee});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void getAllActivationsEmployAsync(string pToken, string idEmployee) {
            this.getAllActivationsEmployAsync(pToken, idEmployee, null);
        }
        
        /// <remarks/>
        public void getAllActivationsEmployAsync(string pToken, string idEmployee, object userState) {
            if ((this.getAllActivationsEmployOperationCompleted == null)) {
                this.getAllActivationsEmployOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllActivationsEmployOperationCompleted);
            }
            this.InvokeAsync("getAllActivationsEmploy", new object[] {
                        pToken,
                        idEmployee}, this.getAllActivationsEmployOperationCompleted, userState);
        }
        
        private void OngetAllActivationsEmployOperationCompleted(object arg) {
            if ((this.getAllActivationsEmployCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllActivationsEmployCompleted(this, new getAllActivationsEmployCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/delEmployeeActivation", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int delEmployeeActivation(string pToken, string selectedIdActiv) {
            object[] results = this.Invoke("delEmployeeActivation", new object[] {
                        pToken,
                        selectedIdActiv});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void delEmployeeActivationAsync(string pToken, string selectedIdActiv) {
            this.delEmployeeActivationAsync(pToken, selectedIdActiv, null);
        }
        
        /// <remarks/>
        public void delEmployeeActivationAsync(string pToken, string selectedIdActiv, object userState) {
            if ((this.delEmployeeActivationOperationCompleted == null)) {
                this.delEmployeeActivationOperationCompleted = new System.Threading.SendOrPostCallback(this.OndelEmployeeActivationOperationCompleted);
            }
            this.InvokeAsync("delEmployeeActivation", new object[] {
                        pToken,
                        selectedIdActiv}, this.delEmployeeActivationOperationCompleted, userState);
        }
        
        private void OndelEmployeeActivationOperationCompleted(object arg) {
            if ((this.delEmployeeActivationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.delEmployeeActivationCompleted(this, new delEmployeeActivationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/addEmployeeActivation", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int addEmployeeActivation(string pToken, string idEmployee, string activ, System.DateTime startDate) {
            object[] results = this.Invoke("addEmployeeActivation", new object[] {
                        pToken,
                        idEmployee,
                        activ,
                        startDate});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void addEmployeeActivationAsync(string pToken, string idEmployee, string activ, System.DateTime startDate) {
            this.addEmployeeActivationAsync(pToken, idEmployee, activ, startDate, null);
        }
        
        /// <remarks/>
        public void addEmployeeActivationAsync(string pToken, string idEmployee, string activ, System.DateTime startDate, object userState) {
            if ((this.addEmployeeActivationOperationCompleted == null)) {
                this.addEmployeeActivationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddEmployeeActivationOperationCompleted);
            }
            this.InvokeAsync("addEmployeeActivation", new object[] {
                        pToken,
                        idEmployee,
                        activ,
                        startDate}, this.addEmployeeActivationOperationCompleted, userState);
        }
        
        private void OnaddEmployeeActivationOperationCompleted(object arg) {
            if ((this.addEmployeeActivationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addEmployeeActivationCompleted(this, new addEmployeeActivationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/delBreak", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int delBreak(string pToken, string idBreak) {
            object[] results = this.Invoke("delBreak", new object[] {
                        pToken,
                        idBreak});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void delBreakAsync(string pToken, string idBreak) {
            this.delBreakAsync(pToken, idBreak, null);
        }
        
        /// <remarks/>
        public void delBreakAsync(string pToken, string idBreak, object userState) {
            if ((this.delBreakOperationCompleted == null)) {
                this.delBreakOperationCompleted = new System.Threading.SendOrPostCallback(this.OndelBreakOperationCompleted);
            }
            this.InvokeAsync("delBreak", new object[] {
                        pToken,
                        idBreak}, this.delBreakOperationCompleted, userState);
        }
        
        private void OndelBreakOperationCompleted(object arg) {
            if ((this.delBreakCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.delBreakCompleted(this, new delBreakCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/updateBreaks", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int updateBreaks(string pToken, string idBreaks, string breakType, System.DateTime duration, System.DateTime startHour, System.DateTime stopHour, System.DateTime startExitHour, System.DateTime stopExitHour, System.DateTime startEntryHour, System.DateTime stopEntryHour) {
            object[] results = this.Invoke("updateBreaks", new object[] {
                        pToken,
                        idBreaks,
                        breakType,
                        duration,
                        startHour,
                        stopHour,
                        startExitHour,
                        stopExitHour,
                        startEntryHour,
                        stopEntryHour});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void updateBreaksAsync(string pToken, string idBreaks, string breakType, System.DateTime duration, System.DateTime startHour, System.DateTime stopHour, System.DateTime startExitHour, System.DateTime stopExitHour, System.DateTime startEntryHour, System.DateTime stopEntryHour) {
            this.updateBreaksAsync(pToken, idBreaks, breakType, duration, startHour, stopHour, startExitHour, stopExitHour, startEntryHour, stopEntryHour, null);
        }
        
        /// <remarks/>
        public void updateBreaksAsync(string pToken, string idBreaks, string breakType, System.DateTime duration, System.DateTime startHour, System.DateTime stopHour, System.DateTime startExitHour, System.DateTime stopExitHour, System.DateTime startEntryHour, System.DateTime stopEntryHour, object userState) {
            if ((this.updateBreaksOperationCompleted == null)) {
                this.updateBreaksOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateBreaksOperationCompleted);
            }
            this.InvokeAsync("updateBreaks", new object[] {
                        pToken,
                        idBreaks,
                        breakType,
                        duration,
                        startHour,
                        stopHour,
                        startExitHour,
                        stopExitHour,
                        startEntryHour,
                        stopEntryHour}, this.updateBreaksOperationCompleted, userState);
        }
        
        private void OnupdateBreaksOperationCompleted(object arg) {
            if ((this.updateBreaksCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateBreaksCompleted(this, new updateBreaksCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/addMonthSchedules", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string addMonthSchedules(
                    string pToken, 
                    string day1, 
                    string day2, 
                    string day3, 
                    string day4, 
                    string day5, 
                    string day6, 
                    string day7, 
                    string day8, 
                    string day9, 
                    string day10, 
                    string day11, 
                    string day12, 
                    string day13, 
                    string day14, 
                    string day15, 
                    string day16, 
                    string day17, 
                    string day18, 
                    string day19, 
                    string day20, 
                    string day21, 
                    string day22, 
                    string day23, 
                    string day24, 
                    string day25, 
                    string day26, 
                    string day27, 
                    string day28, 
                    string day29, 
                    string day30, 
                    string day31) {
            object[] results = this.Invoke("addMonthSchedules", new object[] {
                        pToken,
                        day1,
                        day2,
                        day3,
                        day4,
                        day5,
                        day6,
                        day7,
                        day8,
                        day9,
                        day10,
                        day11,
                        day12,
                        day13,
                        day14,
                        day15,
                        day16,
                        day17,
                        day18,
                        day19,
                        day20,
                        day21,
                        day22,
                        day23,
                        day24,
                        day25,
                        day26,
                        day27,
                        day28,
                        day29,
                        day30,
                        day31});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void addMonthSchedulesAsync(
                    string pToken, 
                    string day1, 
                    string day2, 
                    string day3, 
                    string day4, 
                    string day5, 
                    string day6, 
                    string day7, 
                    string day8, 
                    string day9, 
                    string day10, 
                    string day11, 
                    string day12, 
                    string day13, 
                    string day14, 
                    string day15, 
                    string day16, 
                    string day17, 
                    string day18, 
                    string day19, 
                    string day20, 
                    string day21, 
                    string day22, 
                    string day23, 
                    string day24, 
                    string day25, 
                    string day26, 
                    string day27, 
                    string day28, 
                    string day29, 
                    string day30, 
                    string day31) {
            this.addMonthSchedulesAsync(pToken, day1, day2, day3, day4, day5, day6, day7, day8, day9, day10, day11, day12, day13, day14, day15, day16, day17, day18, day19, day20, day21, day22, day23, day24, day25, day26, day27, day28, day29, day30, day31, null);
        }
        
        /// <remarks/>
        public void addMonthSchedulesAsync(
                    string pToken, 
                    string day1, 
                    string day2, 
                    string day3, 
                    string day4, 
                    string day5, 
                    string day6, 
                    string day7, 
                    string day8, 
                    string day9, 
                    string day10, 
                    string day11, 
                    string day12, 
                    string day13, 
                    string day14, 
                    string day15, 
                    string day16, 
                    string day17, 
                    string day18, 
                    string day19, 
                    string day20, 
                    string day21, 
                    string day22, 
                    string day23, 
                    string day24, 
                    string day25, 
                    string day26, 
                    string day27, 
                    string day28, 
                    string day29, 
                    string day30, 
                    string day31, 
                    object userState) {
            if ((this.addMonthSchedulesOperationCompleted == null)) {
                this.addMonthSchedulesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddMonthSchedulesOperationCompleted);
            }
            this.InvokeAsync("addMonthSchedules", new object[] {
                        pToken,
                        day1,
                        day2,
                        day3,
                        day4,
                        day5,
                        day6,
                        day7,
                        day8,
                        day9,
                        day10,
                        day11,
                        day12,
                        day13,
                        day14,
                        day15,
                        day16,
                        day17,
                        day18,
                        day19,
                        day20,
                        day21,
                        day22,
                        day23,
                        day24,
                        day25,
                        day26,
                        day27,
                        day28,
                        day29,
                        day30,
                        day31}, this.addMonthSchedulesOperationCompleted, userState);
        }
        
        private void OnaddMonthSchedulesOperationCompleted(object arg) {
            if ((this.addMonthSchedulesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addMonthSchedulesCompleted(this, new addMonthSchedulesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/updateMonthSchedules", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int updateMonthSchedules(
                    string pToken, 
                    string idMonthSchedules, 
                    string day1, 
                    string day2, 
                    string day3, 
                    string day4, 
                    string day5, 
                    string day6, 
                    string day7, 
                    string day8, 
                    string day9, 
                    string day10, 
                    string day11, 
                    string day12, 
                    string day13, 
                    string day14, 
                    string day15, 
                    string day16, 
                    string day17, 
                    string day18, 
                    string day19, 
                    string day20, 
                    string day21, 
                    string day22, 
                    string day23, 
                    string day24, 
                    string day25, 
                    string day26, 
                    string day27, 
                    string day28, 
                    string day29, 
                    string day30, 
                    string day31) {
            object[] results = this.Invoke("updateMonthSchedules", new object[] {
                        pToken,
                        idMonthSchedules,
                        day1,
                        day2,
                        day3,
                        day4,
                        day5,
                        day6,
                        day7,
                        day8,
                        day9,
                        day10,
                        day11,
                        day12,
                        day13,
                        day14,
                        day15,
                        day16,
                        day17,
                        day18,
                        day19,
                        day20,
                        day21,
                        day22,
                        day23,
                        day24,
                        day25,
                        day26,
                        day27,
                        day28,
                        day29,
                        day30,
                        day31});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void updateMonthSchedulesAsync(
                    string pToken, 
                    string idMonthSchedules, 
                    string day1, 
                    string day2, 
                    string day3, 
                    string day4, 
                    string day5, 
                    string day6, 
                    string day7, 
                    string day8, 
                    string day9, 
                    string day10, 
                    string day11, 
                    string day12, 
                    string day13, 
                    string day14, 
                    string day15, 
                    string day16, 
                    string day17, 
                    string day18, 
                    string day19, 
                    string day20, 
                    string day21, 
                    string day22, 
                    string day23, 
                    string day24, 
                    string day25, 
                    string day26, 
                    string day27, 
                    string day28, 
                    string day29, 
                    string day30, 
                    string day31) {
            this.updateMonthSchedulesAsync(pToken, idMonthSchedules, day1, day2, day3, day4, day5, day6, day7, day8, day9, day10, day11, day12, day13, day14, day15, day16, day17, day18, day19, day20, day21, day22, day23, day24, day25, day26, day27, day28, day29, day30, day31, null);
        }
        
        /// <remarks/>
        public void updateMonthSchedulesAsync(
                    string pToken, 
                    string idMonthSchedules, 
                    string day1, 
                    string day2, 
                    string day3, 
                    string day4, 
                    string day5, 
                    string day6, 
                    string day7, 
                    string day8, 
                    string day9, 
                    string day10, 
                    string day11, 
                    string day12, 
                    string day13, 
                    string day14, 
                    string day15, 
                    string day16, 
                    string day17, 
                    string day18, 
                    string day19, 
                    string day20, 
                    string day21, 
                    string day22, 
                    string day23, 
                    string day24, 
                    string day25, 
                    string day26, 
                    string day27, 
                    string day28, 
                    string day29, 
                    string day30, 
                    string day31, 
                    object userState) {
            if ((this.updateMonthSchedulesOperationCompleted == null)) {
                this.updateMonthSchedulesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateMonthSchedulesOperationCompleted);
            }
            this.InvokeAsync("updateMonthSchedules", new object[] {
                        pToken,
                        idMonthSchedules,
                        day1,
                        day2,
                        day3,
                        day4,
                        day5,
                        day6,
                        day7,
                        day8,
                        day9,
                        day10,
                        day11,
                        day12,
                        day13,
                        day14,
                        day15,
                        day16,
                        day17,
                        day18,
                        day19,
                        day20,
                        day21,
                        day22,
                        day23,
                        day24,
                        day25,
                        day26,
                        day27,
                        day28,
                        day29,
                        day30,
                        day31}, this.updateMonthSchedulesOperationCompleted, userState);
        }
        
        private void OnupdateMonthSchedulesOperationCompleted(object arg) {
            if ((this.updateMonthSchedulesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateMonthSchedulesCompleted(this, new updateMonthSchedulesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/delWorkPlane", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int delWorkPlane(string pToken, string idProfile, System.DateTime date) {
            object[] results = this.Invoke("delWorkPlane", new object[] {
                        pToken,
                        idProfile,
                        date});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void delWorkPlaneAsync(string pToken, string idProfile, System.DateTime date) {
            this.delWorkPlaneAsync(pToken, idProfile, date, null);
        }
        
        /// <remarks/>
        public void delWorkPlaneAsync(string pToken, string idProfile, System.DateTime date, object userState) {
            if ((this.delWorkPlaneOperationCompleted == null)) {
                this.delWorkPlaneOperationCompleted = new System.Threading.SendOrPostCallback(this.OndelWorkPlaneOperationCompleted);
            }
            this.InvokeAsync("delWorkPlane", new object[] {
                        pToken,
                        idProfile,
                        date}, this.delWorkPlaneOperationCompleted, userState);
        }
        
        private void OndelWorkPlaneOperationCompleted(object arg) {
            if ((this.delWorkPlaneCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.delWorkPlaneCompleted(this, new delWorkPlaneCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getAllMonthSchedules", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getAllMonthSchedules(string pToken) {
            object[] results = this.Invoke("getAllMonthSchedules", new object[] {
                        pToken});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getAllMonthSchedulesAsync(string pToken) {
            this.getAllMonthSchedulesAsync(pToken, null);
        }
        
        /// <remarks/>
        public void getAllMonthSchedulesAsync(string pToken, object userState) {
            if ((this.getAllMonthSchedulesOperationCompleted == null)) {
                this.getAllMonthSchedulesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllMonthSchedulesOperationCompleted);
            }
            this.InvokeAsync("getAllMonthSchedules", new object[] {
                        pToken}, this.getAllMonthSchedulesOperationCompleted, userState);
        }
        
        private void OngetAllMonthSchedulesOperationCompleted(object arg) {
            if ((this.getAllMonthSchedulesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllMonthSchedulesCompleted(this, new getAllMonthSchedulesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getAllscalesServices", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getAllscalesServices(string pToken) {
            object[] results = this.Invoke("getAllscalesServices", new object[] {
                        pToken});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getAllscalesServicesAsync(string pToken) {
            this.getAllscalesServicesAsync(pToken, null);
        }
        
        /// <remarks/>
        public void getAllscalesServicesAsync(string pToken, object userState) {
            if ((this.getAllscalesServicesOperationCompleted == null)) {
                this.getAllscalesServicesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllscalesServicesOperationCompleted);
            }
            this.InvokeAsync("getAllscalesServices", new object[] {
                        pToken}, this.getAllscalesServicesOperationCompleted, userState);
        }
        
        private void OngetAllscalesServicesOperationCompleted(object arg) {
            if ((this.getAllscalesServicesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllscalesServicesCompleted(this, new getAllscalesServicesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getScalesServices", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getScalesServices(string pToken, string idScalesServices) {
            object[] results = this.Invoke("getScalesServices", new object[] {
                        pToken,
                        idScalesServices});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getScalesServicesAsync(string pToken, string idScalesServices) {
            this.getScalesServicesAsync(pToken, idScalesServices, null);
        }
        
        /// <remarks/>
        public void getScalesServicesAsync(string pToken, string idScalesServices, object userState) {
            if ((this.getScalesServicesOperationCompleted == null)) {
                this.getScalesServicesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetScalesServicesOperationCompleted);
            }
            this.InvokeAsync("getScalesServices", new object[] {
                        pToken,
                        idScalesServices}, this.getScalesServicesOperationCompleted, userState);
        }
        
        private void OngetScalesServicesOperationCompleted(object arg) {
            if ((this.getScalesServicesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getScalesServicesCompleted(this, new getScalesServicesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getScalesServicesEmployee", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getScalesServicesEmployee(string pToken, string idScalesServices) {
            object[] results = this.Invoke("getScalesServicesEmployee", new object[] {
                        pToken,
                        idScalesServices});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getScalesServicesEmployeeAsync(string pToken, string idScalesServices) {
            this.getScalesServicesEmployeeAsync(pToken, idScalesServices, null);
        }
        
        /// <remarks/>
        public void getScalesServicesEmployeeAsync(string pToken, string idScalesServices, object userState) {
            if ((this.getScalesServicesEmployeeOperationCompleted == null)) {
                this.getScalesServicesEmployeeOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetScalesServicesEmployeeOperationCompleted);
            }
            this.InvokeAsync("getScalesServicesEmployee", new object[] {
                        pToken,
                        idScalesServices}, this.getScalesServicesEmployeeOperationCompleted, userState);
        }
        
        private void OngetScalesServicesEmployeeOperationCompleted(object arg) {
            if ((this.getScalesServicesEmployeeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getScalesServicesEmployeeCompleted(this, new getScalesServicesEmployeeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/delScalesServices", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int delScalesServices(string pToken, string idScalesServices) {
            object[] results = this.Invoke("delScalesServices", new object[] {
                        pToken,
                        idScalesServices});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void delScalesServicesAsync(string pToken, string idScalesServices) {
            this.delScalesServicesAsync(pToken, idScalesServices, null);
        }
        
        /// <remarks/>
        public void delScalesServicesAsync(string pToken, string idScalesServices, object userState) {
            if ((this.delScalesServicesOperationCompleted == null)) {
                this.delScalesServicesOperationCompleted = new System.Threading.SendOrPostCallback(this.OndelScalesServicesOperationCompleted);
            }
            this.InvokeAsync("delScalesServices", new object[] {
                        pToken,
                        idScalesServices}, this.delScalesServicesOperationCompleted, userState);
        }
        
        private void OndelScalesServicesOperationCompleted(object arg) {
            if ((this.delScalesServicesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.delScalesServicesCompleted(this, new delScalesServicesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/updateScalesServices", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int updateScalesServices(
                    string pToken, 
                    string idScalesServices, 
                    string idFather, 
                    string name, 
                    int unitary, 
                    string description, 
                    int minEmp, 
                    int maxEmp, 
                    int switchTimeLim, 
                    int prefTimeLim, 
                    string code, 
                    string abbre, 
                    string xmlRules, 
                    string idDep, 
                    string otherText, 
                    System.DateTime init, 
                    System.DateTime end, 
                    string clientName, 
                    string clientPhone, 
                    string clientMail, 
                    int servicePeriod, 
                    string servType, 
                    string financeData, 
                    string contactPerson, 
                    string inspPeriod, 
                    string serviceLocal, 
                    string serviceResp, 
                    string characterizationPhysicalSpace, 
                    string deliverReport, 
                    string reportFrequency) {
            object[] results = this.Invoke("updateScalesServices", new object[] {
                        pToken,
                        idScalesServices,
                        idFather,
                        name,
                        unitary,
                        description,
                        minEmp,
                        maxEmp,
                        switchTimeLim,
                        prefTimeLim,
                        code,
                        abbre,
                        xmlRules,
                        idDep,
                        otherText,
                        init,
                        end,
                        clientName,
                        clientPhone,
                        clientMail,
                        servicePeriod,
                        servType,
                        financeData,
                        contactPerson,
                        inspPeriod,
                        serviceLocal,
                        serviceResp,
                        characterizationPhysicalSpace,
                        deliverReport,
                        reportFrequency});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void updateScalesServicesAsync(
                    string pToken, 
                    string idScalesServices, 
                    string idFather, 
                    string name, 
                    int unitary, 
                    string description, 
                    int minEmp, 
                    int maxEmp, 
                    int switchTimeLim, 
                    int prefTimeLim, 
                    string code, 
                    string abbre, 
                    string xmlRules, 
                    string idDep, 
                    string otherText, 
                    System.DateTime init, 
                    System.DateTime end, 
                    string clientName, 
                    string clientPhone, 
                    string clientMail, 
                    int servicePeriod, 
                    string servType, 
                    string financeData, 
                    string contactPerson, 
                    string inspPeriod, 
                    string serviceLocal, 
                    string serviceResp, 
                    string characterizationPhysicalSpace, 
                    string deliverReport, 
                    string reportFrequency) {
            this.updateScalesServicesAsync(pToken, idScalesServices, idFather, name, unitary, description, minEmp, maxEmp, switchTimeLim, prefTimeLim, code, abbre, xmlRules, idDep, otherText, init, end, clientName, clientPhone, clientMail, servicePeriod, servType, financeData, contactPerson, inspPeriod, serviceLocal, serviceResp, characterizationPhysicalSpace, deliverReport, reportFrequency, null);
        }
        
        /// <remarks/>
        public void updateScalesServicesAsync(
                    string pToken, 
                    string idScalesServices, 
                    string idFather, 
                    string name, 
                    int unitary, 
                    string description, 
                    int minEmp, 
                    int maxEmp, 
                    int switchTimeLim, 
                    int prefTimeLim, 
                    string code, 
                    string abbre, 
                    string xmlRules, 
                    string idDep, 
                    string otherText, 
                    System.DateTime init, 
                    System.DateTime end, 
                    string clientName, 
                    string clientPhone, 
                    string clientMail, 
                    int servicePeriod, 
                    string servType, 
                    string financeData, 
                    string contactPerson, 
                    string inspPeriod, 
                    string serviceLocal, 
                    string serviceResp, 
                    string characterizationPhysicalSpace, 
                    string deliverReport, 
                    string reportFrequency, 
                    object userState) {
            if ((this.updateScalesServicesOperationCompleted == null)) {
                this.updateScalesServicesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateScalesServicesOperationCompleted);
            }
            this.InvokeAsync("updateScalesServices", new object[] {
                        pToken,
                        idScalesServices,
                        idFather,
                        name,
                        unitary,
                        description,
                        minEmp,
                        maxEmp,
                        switchTimeLim,
                        prefTimeLim,
                        code,
                        abbre,
                        xmlRules,
                        idDep,
                        otherText,
                        init,
                        end,
                        clientName,
                        clientPhone,
                        clientMail,
                        servicePeriod,
                        servType,
                        financeData,
                        contactPerson,
                        inspPeriod,
                        serviceLocal,
                        serviceResp,
                        characterizationPhysicalSpace,
                        deliverReport,
                        reportFrequency}, this.updateScalesServicesOperationCompleted, userState);
        }
        
        private void OnupdateScalesServicesOperationCompleted(object arg) {
            if ((this.updateScalesServicesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateScalesServicesCompleted(this, new updateScalesServicesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/addScalesServices", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string addScalesServices(
                    string pToken, 
                    string idFather, 
                    string name, 
                    int unitary, 
                    string description, 
                    int minEmp, 
                    int maxEmp, 
                    int switchTimeLim, 
                    int prefTimeLim, 
                    string code, 
                    string abbre, 
                    string xmlRules, 
                    string idDep, 
                    string otherText, 
                    System.DateTime init, 
                    System.DateTime end, 
                    string clientName, 
                    string clientPhone, 
                    string clientMail, 
                    int servicePeriod, 
                    string servType, 
                    string financeData, 
                    string contactPerson, 
                    string inspPeriod, 
                    string serviceLocal, 
                    string serviceResp, 
                    string characterizationPhysicalSpace, 
                    string deliverReport, 
                    string reportFrequency) {
            object[] results = this.Invoke("addScalesServices", new object[] {
                        pToken,
                        idFather,
                        name,
                        unitary,
                        description,
                        minEmp,
                        maxEmp,
                        switchTimeLim,
                        prefTimeLim,
                        code,
                        abbre,
                        xmlRules,
                        idDep,
                        otherText,
                        init,
                        end,
                        clientName,
                        clientPhone,
                        clientMail,
                        servicePeriod,
                        servType,
                        financeData,
                        contactPerson,
                        inspPeriod,
                        serviceLocal,
                        serviceResp,
                        characterizationPhysicalSpace,
                        deliverReport,
                        reportFrequency});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void addScalesServicesAsync(
                    string pToken, 
                    string idFather, 
                    string name, 
                    int unitary, 
                    string description, 
                    int minEmp, 
                    int maxEmp, 
                    int switchTimeLim, 
                    int prefTimeLim, 
                    string code, 
                    string abbre, 
                    string xmlRules, 
                    string idDep, 
                    string otherText, 
                    System.DateTime init, 
                    System.DateTime end, 
                    string clientName, 
                    string clientPhone, 
                    string clientMail, 
                    int servicePeriod, 
                    string servType, 
                    string financeData, 
                    string contactPerson, 
                    string inspPeriod, 
                    string serviceLocal, 
                    string serviceResp, 
                    string characterizationPhysicalSpace, 
                    string deliverReport, 
                    string reportFrequency) {
            this.addScalesServicesAsync(pToken, idFather, name, unitary, description, minEmp, maxEmp, switchTimeLim, prefTimeLim, code, abbre, xmlRules, idDep, otherText, init, end, clientName, clientPhone, clientMail, servicePeriod, servType, financeData, contactPerson, inspPeriod, serviceLocal, serviceResp, characterizationPhysicalSpace, deliverReport, reportFrequency, null);
        }
        
        /// <remarks/>
        public void addScalesServicesAsync(
                    string pToken, 
                    string idFather, 
                    string name, 
                    int unitary, 
                    string description, 
                    int minEmp, 
                    int maxEmp, 
                    int switchTimeLim, 
                    int prefTimeLim, 
                    string code, 
                    string abbre, 
                    string xmlRules, 
                    string idDep, 
                    string otherText, 
                    System.DateTime init, 
                    System.DateTime end, 
                    string clientName, 
                    string clientPhone, 
                    string clientMail, 
                    int servicePeriod, 
                    string servType, 
                    string financeData, 
                    string contactPerson, 
                    string inspPeriod, 
                    string serviceLocal, 
                    string serviceResp, 
                    string characterizationPhysicalSpace, 
                    string deliverReport, 
                    string reportFrequency, 
                    object userState) {
            if ((this.addScalesServicesOperationCompleted == null)) {
                this.addScalesServicesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddScalesServicesOperationCompleted);
            }
            this.InvokeAsync("addScalesServices", new object[] {
                        pToken,
                        idFather,
                        name,
                        unitary,
                        description,
                        minEmp,
                        maxEmp,
                        switchTimeLim,
                        prefTimeLim,
                        code,
                        abbre,
                        xmlRules,
                        idDep,
                        otherText,
                        init,
                        end,
                        clientName,
                        clientPhone,
                        clientMail,
                        servicePeriod,
                        servType,
                        financeData,
                        contactPerson,
                        inspPeriod,
                        serviceLocal,
                        serviceResp,
                        characterizationPhysicalSpace,
                        deliverReport,
                        reportFrequency}, this.addScalesServicesOperationCompleted, userState);
        }
        
        private void OnaddScalesServicesOperationCompleted(object arg) {
            if ((this.addScalesServicesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addScalesServicesCompleted(this, new addScalesServicesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/delEmployeeScalesServices", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int delEmployeeScalesServices(string pToken, string idScalesServices) {
            object[] results = this.Invoke("delEmployeeScalesServices", new object[] {
                        pToken,
                        idScalesServices});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void delEmployeeScalesServicesAsync(string pToken, string idScalesServices) {
            this.delEmployeeScalesServicesAsync(pToken, idScalesServices, null);
        }
        
        /// <remarks/>
        public void delEmployeeScalesServicesAsync(string pToken, string idScalesServices, object userState) {
            if ((this.delEmployeeScalesServicesOperationCompleted == null)) {
                this.delEmployeeScalesServicesOperationCompleted = new System.Threading.SendOrPostCallback(this.OndelEmployeeScalesServicesOperationCompleted);
            }
            this.InvokeAsync("delEmployeeScalesServices", new object[] {
                        pToken,
                        idScalesServices}, this.delEmployeeScalesServicesOperationCompleted, userState);
        }
        
        private void OndelEmployeeScalesServicesOperationCompleted(object arg) {
            if ((this.delEmployeeScalesServicesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.delEmployeeScalesServicesCompleted(this, new delEmployeeScalesServicesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getScalesServicesOfEmployee", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getScalesServicesOfEmployee(string pToken, string idEmployees) {
            object[] results = this.Invoke("getScalesServicesOfEmployee", new object[] {
                        pToken,
                        idEmployees});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getScalesServicesOfEmployeeAsync(string pToken, string idEmployees) {
            this.getScalesServicesOfEmployeeAsync(pToken, idEmployees, null);
        }
        
        /// <remarks/>
        public void getScalesServicesOfEmployeeAsync(string pToken, string idEmployees, object userState) {
            if ((this.getScalesServicesOfEmployeeOperationCompleted == null)) {
                this.getScalesServicesOfEmployeeOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetScalesServicesOfEmployeeOperationCompleted);
            }
            this.InvokeAsync("getScalesServicesOfEmployee", new object[] {
                        pToken,
                        idEmployees}, this.getScalesServicesOfEmployeeOperationCompleted, userState);
        }
        
        private void OngetScalesServicesOfEmployeeOperationCompleted(object arg) {
            if ((this.getScalesServicesOfEmployeeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getScalesServicesOfEmployeeCompleted(this, new getScalesServicesOfEmployeeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/setEmployeeScalesServices", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int setEmployeeScalesServices(string pToken, string idEmployee, object[] scalesServicesIds) {
            object[] results = this.Invoke("setEmployeeScalesServices", new object[] {
                        pToken,
                        idEmployee,
                        scalesServicesIds});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void setEmployeeScalesServicesAsync(string pToken, string idEmployee, object[] scalesServicesIds) {
            this.setEmployeeScalesServicesAsync(pToken, idEmployee, scalesServicesIds, null);
        }
        
        /// <remarks/>
        public void setEmployeeScalesServicesAsync(string pToken, string idEmployee, object[] scalesServicesIds, object userState) {
            if ((this.setEmployeeScalesServicesOperationCompleted == null)) {
                this.setEmployeeScalesServicesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetEmployeeScalesServicesOperationCompleted);
            }
            this.InvokeAsync("setEmployeeScalesServices", new object[] {
                        pToken,
                        idEmployee,
                        scalesServicesIds}, this.setEmployeeScalesServicesOperationCompleted, userState);
        }
        
        private void OnsetEmployeeScalesServicesOperationCompleted(object arg) {
            if ((this.setEmployeeScalesServicesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setEmployeeScalesServicesCompleted(this, new setEmployeeScalesServicesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/addUsers", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string addUsers(string pToken, string name, string email, string username, string password, bool active, string phone, string idEmployee, bool automaticApproval, bool changePasswordNextLogin, bool adminApproval) {
            object[] results = this.Invoke("addUsers", new object[] {
                        pToken,
                        name,
                        email,
                        username,
                        password,
                        active,
                        phone,
                        idEmployee,
                        automaticApproval,
                        changePasswordNextLogin,
                        adminApproval});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void addUsersAsync(string pToken, string name, string email, string username, string password, bool active, string phone, string idEmployee, bool automaticApproval, bool changePasswordNextLogin, bool adminApproval) {
            this.addUsersAsync(pToken, name, email, username, password, active, phone, idEmployee, automaticApproval, changePasswordNextLogin, adminApproval, null);
        }
        
        /// <remarks/>
        public void addUsersAsync(string pToken, string name, string email, string username, string password, bool active, string phone, string idEmployee, bool automaticApproval, bool changePasswordNextLogin, bool adminApproval, object userState) {
            if ((this.addUsersOperationCompleted == null)) {
                this.addUsersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddUsersOperationCompleted);
            }
            this.InvokeAsync("addUsers", new object[] {
                        pToken,
                        name,
                        email,
                        username,
                        password,
                        active,
                        phone,
                        idEmployee,
                        automaticApproval,
                        changePasswordNextLogin,
                        adminApproval}, this.addUsersOperationCompleted, userState);
        }
        
        private void OnaddUsersOperationCompleted(object arg) {
            if ((this.addUsersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addUsersCompleted(this, new addUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/changeUsers", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int changeUsers(string pToken, string name, string email, string username, bool active, string phone, string idEmployee, string idUser, bool automaticApproval, bool changePasswordNextLogin, bool adminApproval) {
            object[] results = this.Invoke("changeUsers", new object[] {
                        pToken,
                        name,
                        email,
                        username,
                        active,
                        phone,
                        idEmployee,
                        idUser,
                        automaticApproval,
                        changePasswordNextLogin,
                        adminApproval});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void changeUsersAsync(string pToken, string name, string email, string username, bool active, string phone, string idEmployee, string idUser, bool automaticApproval, bool changePasswordNextLogin, bool adminApproval) {
            this.changeUsersAsync(pToken, name, email, username, active, phone, idEmployee, idUser, automaticApproval, changePasswordNextLogin, adminApproval, null);
        }
        
        /// <remarks/>
        public void changeUsersAsync(string pToken, string name, string email, string username, bool active, string phone, string idEmployee, string idUser, bool automaticApproval, bool changePasswordNextLogin, bool adminApproval, object userState) {
            if ((this.changeUsersOperationCompleted == null)) {
                this.changeUsersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnchangeUsersOperationCompleted);
            }
            this.InvokeAsync("changeUsers", new object[] {
                        pToken,
                        name,
                        email,
                        username,
                        active,
                        phone,
                        idEmployee,
                        idUser,
                        automaticApproval,
                        changePasswordNextLogin,
                        adminApproval}, this.changeUsersOperationCompleted, userState);
        }
        
        private void OnchangeUsersOperationCompleted(object arg) {
            if ((this.changeUsersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.changeUsersCompleted(this, new changeUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/changeUsersPass", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int changeUsersPass(string pToken, string idUsers, string password) {
            object[] results = this.Invoke("changeUsersPass", new object[] {
                        pToken,
                        idUsers,
                        password});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void changeUsersPassAsync(string pToken, string idUsers, string password) {
            this.changeUsersPassAsync(pToken, idUsers, password, null);
        }
        
        /// <remarks/>
        public void changeUsersPassAsync(string pToken, string idUsers, string password, object userState) {
            if ((this.changeUsersPassOperationCompleted == null)) {
                this.changeUsersPassOperationCompleted = new System.Threading.SendOrPostCallback(this.OnchangeUsersPassOperationCompleted);
            }
            this.InvokeAsync("changeUsersPass", new object[] {
                        pToken,
                        idUsers,
                        password}, this.changeUsersPassOperationCompleted, userState);
        }
        
        private void OnchangeUsersPassOperationCompleted(object arg) {
            if ((this.changeUsersPassCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.changeUsersPassCompleted(this, new changeUsersPassCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/delUsers", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int delUsers(string pToken, string idAdministrators) {
            object[] results = this.Invoke("delUsers", new object[] {
                        pToken,
                        idAdministrators});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void delUsersAsync(string pToken, string idAdministrators) {
            this.delUsersAsync(pToken, idAdministrators, null);
        }
        
        /// <remarks/>
        public void delUsersAsync(string pToken, string idAdministrators, object userState) {
            if ((this.delUsersOperationCompleted == null)) {
                this.delUsersOperationCompleted = new System.Threading.SendOrPostCallback(this.OndelUsersOperationCompleted);
            }
            this.InvokeAsync("delUsers", new object[] {
                        pToken,
                        idAdministrators}, this.delUsersOperationCompleted, userState);
        }
        
        private void OndelUsersOperationCompleted(object arg) {
            if ((this.delUsersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.delUsersCompleted(this, new delUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getUsers", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getUsers(string login, string password, bool isEncrypted) {
            object[] results = this.Invoke("getUsers", new object[] {
                        login,
                        password,
                        isEncrypted});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getUsersAsync(string login, string password, bool isEncrypted) {
            this.getUsersAsync(login, password, isEncrypted, null);
        }
        
        /// <remarks/>
        public void getUsersAsync(string login, string password, bool isEncrypted, object userState) {
            if ((this.getUsersOperationCompleted == null)) {
                this.getUsersOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetUsersOperationCompleted);
            }
            this.InvokeAsync("getUsers", new object[] {
                        login,
                        password,
                        isEncrypted}, this.getUsersOperationCompleted, userState);
        }
        
        private void OngetUsersOperationCompleted(object arg) {
            if ((this.getUsersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getUsersCompleted(this, new getUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getUsersByLogin", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getUsersByLogin(string login) {
            object[] results = this.Invoke("getUsersByLogin", new object[] {
                        login});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getUsersByLoginAsync(string login) {
            this.getUsersByLoginAsync(login, null);
        }
        
        /// <remarks/>
        public void getUsersByLoginAsync(string login, object userState) {
            if ((this.getUsersByLoginOperationCompleted == null)) {
                this.getUsersByLoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetUsersByLoginOperationCompleted);
            }
            this.InvokeAsync("getUsersByLogin", new object[] {
                        login}, this.getUsersByLoginOperationCompleted, userState);
        }
        
        private void OngetUsersByLoginOperationCompleted(object arg) {
            if ((this.getUsersByLoginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getUsersByLoginCompleted(this, new getUsersByLoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getUserId", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getUserId(string pToken, string username) {
            object[] results = this.Invoke("getUserId", new object[] {
                        pToken,
                        username});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getUserIdAsync(string pToken, string username) {
            this.getUserIdAsync(pToken, username, null);
        }
        
        /// <remarks/>
        public void getUserIdAsync(string pToken, string username, object userState) {
            if ((this.getUserIdOperationCompleted == null)) {
                this.getUserIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetUserIdOperationCompleted);
            }
            this.InvokeAsync("getUserId", new object[] {
                        pToken,
                        username}, this.getUserIdOperationCompleted, userState);
        }
        
        private void OngetUserIdOperationCompleted(object arg) {
            if ((this.getUserIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getUserIdCompleted(this, new getUserIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getIdEmployee", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getIdEmployee(string pToken, string idUser) {
            object[] results = this.Invoke("getIdEmployee", new object[] {
                        pToken,
                        idUser});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getIdEmployeeAsync(string pToken, string idUser) {
            this.getIdEmployeeAsync(pToken, idUser, null);
        }
        
        /// <remarks/>
        public void getIdEmployeeAsync(string pToken, string idUser, object userState) {
            if ((this.getIdEmployeeOperationCompleted == null)) {
                this.getIdEmployeeOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetIdEmployeeOperationCompleted);
            }
            this.InvokeAsync("getIdEmployee", new object[] {
                        pToken,
                        idUser}, this.getIdEmployeeOperationCompleted, userState);
        }
        
        private void OngetIdEmployeeOperationCompleted(object arg) {
            if ((this.getIdEmployeeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getIdEmployeeCompleted(this, new getIdEmployeeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getIdEmployeeByNumber", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getIdEmployeeByNumber(string pToken, int number) {
            object[] results = this.Invoke("getIdEmployeeByNumber", new object[] {
                        pToken,
                        number});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getIdEmployeeByNumberAsync(string pToken, int number) {
            this.getIdEmployeeByNumberAsync(pToken, number, null);
        }
        
        /// <remarks/>
        public void getIdEmployeeByNumberAsync(string pToken, int number, object userState) {
            if ((this.getIdEmployeeByNumberOperationCompleted == null)) {
                this.getIdEmployeeByNumberOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetIdEmployeeByNumberOperationCompleted);
            }
            this.InvokeAsync("getIdEmployeeByNumber", new object[] {
                        pToken,
                        number}, this.getIdEmployeeByNumberOperationCompleted, userState);
        }
        
        private void OngetIdEmployeeByNumberOperationCompleted(object arg) {
            if ((this.getIdEmployeeByNumberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getIdEmployeeByNumberCompleted(this, new getIdEmployeeByNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/addUsersDepartment", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int addUsersDepartment(string pToken, string idUser, string idDepartment) {
            object[] results = this.Invoke("addUsersDepartment", new object[] {
                        pToken,
                        idUser,
                        idDepartment});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void addUsersDepartmentAsync(string pToken, string idUser, string idDepartment) {
            this.addUsersDepartmentAsync(pToken, idUser, idDepartment, null);
        }
        
        /// <remarks/>
        public void addUsersDepartmentAsync(string pToken, string idUser, string idDepartment, object userState) {
            if ((this.addUsersDepartmentOperationCompleted == null)) {
                this.addUsersDepartmentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddUsersDepartmentOperationCompleted);
            }
            this.InvokeAsync("addUsersDepartment", new object[] {
                        pToken,
                        idUser,
                        idDepartment}, this.addUsersDepartmentOperationCompleted, userState);
        }
        
        private void OnaddUsersDepartmentOperationCompleted(object arg) {
            if ((this.addUsersDepartmentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addUsersDepartmentCompleted(this, new addUsersDepartmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/changeUsersDepartment", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int changeUsersDepartment(string pToken, string idUser, string idDepartment, string idUsersDepartment) {
            object[] results = this.Invoke("changeUsersDepartment", new object[] {
                        pToken,
                        idUser,
                        idDepartment,
                        idUsersDepartment});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void changeUsersDepartmentAsync(string pToken, string idUser, string idDepartment, string idUsersDepartment) {
            this.changeUsersDepartmentAsync(pToken, idUser, idDepartment, idUsersDepartment, null);
        }
        
        /// <remarks/>
        public void changeUsersDepartmentAsync(string pToken, string idUser, string idDepartment, string idUsersDepartment, object userState) {
            if ((this.changeUsersDepartmentOperationCompleted == null)) {
                this.changeUsersDepartmentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnchangeUsersDepartmentOperationCompleted);
            }
            this.InvokeAsync("changeUsersDepartment", new object[] {
                        pToken,
                        idUser,
                        idDepartment,
                        idUsersDepartment}, this.changeUsersDepartmentOperationCompleted, userState);
        }
        
        private void OnchangeUsersDepartmentOperationCompleted(object arg) {
            if ((this.changeUsersDepartmentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.changeUsersDepartmentCompleted(this, new changeUsersDepartmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/delUsersDepartment", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int delUsersDepartment(string pToken, string idUsersDepartment) {
            object[] results = this.Invoke("delUsersDepartment", new object[] {
                        pToken,
                        idUsersDepartment});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void delUsersDepartmentAsync(string pToken, string idUsersDepartment) {
            this.delUsersDepartmentAsync(pToken, idUsersDepartment, null);
        }
        
        /// <remarks/>
        public void delUsersDepartmentAsync(string pToken, string idUsersDepartment, object userState) {
            if ((this.delUsersDepartmentOperationCompleted == null)) {
                this.delUsersDepartmentOperationCompleted = new System.Threading.SendOrPostCallback(this.OndelUsersDepartmentOperationCompleted);
            }
            this.InvokeAsync("delUsersDepartment", new object[] {
                        pToken,
                        idUsersDepartment}, this.delUsersDepartmentOperationCompleted, userState);
        }
        
        private void OndelUsersDepartmentOperationCompleted(object arg) {
            if ((this.delUsersDepartmentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.delUsersDepartmentCompleted(this, new delUsersDepartmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getUserDepartments", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getUserDepartments(string pToken, string idUsers) {
            object[] results = this.Invoke("getUserDepartments", new object[] {
                        pToken,
                        idUsers});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getUserDepartmentsAsync(string pToken, string idUsers) {
            this.getUserDepartmentsAsync(pToken, idUsers, null);
        }
        
        /// <remarks/>
        public void getUserDepartmentsAsync(string pToken, string idUsers, object userState) {
            if ((this.getUserDepartmentsOperationCompleted == null)) {
                this.getUserDepartmentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetUserDepartmentsOperationCompleted);
            }
            this.InvokeAsync("getUserDepartments", new object[] {
                        pToken,
                        idUsers}, this.getUserDepartmentsOperationCompleted, userState);
        }
        
        private void OngetUserDepartmentsOperationCompleted(object arg) {
            if ((this.getUserDepartmentsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getUserDepartmentsCompleted(this, new getUserDepartmentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getUserFunctions", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getUserFunctions(string pToken, string idUser) {
            object[] results = this.Invoke("getUserFunctions", new object[] {
                        pToken,
                        idUser});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getUserFunctionsAsync(string pToken, string idUser) {
            this.getUserFunctionsAsync(pToken, idUser, null);
        }
        
        /// <remarks/>
        public void getUserFunctionsAsync(string pToken, string idUser, object userState) {
            if ((this.getUserFunctionsOperationCompleted == null)) {
                this.getUserFunctionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetUserFunctionsOperationCompleted);
            }
            this.InvokeAsync("getUserFunctions", new object[] {
                        pToken,
                        idUser}, this.getUserFunctionsOperationCompleted, userState);
        }
        
        private void OngetUserFunctionsOperationCompleted(object arg) {
            if ((this.getUserFunctionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getUserFunctionsCompleted(this, new getUserFunctionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getUserRoles", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getUserRoles(string pToken, string idUser) {
            object[] results = this.Invoke("getUserRoles", new object[] {
                        pToken,
                        idUser});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getUserRolesAsync(string pToken, string idUser) {
            this.getUserRolesAsync(pToken, idUser, null);
        }
        
        /// <remarks/>
        public void getUserRolesAsync(string pToken, string idUser, object userState) {
            if ((this.getUserRolesOperationCompleted == null)) {
                this.getUserRolesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetUserRolesOperationCompleted);
            }
            this.InvokeAsync("getUserRoles", new object[] {
                        pToken,
                        idUser}, this.getUserRolesOperationCompleted, userState);
        }
        
        private void OngetUserRolesOperationCompleted(object arg) {
            if ((this.getUserRolesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getUserRolesCompleted(this, new getUserRolesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/addUserRoles", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int addUserRoles(string pToken, string idUser, string idRole) {
            object[] results = this.Invoke("addUserRoles", new object[] {
                        pToken,
                        idUser,
                        idRole});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void addUserRolesAsync(string pToken, string idUser, string idRole) {
            this.addUserRolesAsync(pToken, idUser, idRole, null);
        }
        
        /// <remarks/>
        public void addUserRolesAsync(string pToken, string idUser, string idRole, object userState) {
            if ((this.addUserRolesOperationCompleted == null)) {
                this.addUserRolesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddUserRolesOperationCompleted);
            }
            this.InvokeAsync("addUserRoles", new object[] {
                        pToken,
                        idUser,
                        idRole}, this.addUserRolesOperationCompleted, userState);
        }
        
        private void OnaddUserRolesOperationCompleted(object arg) {
            if ((this.addUserRolesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addUserRolesCompleted(this, new addUserRolesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/addUserFunctions", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int addUserFunctions(string pToken, string idUser, string idFunctions) {
            object[] results = this.Invoke("addUserFunctions", new object[] {
                        pToken,
                        idUser,
                        idFunctions});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void addUserFunctionsAsync(string pToken, string idUser, string idFunctions) {
            this.addUserFunctionsAsync(pToken, idUser, idFunctions, null);
        }
        
        /// <remarks/>
        public void addUserFunctionsAsync(string pToken, string idUser, string idFunctions, object userState) {
            if ((this.addUserFunctionsOperationCompleted == null)) {
                this.addUserFunctionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddUserFunctionsOperationCompleted);
            }
            this.InvokeAsync("addUserFunctions", new object[] {
                        pToken,
                        idUser,
                        idFunctions}, this.addUserFunctionsOperationCompleted, userState);
        }
        
        private void OnaddUserFunctionsOperationCompleted(object arg) {
            if ((this.addUserFunctionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addUserFunctionsCompleted(this, new addUserFunctionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/delUserRoles", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int delUserRoles(string pToken, string idUserRoles) {
            object[] results = this.Invoke("delUserRoles", new object[] {
                        pToken,
                        idUserRoles});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void delUserRolesAsync(string pToken, string idUserRoles) {
            this.delUserRolesAsync(pToken, idUserRoles, null);
        }
        
        /// <remarks/>
        public void delUserRolesAsync(string pToken, string idUserRoles, object userState) {
            if ((this.delUserRolesOperationCompleted == null)) {
                this.delUserRolesOperationCompleted = new System.Threading.SendOrPostCallback(this.OndelUserRolesOperationCompleted);
            }
            this.InvokeAsync("delUserRoles", new object[] {
                        pToken,
                        idUserRoles}, this.delUserRolesOperationCompleted, userState);
        }
        
        private void OndelUserRolesOperationCompleted(object arg) {
            if ((this.delUserRolesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.delUserRolesCompleted(this, new delUserRolesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/delAllUserRoles", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int delAllUserRoles(string pToken, string idUser) {
            object[] results = this.Invoke("delAllUserRoles", new object[] {
                        pToken,
                        idUser});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void delAllUserRolesAsync(string pToken, string idUser) {
            this.delAllUserRolesAsync(pToken, idUser, null);
        }
        
        /// <remarks/>
        public void delAllUserRolesAsync(string pToken, string idUser, object userState) {
            if ((this.delAllUserRolesOperationCompleted == null)) {
                this.delAllUserRolesOperationCompleted = new System.Threading.SendOrPostCallback(this.OndelAllUserRolesOperationCompleted);
            }
            this.InvokeAsync("delAllUserRoles", new object[] {
                        pToken,
                        idUser}, this.delAllUserRolesOperationCompleted, userState);
        }
        
        private void OndelAllUserRolesOperationCompleted(object arg) {
            if ((this.delAllUserRolesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.delAllUserRolesCompleted(this, new delAllUserRolesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/delUserFunctions", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int delUserFunctions(string pToken, string idUser) {
            object[] results = this.Invoke("delUserFunctions", new object[] {
                        pToken,
                        idUser});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void delUserFunctionsAsync(string pToken, string idUser) {
            this.delUserFunctionsAsync(pToken, idUser, null);
        }
        
        /// <remarks/>
        public void delUserFunctionsAsync(string pToken, string idUser, object userState) {
            if ((this.delUserFunctionsOperationCompleted == null)) {
                this.delUserFunctionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OndelUserFunctionsOperationCompleted);
            }
            this.InvokeAsync("delUserFunctions", new object[] {
                        pToken,
                        idUser}, this.delUserFunctionsOperationCompleted, userState);
        }
        
        private void OndelUserFunctionsOperationCompleted(object arg) {
            if ((this.delUserFunctionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.delUserFunctionsCompleted(this, new delUserFunctionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getAllOperationalRequirements", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getAllOperationalRequirements(string pToken) {
            object[] results = this.Invoke("getAllOperationalRequirements", new object[] {
                        pToken});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getAllOperationalRequirementsAsync(string pToken) {
            this.getAllOperationalRequirementsAsync(pToken, null);
        }
        
        /// <remarks/>
        public void getAllOperationalRequirementsAsync(string pToken, object userState) {
            if ((this.getAllOperationalRequirementsOperationCompleted == null)) {
                this.getAllOperationalRequirementsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllOperationalRequirementsOperationCompleted);
            }
            this.InvokeAsync("getAllOperationalRequirements", new object[] {
                        pToken}, this.getAllOperationalRequirementsOperationCompleted, userState);
        }
        
        private void OngetAllOperationalRequirementsOperationCompleted(object arg) {
            if ((this.getAllOperationalRequirementsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllOperationalRequirementsCompleted(this, new getAllOperationalRequirementsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/addOperationalRequirements", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int addOperationalRequirements(string pToken, string name) {
            object[] results = this.Invoke("addOperationalRequirements", new object[] {
                        pToken,
                        name});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void addOperationalRequirementsAsync(string pToken, string name) {
            this.addOperationalRequirementsAsync(pToken, name, null);
        }
        
        /// <remarks/>
        public void addOperationalRequirementsAsync(string pToken, string name, object userState) {
            if ((this.addOperationalRequirementsOperationCompleted == null)) {
                this.addOperationalRequirementsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddOperationalRequirementsOperationCompleted);
            }
            this.InvokeAsync("addOperationalRequirements", new object[] {
                        pToken,
                        name}, this.addOperationalRequirementsOperationCompleted, userState);
        }
        
        private void OnaddOperationalRequirementsOperationCompleted(object arg) {
            if ((this.addOperationalRequirementsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addOperationalRequirementsCompleted(this, new addOperationalRequirementsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/changeOperationalRequirements", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int changeOperationalRequirements(string pToken, string idOperationalRequirements, string name) {
            object[] results = this.Invoke("changeOperationalRequirements", new object[] {
                        pToken,
                        idOperationalRequirements,
                        name});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void changeOperationalRequirementsAsync(string pToken, string idOperationalRequirements, string name) {
            this.changeOperationalRequirementsAsync(pToken, idOperationalRequirements, name, null);
        }
        
        /// <remarks/>
        public void changeOperationalRequirementsAsync(string pToken, string idOperationalRequirements, string name, object userState) {
            if ((this.changeOperationalRequirementsOperationCompleted == null)) {
                this.changeOperationalRequirementsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnchangeOperationalRequirementsOperationCompleted);
            }
            this.InvokeAsync("changeOperationalRequirements", new object[] {
                        pToken,
                        idOperationalRequirements,
                        name}, this.changeOperationalRequirementsOperationCompleted, userState);
        }
        
        private void OnchangeOperationalRequirementsOperationCompleted(object arg) {
            if ((this.changeOperationalRequirementsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.changeOperationalRequirementsCompleted(this, new changeOperationalRequirementsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/delOperationalRequirements", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int delOperationalRequirements(string pToken, string idOperationalRequirements) {
            object[] results = this.Invoke("delOperationalRequirements", new object[] {
                        pToken,
                        idOperationalRequirements});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void delOperationalRequirementsAsync(string pToken, string idOperationalRequirements) {
            this.delOperationalRequirementsAsync(pToken, idOperationalRequirements, null);
        }
        
        /// <remarks/>
        public void delOperationalRequirementsAsync(string pToken, string idOperationalRequirements, object userState) {
            if ((this.delOperationalRequirementsOperationCompleted == null)) {
                this.delOperationalRequirementsOperationCompleted = new System.Threading.SendOrPostCallback(this.OndelOperationalRequirementsOperationCompleted);
            }
            this.InvokeAsync("delOperationalRequirements", new object[] {
                        pToken,
                        idOperationalRequirements}, this.delOperationalRequirementsOperationCompleted, userState);
        }
        
        private void OndelOperationalRequirementsOperationCompleted(object arg) {
            if ((this.delOperationalRequirementsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.delOperationalRequirementsCompleted(this, new delOperationalRequirementsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getOperatRequirementsService", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable getOperatRequirementsService(string pToken, string idService) {
            object[] results = this.Invoke("getOperatRequirementsService", new object[] {
                        pToken,
                        idService});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void getOperatRequirementsServiceAsync(string pToken, string idService) {
            this.getOperatRequirementsServiceAsync(pToken, idService, null);
        }
        
        /// <remarks/>
        public void getOperatRequirementsServiceAsync(string pToken, string idService, object userState) {
            if ((this.getOperatRequirementsServiceOperationCompleted == null)) {
                this.getOperatRequirementsServiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetOperatRequirementsServiceOperationCompleted);
            }
            this.InvokeAsync("getOperatRequirementsService", new object[] {
                        pToken,
                        idService}, this.getOperatRequirementsServiceOperationCompleted, userState);
        }
        
        private void OngetOperatRequirementsServiceOperationCompleted(object arg) {
            if ((this.getOperatRequirementsServiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getOperatRequirementsServiceCompleted(this, new getOperatRequirementsServiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/delOperatRequirementsService", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int delOperatRequirementsService(string pToken, string selectedIdService) {
            object[] results = this.Invoke("delOperatRequirementsService", new object[] {
                        pToken,
                        selectedIdService});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void delOperatRequirementsServiceAsync(string pToken, string selectedIdService) {
            this.delOperatRequirementsServiceAsync(pToken, selectedIdService, null);
        }
        
        /// <remarks/>
        public void delOperatRequirementsServiceAsync(string pToken, string selectedIdService, object userState) {
            if ((this.delOperatRequirementsServiceOperationCompleted == null)) {
                this.delOperatRequirementsServiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OndelOperatRequirementsServiceOperationCompleted);
            }
            this.InvokeAsync("delOperatRequirementsService", new object[] {
                        pToken,
                        selectedIdService}, this.delOperatRequirementsServiceOperationCompleted, userState);
        }
        
        private void OndelOperatRequirementsServiceOperationCompleted(object arg) {
            if ((this.delOperatRequirementsServiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.delOperatRequirementsServiceCompleted(this, new delOperatRequirementsServiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/addOperatRequirementsService", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int addOperatRequirementsService(string pToken, string idOperationalRequirements, string idService) {
            object[] results = this.Invoke("addOperatRequirementsService", new object[] {
                        pToken,
                        idOperationalRequirements,
                        idService});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void addOperatRequirementsServiceAsync(string pToken, string idOperationalRequirements, string idService) {
            this.addOperatRequirementsServiceAsync(pToken, idOperationalRequirements, idService, null);
        }
        
        /// <remarks/>
        public void addOperatRequirementsServiceAsync(string pToken, string idOperationalRequirements, string idService, object userState) {
            if ((this.addOperatRequirementsServiceOperationCompleted == null)) {
                this.addOperatRequirementsServiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddOperatRequirementsServiceOperationCompleted);
            }
            this.InvokeAsync("addOperatRequirementsService", new object[] {
                        pToken,
                        idOperationalRequirements,
                        idService}, this.addOperatRequirementsServiceOperationCompleted, userState);
        }
        
        private void OnaddOperatRequirementsServiceOperationCompleted(object arg) {
            if ((this.addOperatRequirementsServiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addOperatRequirementsServiceCompleted(this, new addOperatRequirementsServiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/updateOperatRequirementsService", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int updateOperatRequirementsService(string pToken, string idOperatRequirementsService, string idOperationalRequirements, string idService) {
            object[] results = this.Invoke("updateOperatRequirementsService", new object[] {
                        pToken,
                        idOperatRequirementsService,
                        idOperationalRequirements,
                        idService});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void updateOperatRequirementsServiceAsync(string pToken, string idOperatRequirementsService, string idOperationalRequirements, string idService) {
            this.updateOperatRequirementsServiceAsync(pToken, idOperatRequirementsService, idOperationalRequirements, idService, null);
        }
        
        /// <remarks/>
        public void updateOperatRequirementsServiceAsync(string pToken, string idOperatRequirementsService, string idOperationalRequirements, string idService, object userState) {
            if ((this.updateOperatRequirementsServiceOperationCompleted == null)) {
                this.updateOperatRequirementsServiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateOperatRequirementsServiceOperationCompleted);
            }
            this.InvokeAsync("updateOperatRequirementsService", new object[] {
                        pToken,
                        idOperatRequirementsService,
                        idOperationalRequirements,
                        idService}, this.updateOperatRequirementsServiceOperationCompleted, userState);
        }
        
        private void OnupdateOperatRequirementsServiceOperationCompleted(object arg) {
            if ((this.updateOperatRequirementsServiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateOperatRequirementsServiceCompleted(this, new updateOperatRequirementsServiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/delAbsencesFromDate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int delAbsencesFromDate(string pToken, string idEmployee, System.DateTime date) {
            object[] results = this.Invoke("delAbsencesFromDate", new object[] {
                        pToken,
                        idEmployee,
                        date});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void delAbsencesFromDateAsync(string pToken, string idEmployee, System.DateTime date) {
            this.delAbsencesFromDateAsync(pToken, idEmployee, date, null);
        }
        
        /// <remarks/>
        public void delAbsencesFromDateAsync(string pToken, string idEmployee, System.DateTime date, object userState) {
            if ((this.delAbsencesFromDateOperationCompleted == null)) {
                this.delAbsencesFromDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OndelAbsencesFromDateOperationCompleted);
            }
            this.InvokeAsync("delAbsencesFromDate", new object[] {
                        pToken,
                        idEmployee,
                        date}, this.delAbsencesFromDateOperationCompleted, userState);
        }
        
        private void OndelAbsencesFromDateOperationCompleted(object arg) {
            if ((this.delAbsencesFromDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.delAbsencesFromDateCompleted(this, new delAbsencesFromDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/delEmployeeAbsencesRelationFromDate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int delEmployeeAbsencesRelationFromDate(string pToken, string idEmployee, System.DateTime date) {
            object[] results = this.Invoke("delEmployeeAbsencesRelationFromDate", new object[] {
                        pToken,
                        idEmployee,
                        date});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void delEmployeeAbsencesRelationFromDateAsync(string pToken, string idEmployee, System.DateTime date) {
            this.delEmployeeAbsencesRelationFromDateAsync(pToken, idEmployee, date, null);
        }
        
        /// <remarks/>
        public void delEmployeeAbsencesRelationFromDateAsync(string pToken, string idEmployee, System.DateTime date, object userState) {
            if ((this.delEmployeeAbsencesRelationFromDateOperationCompleted == null)) {
                this.delEmployeeAbsencesRelationFromDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OndelEmployeeAbsencesRelationFromDateOperationCompleted);
            }
            this.InvokeAsync("delEmployeeAbsencesRelationFromDate", new object[] {
                        pToken,
                        idEmployee,
                        date}, this.delEmployeeAbsencesRelationFromDateOperationCompleted, userState);
        }
        
        private void OndelEmployeeAbsencesRelationFromDateOperationCompleted(object arg) {
            if ((this.delEmployeeAbsencesRelationFromDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.delEmployeeAbsencesRelationFromDateCompleted(this, new delEmployeeAbsencesRelationFromDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/addOrUpdateEmployee", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string addOrUpdateEmployee(
                    string pToken, 
                    int number, 
                    string name, 
                    int gender, 
                    int deficiency, 
                    System.DateTime dateBirth, 
                    string idDepartment, 
                    string fiscalNumber, 
                    string identityTicket, 
                    System.DateTime identityTicketDate, 
                    string identityTicketCity, 
                    string passportNumber, 
                    string passportCountry, 
                    System.DateTime joinDate, 
                    string nationality, 
                    string address, 
                    string postalCode, 
                    string companyMobilePhone, 
                    string city, 
                    string country, 
                    string personalHousePhone, 
                    string personalMobilePhone, 
                    string personalEmail, 
                    string companyPhone, 
                    string companyEmail, 
                    string password, 
                    string photo, 
                    string emergencyName1, 
                    string emergencyPhone1, 
                    string emergencyName2, 
                    string emergencyPhone2, 
                    string bloodType, 
                    bool enable, 
                    string notes, 
                    string idEmployee, 
                    bool insert, 
                    string idProfile, 
                    string socialSecurity, 
                    string academicDegree, 
                    string workType, 
                    string deviceName, 
                    int devicePrivilege, 
                    string minWeekHours, 
                    string PrimaveraCode, 
                    string activeDirName, 
                    int hourPackage, 
                    int maritalStat, 
                    string vigNumb, 
                    string nib, 
                    int typeID1, 
                    int typeID2, 
                    int dependenceNumber, 
                    string iniciais, 
                    int removeLunchHour, 
                    string price, 
                    int removeLunchHourWithoutMoviments, 
                    string nib2, 
                    string nib3, 
                    string nib4, 
                    string workCity, 
                    bool ignoreHolidays, 
                    System.DateTime publicFunctionJoinDate, 
                    string professionalSituation, 
                    string numberProfessionalSituation, 
                    bool ignoreExtraHours, 
                    bool taskManagementDifferentValue, 
                    int taskManagementIndexType, 
                    int taskManagementIndexValue, 
                    int typeOfApproval, 
                    bool differentPackageHoursConfigurations) {
            object[] results = this.Invoke("addOrUpdateEmployee", new object[] {
                        pToken,
                        number,
                        name,
                        gender,
                        deficiency,
                        dateBirth,
                        idDepartment,
                        fiscalNumber,
                        identityTicket,
                        identityTicketDate,
                        identityTicketCity,
                        passportNumber,
                        passportCountry,
                        joinDate,
                        nationality,
                        address,
                        postalCode,
                        companyMobilePhone,
                        city,
                        country,
                        personalHousePhone,
                        personalMobilePhone,
                        personalEmail,
                        companyPhone,
                        companyEmail,
                        password,
                        photo,
                        emergencyName1,
                        emergencyPhone1,
                        emergencyName2,
                        emergencyPhone2,
                        bloodType,
                        enable,
                        notes,
                        idEmployee,
                        insert,
                        idProfile,
                        socialSecurity,
                        academicDegree,
                        workType,
                        deviceName,
                        devicePrivilege,
                        minWeekHours,
                        PrimaveraCode,
                        activeDirName,
                        hourPackage,
                        maritalStat,
                        vigNumb,
                        nib,
                        typeID1,
                        typeID2,
                        dependenceNumber,
                        iniciais,
                        removeLunchHour,
                        price,
                        removeLunchHourWithoutMoviments,
                        nib2,
                        nib3,
                        nib4,
                        workCity,
                        ignoreHolidays,
                        publicFunctionJoinDate,
                        professionalSituation,
                        numberProfessionalSituation,
                        ignoreExtraHours,
                        taskManagementDifferentValue,
                        taskManagementIndexType,
                        taskManagementIndexValue,
                        typeOfApproval,
                        differentPackageHoursConfigurations});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void addOrUpdateEmployeeAsync(
                    string pToken, 
                    int number, 
                    string name, 
                    int gender, 
                    int deficiency, 
                    System.DateTime dateBirth, 
                    string idDepartment, 
                    string fiscalNumber, 
                    string identityTicket, 
                    System.DateTime identityTicketDate, 
                    string identityTicketCity, 
                    string passportNumber, 
                    string passportCountry, 
                    System.DateTime joinDate, 
                    string nationality, 
                    string address, 
                    string postalCode, 
                    string companyMobilePhone, 
                    string city, 
                    string country, 
                    string personalHousePhone, 
                    string personalMobilePhone, 
                    string personalEmail, 
                    string companyPhone, 
                    string companyEmail, 
                    string password, 
                    string photo, 
                    string emergencyName1, 
                    string emergencyPhone1, 
                    string emergencyName2, 
                    string emergencyPhone2, 
                    string bloodType, 
                    bool enable, 
                    string notes, 
                    string idEmployee, 
                    bool insert, 
                    string idProfile, 
                    string socialSecurity, 
                    string academicDegree, 
                    string workType, 
                    string deviceName, 
                    int devicePrivilege, 
                    string minWeekHours, 
                    string PrimaveraCode, 
                    string activeDirName, 
                    int hourPackage, 
                    int maritalStat, 
                    string vigNumb, 
                    string nib, 
                    int typeID1, 
                    int typeID2, 
                    int dependenceNumber, 
                    string iniciais, 
                    int removeLunchHour, 
                    string price, 
                    int removeLunchHourWithoutMoviments, 
                    string nib2, 
                    string nib3, 
                    string nib4, 
                    string workCity, 
                    bool ignoreHolidays, 
                    System.DateTime publicFunctionJoinDate, 
                    string professionalSituation, 
                    string numberProfessionalSituation, 
                    bool ignoreExtraHours, 
                    bool taskManagementDifferentValue, 
                    int taskManagementIndexType, 
                    int taskManagementIndexValue, 
                    int typeOfApproval, 
                    bool differentPackageHoursConfigurations) {
            this.addOrUpdateEmployeeAsync(pToken, number, name, gender, deficiency, dateBirth, idDepartment, fiscalNumber, identityTicket, identityTicketDate, identityTicketCity, passportNumber, passportCountry, joinDate, nationality, address, postalCode, companyMobilePhone, city, country, personalHousePhone, personalMobilePhone, personalEmail, companyPhone, companyEmail, password, photo, emergencyName1, emergencyPhone1, emergencyName2, emergencyPhone2, bloodType, enable, notes, idEmployee, insert, idProfile, socialSecurity, academicDegree, workType, deviceName, devicePrivilege, minWeekHours, PrimaveraCode, activeDirName, hourPackage, maritalStat, vigNumb, nib, typeID1, typeID2, dependenceNumber, iniciais, removeLunchHour, price, removeLunchHourWithoutMoviments, nib2, nib3, nib4, workCity, ignoreHolidays, publicFunctionJoinDate, professionalSituation, numberProfessionalSituation, ignoreExtraHours, taskManagementDifferentValue, taskManagementIndexType, taskManagementIndexValue, typeOfApproval, differentPackageHoursConfigurations, null);
        }
        
        /// <remarks/>
        public void addOrUpdateEmployeeAsync(
                    string pToken, 
                    int number, 
                    string name, 
                    int gender, 
                    int deficiency, 
                    System.DateTime dateBirth, 
                    string idDepartment, 
                    string fiscalNumber, 
                    string identityTicket, 
                    System.DateTime identityTicketDate, 
                    string identityTicketCity, 
                    string passportNumber, 
                    string passportCountry, 
                    System.DateTime joinDate, 
                    string nationality, 
                    string address, 
                    string postalCode, 
                    string companyMobilePhone, 
                    string city, 
                    string country, 
                    string personalHousePhone, 
                    string personalMobilePhone, 
                    string personalEmail, 
                    string companyPhone, 
                    string companyEmail, 
                    string password, 
                    string photo, 
                    string emergencyName1, 
                    string emergencyPhone1, 
                    string emergencyName2, 
                    string emergencyPhone2, 
                    string bloodType, 
                    bool enable, 
                    string notes, 
                    string idEmployee, 
                    bool insert, 
                    string idProfile, 
                    string socialSecurity, 
                    string academicDegree, 
                    string workType, 
                    string deviceName, 
                    int devicePrivilege, 
                    string minWeekHours, 
                    string PrimaveraCode, 
                    string activeDirName, 
                    int hourPackage, 
                    int maritalStat, 
                    string vigNumb, 
                    string nib, 
                    int typeID1, 
                    int typeID2, 
                    int dependenceNumber, 
                    string iniciais, 
                    int removeLunchHour, 
                    string price, 
                    int removeLunchHourWithoutMoviments, 
                    string nib2, 
                    string nib3, 
                    string nib4, 
                    string workCity, 
                    bool ignoreHolidays, 
                    System.DateTime publicFunctionJoinDate, 
                    string professionalSituation, 
                    string numberProfessionalSituation, 
                    bool ignoreExtraHours, 
                    bool taskManagementDifferentValue, 
                    int taskManagementIndexType, 
                    int taskManagementIndexValue, 
                    int typeOfApproval, 
                    bool differentPackageHoursConfigurations, 
                    object userState) {
            if ((this.addOrUpdateEmployeeOperationCompleted == null)) {
                this.addOrUpdateEmployeeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddOrUpdateEmployeeOperationCompleted);
            }
            this.InvokeAsync("addOrUpdateEmployee", new object[] {
                        pToken,
                        number,
                        name,
                        gender,
                        deficiency,
                        dateBirth,
                        idDepartment,
                        fiscalNumber,
                        identityTicket,
                        identityTicketDate,
                        identityTicketCity,
                        passportNumber,
                        passportCountry,
                        joinDate,
                        nationality,
                        address,
                        postalCode,
                        companyMobilePhone,
                        city,
                        country,
                        personalHousePhone,
                        personalMobilePhone,
                        personalEmail,
                        companyPhone,
                        companyEmail,
                        password,
                        photo,
                        emergencyName1,
                        emergencyPhone1,
                        emergencyName2,
                        emergencyPhone2,
                        bloodType,
                        enable,
                        notes,
                        idEmployee,
                        insert,
                        idProfile,
                        socialSecurity,
                        academicDegree,
                        workType,
                        deviceName,
                        devicePrivilege,
                        minWeekHours,
                        PrimaveraCode,
                        activeDirName,
                        hourPackage,
                        maritalStat,
                        vigNumb,
                        nib,
                        typeID1,
                        typeID2,
                        dependenceNumber,
                        iniciais,
                        removeLunchHour,
                        price,
                        removeLunchHourWithoutMoviments,
                        nib2,
                        nib3,
                        nib4,
                        workCity,
                        ignoreHolidays,
                        publicFunctionJoinDate,
                        professionalSituation,
                        numberProfessionalSituation,
                        ignoreExtraHours,
                        taskManagementDifferentValue,
                        taskManagementIndexType,
                        taskManagementIndexValue,
                        typeOfApproval,
                        differentPackageHoursConfigurations}, this.addOrUpdateEmployeeOperationCompleted, userState);
        }
        
        private void OnaddOrUpdateEmployeeOperationCompleted(object arg) {
            if ((this.addOrUpdateEmployeeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addOrUpdateEmployeeCompleted(this, new addOrUpdateEmployeeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/addOrUpdateEmployeeFCP", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string addOrUpdateEmployeeFCP(
                    string pToken, 
                    int number, 
                    string name, 
                    int gender, 
                    int deficiency, 
                    System.DateTime dateBirth, 
                    string idDepartment, 
                    string fiscalNumber, 
                    string identityTicket, 
                    string nationality, 
                    string address, 
                    string postalCode, 
                    string companyMobilePhone, 
                    string companyEmail, 
                    bool enable, 
                    string idEmployee, 
                    bool insert, 
                    string minWeekHours, 
                    int maritalStat, 
                    System.DateTime joinDate, 
                    string daysOfVacations) {
            object[] results = this.Invoke("addOrUpdateEmployeeFCP", new object[] {
                        pToken,
                        number,
                        name,
                        gender,
                        deficiency,
                        dateBirth,
                        idDepartment,
                        fiscalNumber,
                        identityTicket,
                        nationality,
                        address,
                        postalCode,
                        companyMobilePhone,
                        companyEmail,
                        enable,
                        idEmployee,
                        insert,
                        minWeekHours,
                        maritalStat,
                        joinDate,
                        daysOfVacations});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void addOrUpdateEmployeeFCPAsync(
                    string pToken, 
                    int number, 
                    string name, 
                    int gender, 
                    int deficiency, 
                    System.DateTime dateBirth, 
                    string idDepartment, 
                    string fiscalNumber, 
                    string identityTicket, 
                    string nationality, 
                    string address, 
                    string postalCode, 
                    string companyMobilePhone, 
                    string companyEmail, 
                    bool enable, 
                    string idEmployee, 
                    bool insert, 
                    string minWeekHours, 
                    int maritalStat, 
                    System.DateTime joinDate, 
                    string daysOfVacations) {
            this.addOrUpdateEmployeeFCPAsync(pToken, number, name, gender, deficiency, dateBirth, idDepartment, fiscalNumber, identityTicket, nationality, address, postalCode, companyMobilePhone, companyEmail, enable, idEmployee, insert, minWeekHours, maritalStat, joinDate, daysOfVacations, null);
        }
        
        /// <remarks/>
        public void addOrUpdateEmployeeFCPAsync(
                    string pToken, 
                    int number, 
                    string name, 
                    int gender, 
                    int deficiency, 
                    System.DateTime dateBirth, 
                    string idDepartment, 
                    string fiscalNumber, 
                    string identityTicket, 
                    string nationality, 
                    string address, 
                    string postalCode, 
                    string companyMobilePhone, 
                    string companyEmail, 
                    bool enable, 
                    string idEmployee, 
                    bool insert, 
                    string minWeekHours, 
                    int maritalStat, 
                    System.DateTime joinDate, 
                    string daysOfVacations, 
                    object userState) {
            if ((this.addOrUpdateEmployeeFCPOperationCompleted == null)) {
                this.addOrUpdateEmployeeFCPOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddOrUpdateEmployeeFCPOperationCompleted);
            }
            this.InvokeAsync("addOrUpdateEmployeeFCP", new object[] {
                        pToken,
                        number,
                        name,
                        gender,
                        deficiency,
                        dateBirth,
                        idDepartment,
                        fiscalNumber,
                        identityTicket,
                        nationality,
                        address,
                        postalCode,
                        companyMobilePhone,
                        companyEmail,
                        enable,
                        idEmployee,
                        insert,
                        minWeekHours,
                        maritalStat,
                        joinDate,
                        daysOfVacations}, this.addOrUpdateEmployeeFCPOperationCompleted, userState);
        }
        
        private void OnaddOrUpdateEmployeeFCPOperationCompleted(object arg) {
            if ((this.addOrUpdateEmployeeFCPCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addOrUpdateEmployeeFCPCompleted(this, new addOrUpdateEmployeeFCPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/updateEmployee", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int updateEmployee(string pToken, int number, string name, System.DateTime joinDate, string minWeekHours, string idEmployee) {
            object[] results = this.Invoke("updateEmployee", new object[] {
                        pToken,
                        number,
                        name,
                        joinDate,
                        minWeekHours,
                        idEmployee});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void updateEmployeeAsync(string pToken, int number, string name, System.DateTime joinDate, string minWeekHours, string idEmployee) {
            this.updateEmployeeAsync(pToken, number, name, joinDate, minWeekHours, idEmployee, null);
        }
        
        /// <remarks/>
        public void updateEmployeeAsync(string pToken, int number, string name, System.DateTime joinDate, string minWeekHours, string idEmployee, object userState) {
            if ((this.updateEmployeeOperationCompleted == null)) {
                this.updateEmployeeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateEmployeeOperationCompleted);
            }
            this.InvokeAsync("updateEmployee", new object[] {
                        pToken,
                        number,
                        name,
                        joinDate,
                        minWeekHours,
                        idEmployee}, this.updateEmployeeOperationCompleted, userState);
        }
        
        private void OnupdateEmployeeOperationCompleted(object arg) {
            if ((this.updateEmployeeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateEmployeeCompleted(this, new updateEmployeeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/delEmployee", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int delEmployee(string pToken, string idEmp, bool delete) {
            object[] results = this.Invoke("delEmployee", new object[] {
                        pToken,
                        idEmp,
                        delete});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void delEmployeeAsync(string pToken, string idEmp, bool delete) {
            this.delEmployeeAsync(pToken, idEmp, delete, null);
        }
        
        /// <remarks/>
        public void delEmployeeAsync(string pToken, string idEmp, bool delete, object userState) {
            if ((this.delEmployeeOperationCompleted == null)) {
                this.delEmployeeOperationCompleted = new System.Threading.SendOrPostCallback(this.OndelEmployeeOperationCompleted);
            }
            this.InvokeAsync("delEmployee", new object[] {
                        pToken,
                        idEmp,
                        delete}, this.delEmployeeOperationCompleted, userState);
        }
        
        private void OndelEmployeeOperationCompleted(object arg) {
            if ((this.delEmployeeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.delEmployeeCompleted(this, new delEmployeeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getAllFingerPrints", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getAllFingerPrints(string pToken) {
            object[] results = this.Invoke("getAllFingerPrints", new object[] {
                        pToken});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getAllFingerPrintsAsync(string pToken) {
            this.getAllFingerPrintsAsync(pToken, null);
        }
        
        /// <remarks/>
        public void getAllFingerPrintsAsync(string pToken, object userState) {
            if ((this.getAllFingerPrintsOperationCompleted == null)) {
                this.getAllFingerPrintsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllFingerPrintsOperationCompleted);
            }
            this.InvokeAsync("getAllFingerPrints", new object[] {
                        pToken}, this.getAllFingerPrintsOperationCompleted, userState);
        }
        
        private void OngetAllFingerPrintsOperationCompleted(object arg) {
            if ((this.getAllFingerPrintsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllFingerPrintsCompleted(this, new getAllFingerPrintsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getEmployeeByNumberAndPassword", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getEmployeeByNumberAndPassword(string pToken, string number, string password) {
            object[] results = this.Invoke("getEmployeeByNumberAndPassword", new object[] {
                        pToken,
                        number,
                        password});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getEmployeeByNumberAndPasswordAsync(string pToken, string number, string password) {
            this.getEmployeeByNumberAndPasswordAsync(pToken, number, password, null);
        }
        
        /// <remarks/>
        public void getEmployeeByNumberAndPasswordAsync(string pToken, string number, string password, object userState) {
            if ((this.getEmployeeByNumberAndPasswordOperationCompleted == null)) {
                this.getEmployeeByNumberAndPasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetEmployeeByNumberAndPasswordOperationCompleted);
            }
            this.InvokeAsync("getEmployeeByNumberAndPassword", new object[] {
                        pToken,
                        number,
                        password}, this.getEmployeeByNumberAndPasswordOperationCompleted, userState);
        }
        
        private void OngetEmployeeByNumberAndPasswordOperationCompleted(object arg) {
            if ((this.getEmployeeByNumberAndPasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getEmployeeByNumberAndPasswordCompleted(this, new getEmployeeByNumberAndPasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getAllEmployees", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable getAllEmployees(string pToken, string idUser) {
            object[] results = this.Invoke("getAllEmployees", new object[] {
                        pToken,
                        idUser});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void getAllEmployeesAsync(string pToken, string idUser) {
            this.getAllEmployeesAsync(pToken, idUser, null);
        }
        
        /// <remarks/>
        public void getAllEmployeesAsync(string pToken, string idUser, object userState) {
            if ((this.getAllEmployeesOperationCompleted == null)) {
                this.getAllEmployeesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllEmployeesOperationCompleted);
            }
            this.InvokeAsync("getAllEmployees", new object[] {
                        pToken,
                        idUser}, this.getAllEmployeesOperationCompleted, userState);
        }
        
        private void OngetAllEmployeesOperationCompleted(object arg) {
            if ((this.getAllEmployeesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllEmployeesCompleted(this, new getAllEmployeesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getAllEmployeesDetails", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable getAllEmployeesDetails(string pToken, string idUser, bool disable, bool decrypt) {
            object[] results = this.Invoke("getAllEmployeesDetails", new object[] {
                        pToken,
                        idUser,
                        disable,
                        decrypt});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void getAllEmployeesDetailsAsync(string pToken, string idUser, bool disable, bool decrypt) {
            this.getAllEmployeesDetailsAsync(pToken, idUser, disable, decrypt, null);
        }
        
        /// <remarks/>
        public void getAllEmployeesDetailsAsync(string pToken, string idUser, bool disable, bool decrypt, object userState) {
            if ((this.getAllEmployeesDetailsOperationCompleted == null)) {
                this.getAllEmployeesDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllEmployeesDetailsOperationCompleted);
            }
            this.InvokeAsync("getAllEmployeesDetails", new object[] {
                        pToken,
                        idUser,
                        disable,
                        decrypt}, this.getAllEmployeesDetailsOperationCompleted, userState);
        }
        
        private void OngetAllEmployeesDetailsOperationCompleted(object arg) {
            if ((this.getAllEmployeesDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllEmployeesDetailsCompleted(this, new getAllEmployeesDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getEmployeesDetailsByIdDepartment", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable getEmployeesDetailsByIdDepartment(string pToken, string idDepartment) {
            object[] results = this.Invoke("getEmployeesDetailsByIdDepartment", new object[] {
                        pToken,
                        idDepartment});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void getEmployeesDetailsByIdDepartmentAsync(string pToken, string idDepartment) {
            this.getEmployeesDetailsByIdDepartmentAsync(pToken, idDepartment, null);
        }
        
        /// <remarks/>
        public void getEmployeesDetailsByIdDepartmentAsync(string pToken, string idDepartment, object userState) {
            if ((this.getEmployeesDetailsByIdDepartmentOperationCompleted == null)) {
                this.getEmployeesDetailsByIdDepartmentOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetEmployeesDetailsByIdDepartmentOperationCompleted);
            }
            this.InvokeAsync("getEmployeesDetailsByIdDepartment", new object[] {
                        pToken,
                        idDepartment}, this.getEmployeesDetailsByIdDepartmentOperationCompleted, userState);
        }
        
        private void OngetEmployeesDetailsByIdDepartmentOperationCompleted(object arg) {
            if ((this.getEmployeesDetailsByIdDepartmentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getEmployeesDetailsByIdDepartmentCompleted(this, new getEmployeesDetailsByIdDepartmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getPictureFromDatabase", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable getPictureFromDatabase(string pToken, string photoName, string idEmployee) {
            object[] results = this.Invoke("getPictureFromDatabase", new object[] {
                        pToken,
                        photoName,
                        idEmployee});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void getPictureFromDatabaseAsync(string pToken, string photoName, string idEmployee) {
            this.getPictureFromDatabaseAsync(pToken, photoName, idEmployee, null);
        }
        
        /// <remarks/>
        public void getPictureFromDatabaseAsync(string pToken, string photoName, string idEmployee, object userState) {
            if ((this.getPictureFromDatabaseOperationCompleted == null)) {
                this.getPictureFromDatabaseOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetPictureFromDatabaseOperationCompleted);
            }
            this.InvokeAsync("getPictureFromDatabase", new object[] {
                        pToken,
                        photoName,
                        idEmployee}, this.getPictureFromDatabaseOperationCompleted, userState);
        }
        
        private void OngetPictureFromDatabaseOperationCompleted(object arg) {
            if ((this.getPictureFromDatabaseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getPictureFromDatabaseCompleted(this, new getPictureFromDatabaseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getEmployee", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable getEmployee(string pToken, string idEmployee) {
            object[] results = this.Invoke("getEmployee", new object[] {
                        pToken,
                        idEmployee});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void getEmployeeAsync(string pToken, string idEmployee) {
            this.getEmployeeAsync(pToken, idEmployee, null);
        }
        
        /// <remarks/>
        public void getEmployeeAsync(string pToken, string idEmployee, object userState) {
            if ((this.getEmployeeOperationCompleted == null)) {
                this.getEmployeeOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetEmployeeOperationCompleted);
            }
            this.InvokeAsync("getEmployee", new object[] {
                        pToken,
                        idEmployee}, this.getEmployeeOperationCompleted, userState);
        }
        
        private void OngetEmployeeOperationCompleted(object arg) {
            if ((this.getEmployeeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getEmployeeCompleted(this, new getEmployeeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getEmployeeFromNumber", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable getEmployeeFromNumber(string pToken, int number, bool decrypt) {
            object[] results = this.Invoke("getEmployeeFromNumber", new object[] {
                        pToken,
                        number,
                        decrypt});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void getEmployeeFromNumberAsync(string pToken, int number, bool decrypt) {
            this.getEmployeeFromNumberAsync(pToken, number, decrypt, null);
        }
        
        /// <remarks/>
        public void getEmployeeFromNumberAsync(string pToken, int number, bool decrypt, object userState) {
            if ((this.getEmployeeFromNumberOperationCompleted == null)) {
                this.getEmployeeFromNumberOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetEmployeeFromNumberOperationCompleted);
            }
            this.InvokeAsync("getEmployeeFromNumber", new object[] {
                        pToken,
                        number,
                        decrypt}, this.getEmployeeFromNumberOperationCompleted, userState);
        }
        
        private void OngetEmployeeFromNumberOperationCompleted(object arg) {
            if ((this.getEmployeeFromNumberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getEmployeeFromNumberCompleted(this, new getEmployeeFromNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/changeEmployeeProfile", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int changeEmployeeProfile(string pToken, string idEmployee, string idProfile) {
            object[] results = this.Invoke("changeEmployeeProfile", new object[] {
                        pToken,
                        idEmployee,
                        idProfile});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void changeEmployeeProfileAsync(string pToken, string idEmployee, string idProfile) {
            this.changeEmployeeProfileAsync(pToken, idEmployee, idProfile, null);
        }
        
        /// <remarks/>
        public void changeEmployeeProfileAsync(string pToken, string idEmployee, string idProfile, object userState) {
            if ((this.changeEmployeeProfileOperationCompleted == null)) {
                this.changeEmployeeProfileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnchangeEmployeeProfileOperationCompleted);
            }
            this.InvokeAsync("changeEmployeeProfile", new object[] {
                        pToken,
                        idEmployee,
                        idProfile}, this.changeEmployeeProfileOperationCompleted, userState);
        }
        
        private void OnchangeEmployeeProfileOperationCompleted(object arg) {
            if ((this.changeEmployeeProfileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.changeEmployeeProfileCompleted(this, new changeEmployeeProfileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/changeEmployeeDeviceParam", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int changeEmployeeDeviceParam(string pToken, string idEmployee, string password, string deviceName, int devicePrivilege) {
            object[] results = this.Invoke("changeEmployeeDeviceParam", new object[] {
                        pToken,
                        idEmployee,
                        password,
                        deviceName,
                        devicePrivilege});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void changeEmployeeDeviceParamAsync(string pToken, string idEmployee, string password, string deviceName, int devicePrivilege) {
            this.changeEmployeeDeviceParamAsync(pToken, idEmployee, password, deviceName, devicePrivilege, null);
        }
        
        /// <remarks/>
        public void changeEmployeeDeviceParamAsync(string pToken, string idEmployee, string password, string deviceName, int devicePrivilege, object userState) {
            if ((this.changeEmployeeDeviceParamOperationCompleted == null)) {
                this.changeEmployeeDeviceParamOperationCompleted = new System.Threading.SendOrPostCallback(this.OnchangeEmployeeDeviceParamOperationCompleted);
            }
            this.InvokeAsync("changeEmployeeDeviceParam", new object[] {
                        pToken,
                        idEmployee,
                        password,
                        deviceName,
                        devicePrivilege}, this.changeEmployeeDeviceParamOperationCompleted, userState);
        }
        
        private void OnchangeEmployeeDeviceParamOperationCompleted(object arg) {
            if ((this.changeEmployeeDeviceParamCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.changeEmployeeDeviceParamCompleted(this, new changeEmployeeDeviceParamCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getEmployeeLastNumber", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int getEmployeeLastNumber(string pToken) {
            object[] results = this.Invoke("getEmployeeLastNumber", new object[] {
                        pToken});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void getEmployeeLastNumberAsync(string pToken) {
            this.getEmployeeLastNumberAsync(pToken, null);
        }
        
        /// <remarks/>
        public void getEmployeeLastNumberAsync(string pToken, object userState) {
            if ((this.getEmployeeLastNumberOperationCompleted == null)) {
                this.getEmployeeLastNumberOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetEmployeeLastNumberOperationCompleted);
            }
            this.InvokeAsync("getEmployeeLastNumber", new object[] {
                        pToken}, this.getEmployeeLastNumberOperationCompleted, userState);
        }
        
        private void OngetEmployeeLastNumberOperationCompleted(object arg) {
            if ((this.getEmployeeLastNumberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getEmployeeLastNumberCompleted(this, new getEmployeeLastNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getEmployeeProfile", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getEmployeeProfile(string pToken, string idEmployee, System.DateTime data) {
            object[] results = this.Invoke("getEmployeeProfile", new object[] {
                        pToken,
                        idEmployee,
                        data});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getEmployeeProfileAsync(string pToken, string idEmployee, System.DateTime data) {
            this.getEmployeeProfileAsync(pToken, idEmployee, data, null);
        }
        
        /// <remarks/>
        public void getEmployeeProfileAsync(string pToken, string idEmployee, System.DateTime data, object userState) {
            if ((this.getEmployeeProfileOperationCompleted == null)) {
                this.getEmployeeProfileOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetEmployeeProfileOperationCompleted);
            }
            this.InvokeAsync("getEmployeeProfile", new object[] {
                        pToken,
                        idEmployee,
                        data}, this.getEmployeeProfileOperationCompleted, userState);
        }
        
        private void OngetEmployeeProfileOperationCompleted(object arg) {
            if ((this.getEmployeeProfileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getEmployeeProfileCompleted(this, new getEmployeeProfileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getEmployeeAllProfiles", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable getEmployeeAllProfiles(string pToken, string idEmployee) {
            object[] results = this.Invoke("getEmployeeAllProfiles", new object[] {
                        pToken,
                        idEmployee});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void getEmployeeAllProfilesAsync(string pToken, string idEmployee) {
            this.getEmployeeAllProfilesAsync(pToken, idEmployee, null);
        }
        
        /// <remarks/>
        public void getEmployeeAllProfilesAsync(string pToken, string idEmployee, object userState) {
            if ((this.getEmployeeAllProfilesOperationCompleted == null)) {
                this.getEmployeeAllProfilesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetEmployeeAllProfilesOperationCompleted);
            }
            this.InvokeAsync("getEmployeeAllProfiles", new object[] {
                        pToken,
                        idEmployee}, this.getEmployeeAllProfilesOperationCompleted, userState);
        }
        
        private void OngetEmployeeAllProfilesOperationCompleted(object arg) {
            if ((this.getEmployeeAllProfilesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getEmployeeAllProfilesCompleted(this, new getEmployeeAllProfilesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getAllProfileEmployees", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getAllProfileEmployees(string pToken, string idProfile, string idUser, System.DateTime data) {
            object[] results = this.Invoke("getAllProfileEmployees", new object[] {
                        pToken,
                        idProfile,
                        idUser,
                        data});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getAllProfileEmployeesAsync(string pToken, string idProfile, string idUser, System.DateTime data) {
            this.getAllProfileEmployeesAsync(pToken, idProfile, idUser, data, null);
        }
        
        /// <remarks/>
        public void getAllProfileEmployeesAsync(string pToken, string idProfile, string idUser, System.DateTime data, object userState) {
            if ((this.getAllProfileEmployeesOperationCompleted == null)) {
                this.getAllProfileEmployeesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllProfileEmployeesOperationCompleted);
            }
            this.InvokeAsync("getAllProfileEmployees", new object[] {
                        pToken,
                        idProfile,
                        idUser,
                        data}, this.getAllProfileEmployeesOperationCompleted, userState);
        }
        
        private void OngetAllProfileEmployeesOperationCompleted(object arg) {
            if ((this.getAllProfileEmployeesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllProfileEmployeesCompleted(this, new getAllProfileEmployeesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/saveEmployeePicture", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int saveEmployeePicture(string pToken, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] picture, string strFilename) {
            object[] results = this.Invoke("saveEmployeePicture", new object[] {
                        pToken,
                        picture,
                        strFilename});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void saveEmployeePictureAsync(string pToken, byte[] picture, string strFilename) {
            this.saveEmployeePictureAsync(pToken, picture, strFilename, null);
        }
        
        /// <remarks/>
        public void saveEmployeePictureAsync(string pToken, byte[] picture, string strFilename, object userState) {
            if ((this.saveEmployeePictureOperationCompleted == null)) {
                this.saveEmployeePictureOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsaveEmployeePictureOperationCompleted);
            }
            this.InvokeAsync("saveEmployeePicture", new object[] {
                        pToken,
                        picture,
                        strFilename}, this.saveEmployeePictureOperationCompleted, userState);
        }
        
        private void OnsaveEmployeePictureOperationCompleted(object arg) {
            if ((this.saveEmployeePictureCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.saveEmployeePictureCompleted(this, new saveEmployeePictureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getEmployeePicture", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] getEmployeePicture(string pToken, string strFileName) {
            object[] results = this.Invoke("getEmployeePicture", new object[] {
                        pToken,
                        strFileName});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void getEmployeePictureAsync(string pToken, string strFileName) {
            this.getEmployeePictureAsync(pToken, strFileName, null);
        }
        
        /// <remarks/>
        public void getEmployeePictureAsync(string pToken, string strFileName, object userState) {
            if ((this.getEmployeePictureOperationCompleted == null)) {
                this.getEmployeePictureOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetEmployeePictureOperationCompleted);
            }
            this.InvokeAsync("getEmployeePicture", new object[] {
                        pToken,
                        strFileName}, this.getEmployeePictureOperationCompleted, userState);
        }
        
        private void OngetEmployeePictureOperationCompleted(object arg) {
            if ((this.getEmployeePictureCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getEmployeePictureCompleted(this, new getEmployeePictureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getEmployeeAbsences", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getEmployeeAbsences(string pToken, string idEmployee) {
            object[] results = this.Invoke("getEmployeeAbsences", new object[] {
                        pToken,
                        idEmployee});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getEmployeeAbsencesAsync(string pToken, string idEmployee) {
            this.getEmployeeAbsencesAsync(pToken, idEmployee, null);
        }
        
        /// <remarks/>
        public void getEmployeeAbsencesAsync(string pToken, string idEmployee, object userState) {
            if ((this.getEmployeeAbsencesOperationCompleted == null)) {
                this.getEmployeeAbsencesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetEmployeeAbsencesOperationCompleted);
            }
            this.InvokeAsync("getEmployeeAbsences", new object[] {
                        pToken,
                        idEmployee}, this.getEmployeeAbsencesOperationCompleted, userState);
        }
        
        private void OngetEmployeeAbsencesOperationCompleted(object arg) {
            if ((this.getEmployeeAbsencesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getEmployeeAbsencesCompleted(this, new getEmployeeAbsencesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getEmployeeAbsencesApproved", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getEmployeeAbsencesApproved(string pToken, string idEmployee) {
            object[] results = this.Invoke("getEmployeeAbsencesApproved", new object[] {
                        pToken,
                        idEmployee});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getEmployeeAbsencesApprovedAsync(string pToken, string idEmployee) {
            this.getEmployeeAbsencesApprovedAsync(pToken, idEmployee, null);
        }
        
        /// <remarks/>
        public void getEmployeeAbsencesApprovedAsync(string pToken, string idEmployee, object userState) {
            if ((this.getEmployeeAbsencesApprovedOperationCompleted == null)) {
                this.getEmployeeAbsencesApprovedOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetEmployeeAbsencesApprovedOperationCompleted);
            }
            this.InvokeAsync("getEmployeeAbsencesApproved", new object[] {
                        pToken,
                        idEmployee}, this.getEmployeeAbsencesApprovedOperationCompleted, userState);
        }
        
        private void OngetEmployeeAbsencesApprovedOperationCompleted(object arg) {
            if ((this.getEmployeeAbsencesApprovedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getEmployeeAbsencesApprovedCompleted(this, new getEmployeeAbsencesApprovedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/addEmployeeAbsences", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int addEmployeeAbsences(string pToken, string idEmp, System.DateTime start, System.DateTime end, int numbDays, string reason, string comm, bool approved, int hours, int minutes, bool approvedBySuperior, out string idAbsence) {
            object[] results = this.Invoke("addEmployeeAbsences", new object[] {
                        pToken,
                        idEmp,
                        start,
                        end,
                        numbDays,
                        reason,
                        comm,
                        approved,
                        hours,
                        minutes,
                        approvedBySuperior});
            idAbsence = ((string)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void addEmployeeAbsencesAsync(string pToken, string idEmp, System.DateTime start, System.DateTime end, int numbDays, string reason, string comm, bool approved, int hours, int minutes, bool approvedBySuperior) {
            this.addEmployeeAbsencesAsync(pToken, idEmp, start, end, numbDays, reason, comm, approved, hours, minutes, approvedBySuperior, null);
        }
        
        /// <remarks/>
        public void addEmployeeAbsencesAsync(string pToken, string idEmp, System.DateTime start, System.DateTime end, int numbDays, string reason, string comm, bool approved, int hours, int minutes, bool approvedBySuperior, object userState) {
            if ((this.addEmployeeAbsencesOperationCompleted == null)) {
                this.addEmployeeAbsencesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddEmployeeAbsencesOperationCompleted);
            }
            this.InvokeAsync("addEmployeeAbsences", new object[] {
                        pToken,
                        idEmp,
                        start,
                        end,
                        numbDays,
                        reason,
                        comm,
                        approved,
                        hours,
                        minutes,
                        approvedBySuperior}, this.addEmployeeAbsencesOperationCompleted, userState);
        }
        
        private void OnaddEmployeeAbsencesOperationCompleted(object arg) {
            if ((this.addEmployeeAbsencesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addEmployeeAbsencesCompleted(this, new addEmployeeAbsencesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/updateAbsences", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int updateAbsences(string pToken, string idAbsence, System.DateTime start, System.DateTime end, int numbDays, string reason, string comm, bool approved, int hours, int minutes, bool approvedBySuperior) {
            object[] results = this.Invoke("updateAbsences", new object[] {
                        pToken,
                        idAbsence,
                        start,
                        end,
                        numbDays,
                        reason,
                        comm,
                        approved,
                        hours,
                        minutes,
                        approvedBySuperior});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void updateAbsencesAsync(string pToken, string idAbsence, System.DateTime start, System.DateTime end, int numbDays, string reason, string comm, bool approved, int hours, int minutes, bool approvedBySuperior) {
            this.updateAbsencesAsync(pToken, idAbsence, start, end, numbDays, reason, comm, approved, hours, minutes, approvedBySuperior, null);
        }
        
        /// <remarks/>
        public void updateAbsencesAsync(string pToken, string idAbsence, System.DateTime start, System.DateTime end, int numbDays, string reason, string comm, bool approved, int hours, int minutes, bool approvedBySuperior, object userState) {
            if ((this.updateAbsencesOperationCompleted == null)) {
                this.updateAbsencesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateAbsencesOperationCompleted);
            }
            this.InvokeAsync("updateAbsences", new object[] {
                        pToken,
                        idAbsence,
                        start,
                        end,
                        numbDays,
                        reason,
                        comm,
                        approved,
                        hours,
                        minutes,
                        approvedBySuperior}, this.updateAbsencesOperationCompleted, userState);
        }
        
        private void OnupdateAbsencesOperationCompleted(object arg) {
            if ((this.updateAbsencesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateAbsencesCompleted(this, new updateAbsencesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/delEmployeeAbsences", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int delEmployeeAbsences(string pToken, string idEmployee, string idAbsences) {
            object[] results = this.Invoke("delEmployeeAbsences", new object[] {
                        pToken,
                        idEmployee,
                        idAbsences});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void delEmployeeAbsencesAsync(string pToken, string idEmployee, string idAbsences) {
            this.delEmployeeAbsencesAsync(pToken, idEmployee, idAbsences, null);
        }
        
        /// <remarks/>
        public void delEmployeeAbsencesAsync(string pToken, string idEmployee, string idAbsences, object userState) {
            if ((this.delEmployeeAbsencesOperationCompleted == null)) {
                this.delEmployeeAbsencesOperationCompleted = new System.Threading.SendOrPostCallback(this.OndelEmployeeAbsencesOperationCompleted);
            }
            this.InvokeAsync("delEmployeeAbsences", new object[] {
                        pToken,
                        idEmployee,
                        idAbsences}, this.delEmployeeAbsencesOperationCompleted, userState);
        }
        
        private void OndelEmployeeAbsencesOperationCompleted(object arg) {
            if ((this.delEmployeeAbsencesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.delEmployeeAbsencesCompleted(this, new delEmployeeAbsencesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getEmployeesOnAbsencesFromDate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getEmployeesOnAbsencesFromDate(string pToken, System.DateTime date, string idUser) {
            object[] results = this.Invoke("getEmployeesOnAbsencesFromDate", new object[] {
                        pToken,
                        date,
                        idUser});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getEmployeesOnAbsencesFromDateAsync(string pToken, System.DateTime date, string idUser) {
            this.getEmployeesOnAbsencesFromDateAsync(pToken, date, idUser, null);
        }
        
        /// <remarks/>
        public void getEmployeesOnAbsencesFromDateAsync(string pToken, System.DateTime date, string idUser, object userState) {
            if ((this.getEmployeesOnAbsencesFromDateOperationCompleted == null)) {
                this.getEmployeesOnAbsencesFromDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetEmployeesOnAbsencesFromDateOperationCompleted);
            }
            this.InvokeAsync("getEmployeesOnAbsencesFromDate", new object[] {
                        pToken,
                        date,
                        idUser}, this.getEmployeesOnAbsencesFromDateOperationCompleted, userState);
        }
        
        private void OngetEmployeesOnAbsencesFromDateOperationCompleted(object arg) {
            if ((this.getEmployeesOnAbsencesFromDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getEmployeesOnAbsencesFromDateCompleted(this, new getEmployeesOnAbsencesFromDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getEmployeeMonthAbsences", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getEmployeeMonthAbsences(string pToken, string idEmployee, int year, int month, string operation) {
            object[] results = this.Invoke("getEmployeeMonthAbsences", new object[] {
                        pToken,
                        idEmployee,
                        year,
                        month,
                        operation});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getEmployeeMonthAbsencesAsync(string pToken, string idEmployee, int year, int month, string operation) {
            this.getEmployeeMonthAbsencesAsync(pToken, idEmployee, year, month, operation, null);
        }
        
        /// <remarks/>
        public void getEmployeeMonthAbsencesAsync(string pToken, string idEmployee, int year, int month, string operation, object userState) {
            if ((this.getEmployeeMonthAbsencesOperationCompleted == null)) {
                this.getEmployeeMonthAbsencesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetEmployeeMonthAbsencesOperationCompleted);
            }
            this.InvokeAsync("getEmployeeMonthAbsences", new object[] {
                        pToken,
                        idEmployee,
                        year,
                        month,
                        operation}, this.getEmployeeMonthAbsencesOperationCompleted, userState);
        }
        
        private void OngetEmployeeMonthAbsencesOperationCompleted(object arg) {
            if ((this.getEmployeeMonthAbsencesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getEmployeeMonthAbsencesCompleted(this, new getEmployeeMonthAbsencesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getEmployeeAbsencesFromDate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getEmployeeAbsencesFromDate(string pToken, string idEmployee, System.DateTime date) {
            object[] results = this.Invoke("getEmployeeAbsencesFromDate", new object[] {
                        pToken,
                        idEmployee,
                        date});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getEmployeeAbsencesFromDateAsync(string pToken, string idEmployee, System.DateTime date) {
            this.getEmployeeAbsencesFromDateAsync(pToken, idEmployee, date, null);
        }
        
        /// <remarks/>
        public void getEmployeeAbsencesFromDateAsync(string pToken, string idEmployee, System.DateTime date, object userState) {
            if ((this.getEmployeeAbsencesFromDateOperationCompleted == null)) {
                this.getEmployeeAbsencesFromDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetEmployeeAbsencesFromDateOperationCompleted);
            }
            this.InvokeAsync("getEmployeeAbsencesFromDate", new object[] {
                        pToken,
                        idEmployee,
                        date}, this.getEmployeeAbsencesFromDateOperationCompleted, userState);
        }
        
        private void OngetEmployeeAbsencesFromDateOperationCompleted(object arg) {
            if ((this.getEmployeeAbsencesFromDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getEmployeeAbsencesFromDateCompleted(this, new getEmployeeAbsencesFromDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getEmployeeAbsencesFromBeginDateAndEndDate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getEmployeeAbsencesFromBeginDateAndEndDate(string pToken, string idEmployee, System.DateTime startDate, System.DateTime endDate, System.DateTime date, bool isento, bool all, bool approved) {
            object[] results = this.Invoke("getEmployeeAbsencesFromBeginDateAndEndDate", new object[] {
                        pToken,
                        idEmployee,
                        startDate,
                        endDate,
                        date,
                        isento,
                        all,
                        approved});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getEmployeeAbsencesFromBeginDateAndEndDateAsync(string pToken, string idEmployee, System.DateTime startDate, System.DateTime endDate, System.DateTime date, bool isento, bool all, bool approved) {
            this.getEmployeeAbsencesFromBeginDateAndEndDateAsync(pToken, idEmployee, startDate, endDate, date, isento, all, approved, null);
        }
        
        /// <remarks/>
        public void getEmployeeAbsencesFromBeginDateAndEndDateAsync(string pToken, string idEmployee, System.DateTime startDate, System.DateTime endDate, System.DateTime date, bool isento, bool all, bool approved, object userState) {
            if ((this.getEmployeeAbsencesFromBeginDateAndEndDateOperationCompleted == null)) {
                this.getEmployeeAbsencesFromBeginDateAndEndDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetEmployeeAbsencesFromBeginDateAndEndDateOperationCompleted);
            }
            this.InvokeAsync("getEmployeeAbsencesFromBeginDateAndEndDate", new object[] {
                        pToken,
                        idEmployee,
                        startDate,
                        endDate,
                        date,
                        isento,
                        all,
                        approved}, this.getEmployeeAbsencesFromBeginDateAndEndDateOperationCompleted, userState);
        }
        
        private void OngetEmployeeAbsencesFromBeginDateAndEndDateOperationCompleted(object arg) {
            if ((this.getEmployeeAbsencesFromBeginDateAndEndDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getEmployeeAbsencesFromBeginDateAndEndDateCompleted(this, new getEmployeeAbsencesFromBeginDateAndEndDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getEmployeeDatePeriodAbsences", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getEmployeeDatePeriodAbsences(string pToken, string idEmployee, System.DateTime startDate, System.DateTime endDate) {
            object[] results = this.Invoke("getEmployeeDatePeriodAbsences", new object[] {
                        pToken,
                        idEmployee,
                        startDate,
                        endDate});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getEmployeeDatePeriodAbsencesAsync(string pToken, string idEmployee, System.DateTime startDate, System.DateTime endDate) {
            this.getEmployeeDatePeriodAbsencesAsync(pToken, idEmployee, startDate, endDate, null);
        }
        
        /// <remarks/>
        public void getEmployeeDatePeriodAbsencesAsync(string pToken, string idEmployee, System.DateTime startDate, System.DateTime endDate, object userState) {
            if ((this.getEmployeeDatePeriodAbsencesOperationCompleted == null)) {
                this.getEmployeeDatePeriodAbsencesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetEmployeeDatePeriodAbsencesOperationCompleted);
            }
            this.InvokeAsync("getEmployeeDatePeriodAbsences", new object[] {
                        pToken,
                        idEmployee,
                        startDate,
                        endDate}, this.getEmployeeDatePeriodAbsencesOperationCompleted, userState);
        }
        
        private void OngetEmployeeDatePeriodAbsencesOperationCompleted(object arg) {
            if ((this.getEmployeeDatePeriodAbsencesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getEmployeeDatePeriodAbsencesCompleted(this, new getEmployeeDatePeriodAbsencesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getEmployeeDatePeriodAbsencesByReason", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getEmployeeDatePeriodAbsencesByReason(string pToken, string idEmployee, System.DateTime startDate, System.DateTime endDate, string idReason) {
            object[] results = this.Invoke("getEmployeeDatePeriodAbsencesByReason", new object[] {
                        pToken,
                        idEmployee,
                        startDate,
                        endDate,
                        idReason});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getEmployeeDatePeriodAbsencesByReasonAsync(string pToken, string idEmployee, System.DateTime startDate, System.DateTime endDate, string idReason) {
            this.getEmployeeDatePeriodAbsencesByReasonAsync(pToken, idEmployee, startDate, endDate, idReason, null);
        }
        
        /// <remarks/>
        public void getEmployeeDatePeriodAbsencesByReasonAsync(string pToken, string idEmployee, System.DateTime startDate, System.DateTime endDate, string idReason, object userState) {
            if ((this.getEmployeeDatePeriodAbsencesByReasonOperationCompleted == null)) {
                this.getEmployeeDatePeriodAbsencesByReasonOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetEmployeeDatePeriodAbsencesByReasonOperationCompleted);
            }
            this.InvokeAsync("getEmployeeDatePeriodAbsencesByReason", new object[] {
                        pToken,
                        idEmployee,
                        startDate,
                        endDate,
                        idReason}, this.getEmployeeDatePeriodAbsencesByReasonOperationCompleted, userState);
        }
        
        private void OngetEmployeeDatePeriodAbsencesByReasonOperationCompleted(object arg) {
            if ((this.getEmployeeDatePeriodAbsencesByReasonCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getEmployeeDatePeriodAbsencesByReasonCompleted(this, new getEmployeeDatePeriodAbsencesByReasonCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getAllAbsencesWDetailsYear", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getAllAbsencesWDetailsYear(string pToken, string year) {
            object[] results = this.Invoke("getAllAbsencesWDetailsYear", new object[] {
                        pToken,
                        year});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getAllAbsencesWDetailsYearAsync(string pToken, string year) {
            this.getAllAbsencesWDetailsYearAsync(pToken, year, null);
        }
        
        /// <remarks/>
        public void getAllAbsencesWDetailsYearAsync(string pToken, string year, object userState) {
            if ((this.getAllAbsencesWDetailsYearOperationCompleted == null)) {
                this.getAllAbsencesWDetailsYearOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllAbsencesWDetailsYearOperationCompleted);
            }
            this.InvokeAsync("getAllAbsencesWDetailsYear", new object[] {
                        pToken,
                        year}, this.getAllAbsencesWDetailsYearOperationCompleted, userState);
        }
        
        private void OngetAllAbsencesWDetailsYearOperationCompleted(object arg) {
            if ((this.getAllAbsencesWDetailsYearCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllAbsencesWDetailsYearCompleted(this, new getAllAbsencesWDetailsYearCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getAllAbsencesWDetails", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getAllAbsencesWDetails(string pToken) {
            object[] results = this.Invoke("getAllAbsencesWDetails", new object[] {
                        pToken});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getAllAbsencesWDetailsAsync(string pToken) {
            this.getAllAbsencesWDetailsAsync(pToken, null);
        }
        
        /// <remarks/>
        public void getAllAbsencesWDetailsAsync(string pToken, object userState) {
            if ((this.getAllAbsencesWDetailsOperationCompleted == null)) {
                this.getAllAbsencesWDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllAbsencesWDetailsOperationCompleted);
            }
            this.InvokeAsync("getAllAbsencesWDetails", new object[] {
                        pToken}, this.getAllAbsencesWDetailsOperationCompleted, userState);
        }
        
        private void OngetAllAbsencesWDetailsOperationCompleted(object arg) {
            if ((this.getAllAbsencesWDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllAbsencesWDetailsCompleted(this, new getAllAbsencesWDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getAllAbsences", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getAllAbsences(string pToken) {
            object[] results = this.Invoke("getAllAbsences", new object[] {
                        pToken});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getAllAbsencesAsync(string pToken) {
            this.getAllAbsencesAsync(pToken, null);
        }
        
        /// <remarks/>
        public void getAllAbsencesAsync(string pToken, object userState) {
            if ((this.getAllAbsencesOperationCompleted == null)) {
                this.getAllAbsencesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllAbsencesOperationCompleted);
            }
            this.InvokeAsync("getAllAbsences", new object[] {
                        pToken}, this.getAllAbsencesOperationCompleted, userState);
        }
        
        private void OngetAllAbsencesOperationCompleted(object arg) {
            if ((this.getAllAbsencesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllAbsencesCompleted(this, new getAllAbsencesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getAllAbsencesApproved", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getAllAbsencesApproved(string pToken) {
            object[] results = this.Invoke("getAllAbsencesApproved", new object[] {
                        pToken});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getAllAbsencesApprovedAsync(string pToken) {
            this.getAllAbsencesApprovedAsync(pToken, null);
        }
        
        /// <remarks/>
        public void getAllAbsencesApprovedAsync(string pToken, object userState) {
            if ((this.getAllAbsencesApprovedOperationCompleted == null)) {
                this.getAllAbsencesApprovedOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllAbsencesApprovedOperationCompleted);
            }
            this.InvokeAsync("getAllAbsencesApproved", new object[] {
                        pToken}, this.getAllAbsencesApprovedOperationCompleted, userState);
        }
        
        private void OngetAllAbsencesApprovedOperationCompleted(object arg) {
            if ((this.getAllAbsencesApprovedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllAbsencesApprovedCompleted(this, new getAllAbsencesApprovedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getLastInsertedAbsence", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getLastInsertedAbsence(string pToken) {
            object[] results = this.Invoke("getLastInsertedAbsence", new object[] {
                        pToken});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getLastInsertedAbsenceAsync(string pToken) {
            this.getLastInsertedAbsenceAsync(pToken, null);
        }
        
        /// <remarks/>
        public void getLastInsertedAbsenceAsync(string pToken, object userState) {
            if ((this.getLastInsertedAbsenceOperationCompleted == null)) {
                this.getLastInsertedAbsenceOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetLastInsertedAbsenceOperationCompleted);
            }
            this.InvokeAsync("getLastInsertedAbsence", new object[] {
                        pToken}, this.getLastInsertedAbsenceOperationCompleted, userState);
        }
        
        private void OngetLastInsertedAbsenceOperationCompleted(object arg) {
            if ((this.getLastInsertedAbsenceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getLastInsertedAbsenceCompleted(this, new getLastInsertedAbsenceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getEmployeeVacations", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getEmployeeVacations(string pToken, string idEmployee) {
            object[] results = this.Invoke("getEmployeeVacations", new object[] {
                        pToken,
                        idEmployee});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getEmployeeVacationsAsync(string pToken, string idEmployee) {
            this.getEmployeeVacationsAsync(pToken, idEmployee, null);
        }
        
        /// <remarks/>
        public void getEmployeeVacationsAsync(string pToken, string idEmployee, object userState) {
            if ((this.getEmployeeVacationsOperationCompleted == null)) {
                this.getEmployeeVacationsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetEmployeeVacationsOperationCompleted);
            }
            this.InvokeAsync("getEmployeeVacations", new object[] {
                        pToken,
                        idEmployee}, this.getEmployeeVacationsOperationCompleted, userState);
        }
        
        private void OngetEmployeeVacationsOperationCompleted(object arg) {
            if ((this.getEmployeeVacationsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getEmployeeVacationsCompleted(this, new getEmployeeVacationsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getEmployeeVacationsByPeriod", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getEmployeeVacationsByPeriod(string pToken, string idEmployee, System.DateTime start, System.DateTime stop) {
            object[] results = this.Invoke("getEmployeeVacationsByPeriod", new object[] {
                        pToken,
                        idEmployee,
                        start,
                        stop});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getEmployeeVacationsByPeriodAsync(string pToken, string idEmployee, System.DateTime start, System.DateTime stop) {
            this.getEmployeeVacationsByPeriodAsync(pToken, idEmployee, start, stop, null);
        }
        
        /// <remarks/>
        public void getEmployeeVacationsByPeriodAsync(string pToken, string idEmployee, System.DateTime start, System.DateTime stop, object userState) {
            if ((this.getEmployeeVacationsByPeriodOperationCompleted == null)) {
                this.getEmployeeVacationsByPeriodOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetEmployeeVacationsByPeriodOperationCompleted);
            }
            this.InvokeAsync("getEmployeeVacationsByPeriod", new object[] {
                        pToken,
                        idEmployee,
                        start,
                        stop}, this.getEmployeeVacationsByPeriodOperationCompleted, userState);
        }
        
        private void OngetEmployeeVacationsByPeriodOperationCompleted(object arg) {
            if ((this.getEmployeeVacationsByPeriodCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getEmployeeVacationsByPeriodCompleted(this, new getEmployeeVacationsByPeriodCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getEmployeeVacationsByPeriodToPrimavera", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getEmployeeVacationsByPeriodToPrimavera(string pToken, string idEmployee, System.DateTime start, System.DateTime stop) {
            object[] results = this.Invoke("getEmployeeVacationsByPeriodToPrimavera", new object[] {
                        pToken,
                        idEmployee,
                        start,
                        stop});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getEmployeeVacationsByPeriodToPrimaveraAsync(string pToken, string idEmployee, System.DateTime start, System.DateTime stop) {
            this.getEmployeeVacationsByPeriodToPrimaveraAsync(pToken, idEmployee, start, stop, null);
        }
        
        /// <remarks/>
        public void getEmployeeVacationsByPeriodToPrimaveraAsync(string pToken, string idEmployee, System.DateTime start, System.DateTime stop, object userState) {
            if ((this.getEmployeeVacationsByPeriodToPrimaveraOperationCompleted == null)) {
                this.getEmployeeVacationsByPeriodToPrimaveraOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetEmployeeVacationsByPeriodToPrimaveraOperationCompleted);
            }
            this.InvokeAsync("getEmployeeVacationsByPeriodToPrimavera", new object[] {
                        pToken,
                        idEmployee,
                        start,
                        stop}, this.getEmployeeVacationsByPeriodToPrimaveraOperationCompleted, userState);
        }
        
        private void OngetEmployeeVacationsByPeriodToPrimaveraOperationCompleted(object arg) {
            if ((this.getEmployeeVacationsByPeriodToPrimaveraCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getEmployeeVacationsByPeriodToPrimaveraCompleted(this, new getEmployeeVacationsByPeriodToPrimaveraCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getEmployeeMonthVacations", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getEmployeeMonthVacations(string pToken, string idEmployee, int year, int month) {
            object[] results = this.Invoke("getEmployeeMonthVacations", new object[] {
                        pToken,
                        idEmployee,
                        year,
                        month});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getEmployeeMonthVacationsAsync(string pToken, string idEmployee, int year, int month) {
            this.getEmployeeMonthVacationsAsync(pToken, idEmployee, year, month, null);
        }
        
        /// <remarks/>
        public void getEmployeeMonthVacationsAsync(string pToken, string idEmployee, int year, int month, object userState) {
            if ((this.getEmployeeMonthVacationsOperationCompleted == null)) {
                this.getEmployeeMonthVacationsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetEmployeeMonthVacationsOperationCompleted);
            }
            this.InvokeAsync("getEmployeeMonthVacations", new object[] {
                        pToken,
                        idEmployee,
                        year,
                        month}, this.getEmployeeMonthVacationsOperationCompleted, userState);
        }
        
        private void OngetEmployeeMonthVacationsOperationCompleted(object arg) {
            if ((this.getEmployeeMonthVacationsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getEmployeeMonthVacationsCompleted(this, new getEmployeeMonthVacationsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/addEmployeeVacations", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int addEmployeeVacations(string pToken, string idEmp, System.DateTime start, System.DateTime end, double numbDays, string comm, bool approved, string vacationsType, bool approvedBySuperior) {
            object[] results = this.Invoke("addEmployeeVacations", new object[] {
                        pToken,
                        idEmp,
                        start,
                        end,
                        numbDays,
                        comm,
                        approved,
                        vacationsType,
                        approvedBySuperior});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void addEmployeeVacationsAsync(string pToken, string idEmp, System.DateTime start, System.DateTime end, double numbDays, string comm, bool approved, string vacationsType, bool approvedBySuperior) {
            this.addEmployeeVacationsAsync(pToken, idEmp, start, end, numbDays, comm, approved, vacationsType, approvedBySuperior, null);
        }
        
        /// <remarks/>
        public void addEmployeeVacationsAsync(string pToken, string idEmp, System.DateTime start, System.DateTime end, double numbDays, string comm, bool approved, string vacationsType, bool approvedBySuperior, object userState) {
            if ((this.addEmployeeVacationsOperationCompleted == null)) {
                this.addEmployeeVacationsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddEmployeeVacationsOperationCompleted);
            }
            this.InvokeAsync("addEmployeeVacations", new object[] {
                        pToken,
                        idEmp,
                        start,
                        end,
                        numbDays,
                        comm,
                        approved,
                        vacationsType,
                        approvedBySuperior}, this.addEmployeeVacationsOperationCompleted, userState);
        }
        
        private void OnaddEmployeeVacationsOperationCompleted(object arg) {
            if ((this.addEmployeeVacationsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addEmployeeVacationsCompleted(this, new addEmployeeVacationsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/updateVacations", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int updateVacations(string pToken, string idVacations, System.DateTime start, System.DateTime end, double numbDays, string comm, bool approved, string idTypeVac) {
            object[] results = this.Invoke("updateVacations", new object[] {
                        pToken,
                        idVacations,
                        start,
                        end,
                        numbDays,
                        comm,
                        approved,
                        idTypeVac});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void updateVacationsAsync(string pToken, string idVacations, System.DateTime start, System.DateTime end, double numbDays, string comm, bool approved, string idTypeVac) {
            this.updateVacationsAsync(pToken, idVacations, start, end, numbDays, comm, approved, idTypeVac, null);
        }
        
        /// <remarks/>
        public void updateVacationsAsync(string pToken, string idVacations, System.DateTime start, System.DateTime end, double numbDays, string comm, bool approved, string idTypeVac, object userState) {
            if ((this.updateVacationsOperationCompleted == null)) {
                this.updateVacationsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateVacationsOperationCompleted);
            }
            this.InvokeAsync("updateVacations", new object[] {
                        pToken,
                        idVacations,
                        start,
                        end,
                        numbDays,
                        comm,
                        approved,
                        idTypeVac}, this.updateVacationsOperationCompleted, userState);
        }
        
        private void OnupdateVacationsOperationCompleted(object arg) {
            if ((this.updateVacationsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateVacationsCompleted(this, new updateVacationsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/delEmployeeVacations", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int delEmployeeVacations(string pToken, string idEmployee, string idVacations) {
            object[] results = this.Invoke("delEmployeeVacations", new object[] {
                        pToken,
                        idEmployee,
                        idVacations});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void delEmployeeVacationsAsync(string pToken, string idEmployee, string idVacations) {
            this.delEmployeeVacationsAsync(pToken, idEmployee, idVacations, null);
        }
        
        /// <remarks/>
        public void delEmployeeVacationsAsync(string pToken, string idEmployee, string idVacations, object userState) {
            if ((this.delEmployeeVacationsOperationCompleted == null)) {
                this.delEmployeeVacationsOperationCompleted = new System.Threading.SendOrPostCallback(this.OndelEmployeeVacationsOperationCompleted);
            }
            this.InvokeAsync("delEmployeeVacations", new object[] {
                        pToken,
                        idEmployee,
                        idVacations}, this.delEmployeeVacationsOperationCompleted, userState);
        }
        
        private void OndelEmployeeVacationsOperationCompleted(object arg) {
            if ((this.delEmployeeVacationsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.delEmployeeVacationsCompleted(this, new delEmployeeVacationsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getEmployeesOnVacationsFromDate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getEmployeesOnVacationsFromDate(string pToken, System.DateTime date, string idUser) {
            object[] results = this.Invoke("getEmployeesOnVacationsFromDate", new object[] {
                        pToken,
                        date,
                        idUser});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getEmployeesOnVacationsFromDateAsync(string pToken, System.DateTime date, string idUser) {
            this.getEmployeesOnVacationsFromDateAsync(pToken, date, idUser, null);
        }
        
        /// <remarks/>
        public void getEmployeesOnVacationsFromDateAsync(string pToken, System.DateTime date, string idUser, object userState) {
            if ((this.getEmployeesOnVacationsFromDateOperationCompleted == null)) {
                this.getEmployeesOnVacationsFromDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetEmployeesOnVacationsFromDateOperationCompleted);
            }
            this.InvokeAsync("getEmployeesOnVacationsFromDate", new object[] {
                        pToken,
                        date,
                        idUser}, this.getEmployeesOnVacationsFromDateOperationCompleted, userState);
        }
        
        private void OngetEmployeesOnVacationsFromDateOperationCompleted(object arg) {
            if ((this.getEmployeesOnVacationsFromDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getEmployeesOnVacationsFromDateCompleted(this, new getEmployeesOnVacationsFromDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getEmployeeVacationFromDate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getEmployeeVacationFromDate(string pToken, string idEmployee, System.DateTime date) {
            object[] results = this.Invoke("getEmployeeVacationFromDate", new object[] {
                        pToken,
                        idEmployee,
                        date});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getEmployeeVacationFromDateAsync(string pToken, string idEmployee, System.DateTime date) {
            this.getEmployeeVacationFromDateAsync(pToken, idEmployee, date, null);
        }
        
        /// <remarks/>
        public void getEmployeeVacationFromDateAsync(string pToken, string idEmployee, System.DateTime date, object userState) {
            if ((this.getEmployeeVacationFromDateOperationCompleted == null)) {
                this.getEmployeeVacationFromDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetEmployeeVacationFromDateOperationCompleted);
            }
            this.InvokeAsync("getEmployeeVacationFromDate", new object[] {
                        pToken,
                        idEmployee,
                        date}, this.getEmployeeVacationFromDateOperationCompleted, userState);
        }
        
        private void OngetEmployeeVacationFromDateOperationCompleted(object arg) {
            if ((this.getEmployeeVacationFromDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getEmployeeVacationFromDateCompleted(this, new getEmployeeVacationFromDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getEmployeeVacationFromBeginAndEndDate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getEmployeeVacationFromBeginAndEndDate(string pToken, string idEmployee, System.DateTime startDate, System.DateTime endDate) {
            object[] results = this.Invoke("getEmployeeVacationFromBeginAndEndDate", new object[] {
                        pToken,
                        idEmployee,
                        startDate,
                        endDate});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getEmployeeVacationFromBeginAndEndDateAsync(string pToken, string idEmployee, System.DateTime startDate, System.DateTime endDate) {
            this.getEmployeeVacationFromBeginAndEndDateAsync(pToken, idEmployee, startDate, endDate, null);
        }
        
        /// <remarks/>
        public void getEmployeeVacationFromBeginAndEndDateAsync(string pToken, string idEmployee, System.DateTime startDate, System.DateTime endDate, object userState) {
            if ((this.getEmployeeVacationFromBeginAndEndDateOperationCompleted == null)) {
                this.getEmployeeVacationFromBeginAndEndDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetEmployeeVacationFromBeginAndEndDateOperationCompleted);
            }
            this.InvokeAsync("getEmployeeVacationFromBeginAndEndDate", new object[] {
                        pToken,
                        idEmployee,
                        startDate,
                        endDate}, this.getEmployeeVacationFromBeginAndEndDateOperationCompleted, userState);
        }
        
        private void OngetEmployeeVacationFromBeginAndEndDateOperationCompleted(object arg) {
            if ((this.getEmployeeVacationFromBeginAndEndDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getEmployeeVacationFromBeginAndEndDateCompleted(this, new getEmployeeVacationFromBeginAndEndDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getEmployeeDatePeriodVacations", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getEmployeeDatePeriodVacations(string pToken, string idEmployee, System.DateTime startDate, System.DateTime endDate) {
            object[] results = this.Invoke("getEmployeeDatePeriodVacations", new object[] {
                        pToken,
                        idEmployee,
                        startDate,
                        endDate});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getEmployeeDatePeriodVacationsAsync(string pToken, string idEmployee, System.DateTime startDate, System.DateTime endDate) {
            this.getEmployeeDatePeriodVacationsAsync(pToken, idEmployee, startDate, endDate, null);
        }
        
        /// <remarks/>
        public void getEmployeeDatePeriodVacationsAsync(string pToken, string idEmployee, System.DateTime startDate, System.DateTime endDate, object userState) {
            if ((this.getEmployeeDatePeriodVacationsOperationCompleted == null)) {
                this.getEmployeeDatePeriodVacationsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetEmployeeDatePeriodVacationsOperationCompleted);
            }
            this.InvokeAsync("getEmployeeDatePeriodVacations", new object[] {
                        pToken,
                        idEmployee,
                        startDate,
                        endDate}, this.getEmployeeDatePeriodVacationsOperationCompleted, userState);
        }
        
        private void OngetEmployeeDatePeriodVacationsOperationCompleted(object arg) {
            if ((this.getEmployeeDatePeriodVacationsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getEmployeeDatePeriodVacationsCompleted(this, new getEmployeeDatePeriodVacationsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getAllVacationsYear", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getAllVacationsYear(string pToken, string year) {
            object[] results = this.Invoke("getAllVacationsYear", new object[] {
                        pToken,
                        year});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getAllVacationsYearAsync(string pToken, string year) {
            this.getAllVacationsYearAsync(pToken, year, null);
        }
        
        /// <remarks/>
        public void getAllVacationsYearAsync(string pToken, string year, object userState) {
            if ((this.getAllVacationsYearOperationCompleted == null)) {
                this.getAllVacationsYearOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllVacationsYearOperationCompleted);
            }
            this.InvokeAsync("getAllVacationsYear", new object[] {
                        pToken,
                        year}, this.getAllVacationsYearOperationCompleted, userState);
        }
        
        private void OngetAllVacationsYearOperationCompleted(object arg) {
            if ((this.getAllVacationsYearCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllVacationsYearCompleted(this, new getAllVacationsYearCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getVacationsApproved", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getVacationsApproved(string pToken, string idVacations) {
            object[] results = this.Invoke("getVacationsApproved", new object[] {
                        pToken,
                        idVacations});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getVacationsApprovedAsync(string pToken, string idVacations) {
            this.getVacationsApprovedAsync(pToken, idVacations, null);
        }
        
        /// <remarks/>
        public void getVacationsApprovedAsync(string pToken, string idVacations, object userState) {
            if ((this.getVacationsApprovedOperationCompleted == null)) {
                this.getVacationsApprovedOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetVacationsApprovedOperationCompleted);
            }
            this.InvokeAsync("getVacationsApproved", new object[] {
                        pToken,
                        idVacations}, this.getVacationsApprovedOperationCompleted, userState);
        }
        
        private void OngetVacationsApprovedOperationCompleted(object arg) {
            if ((this.getVacationsApprovedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getVacationsApprovedCompleted(this, new getVacationsApprovedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getEmployeeAllMonthVacations", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getEmployeeAllMonthVacations(string pToken, string idEmployee, int year, int month) {
            object[] results = this.Invoke("getEmployeeAllMonthVacations", new object[] {
                        pToken,
                        idEmployee,
                        year,
                        month});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getEmployeeAllMonthVacationsAsync(string pToken, string idEmployee, int year, int month) {
            this.getEmployeeAllMonthVacationsAsync(pToken, idEmployee, year, month, null);
        }
        
        /// <remarks/>
        public void getEmployeeAllMonthVacationsAsync(string pToken, string idEmployee, int year, int month, object userState) {
            if ((this.getEmployeeAllMonthVacationsOperationCompleted == null)) {
                this.getEmployeeAllMonthVacationsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetEmployeeAllMonthVacationsOperationCompleted);
            }
            this.InvokeAsync("getEmployeeAllMonthVacations", new object[] {
                        pToken,
                        idEmployee,
                        year,
                        month}, this.getEmployeeAllMonthVacationsOperationCompleted, userState);
        }
        
        private void OngetEmployeeAllMonthVacationsOperationCompleted(object arg) {
            if ((this.getEmployeeAllMonthVacationsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getEmployeeAllMonthVacationsCompleted(this, new getEmployeeAllMonthVacationsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getAllVacationsOrderByIdVacations", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getAllVacationsOrderByIdVacations(string pToken) {
            object[] results = this.Invoke("getAllVacationsOrderByIdVacations", new object[] {
                        pToken});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getAllVacationsOrderByIdVacationsAsync(string pToken) {
            this.getAllVacationsOrderByIdVacationsAsync(pToken, null);
        }
        
        /// <remarks/>
        public void getAllVacationsOrderByIdVacationsAsync(string pToken, object userState) {
            if ((this.getAllVacationsOrderByIdVacationsOperationCompleted == null)) {
                this.getAllVacationsOrderByIdVacationsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllVacationsOrderByIdVacationsOperationCompleted);
            }
            this.InvokeAsync("getAllVacationsOrderByIdVacations", new object[] {
                        pToken}, this.getAllVacationsOrderByIdVacationsOperationCompleted, userState);
        }
        
        private void OngetAllVacationsOrderByIdVacationsOperationCompleted(object arg) {
            if ((this.getAllVacationsOrderByIdVacationsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllVacationsOrderByIdVacationsCompleted(this, new getAllVacationsOrderByIdVacationsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getEmployeeAllVacationsResume", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getEmployeeAllVacationsResume(string pToken, string idEmployee) {
            object[] results = this.Invoke("getEmployeeAllVacationsResume", new object[] {
                        pToken,
                        idEmployee});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getEmployeeAllVacationsResumeAsync(string pToken, string idEmployee) {
            this.getEmployeeAllVacationsResumeAsync(pToken, idEmployee, null);
        }
        
        /// <remarks/>
        public void getEmployeeAllVacationsResumeAsync(string pToken, string idEmployee, object userState) {
            if ((this.getEmployeeAllVacationsResumeOperationCompleted == null)) {
                this.getEmployeeAllVacationsResumeOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetEmployeeAllVacationsResumeOperationCompleted);
            }
            this.InvokeAsync("getEmployeeAllVacationsResume", new object[] {
                        pToken,
                        idEmployee}, this.getEmployeeAllVacationsResumeOperationCompleted, userState);
        }
        
        private void OngetEmployeeAllVacationsResumeOperationCompleted(object arg) {
            if ((this.getEmployeeAllVacationsResumeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getEmployeeAllVacationsResumeCompleted(this, new getEmployeeAllVacationsResumeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getEmployeeYearVacationsResume", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getEmployeeYearVacationsResume(string pToken, string idEmployee, int year) {
            object[] results = this.Invoke("getEmployeeYearVacationsResume", new object[] {
                        pToken,
                        idEmployee,
                        year});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getEmployeeYearVacationsResumeAsync(string pToken, string idEmployee, int year) {
            this.getEmployeeYearVacationsResumeAsync(pToken, idEmployee, year, null);
        }
        
        /// <remarks/>
        public void getEmployeeYearVacationsResumeAsync(string pToken, string idEmployee, int year, object userState) {
            if ((this.getEmployeeYearVacationsResumeOperationCompleted == null)) {
                this.getEmployeeYearVacationsResumeOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetEmployeeYearVacationsResumeOperationCompleted);
            }
            this.InvokeAsync("getEmployeeYearVacationsResume", new object[] {
                        pToken,
                        idEmployee,
                        year}, this.getEmployeeYearVacationsResumeOperationCompleted, userState);
        }
        
        private void OngetEmployeeYearVacationsResumeOperationCompleted(object arg) {
            if ((this.getEmployeeYearVacationsResumeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getEmployeeYearVacationsResumeCompleted(this, new getEmployeeYearVacationsResumeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/addVacationsResume", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string addVacationsResume(string pToken, string idEmployee, int year, int total, double used, double older) {
            object[] results = this.Invoke("addVacationsResume", new object[] {
                        pToken,
                        idEmployee,
                        year,
                        total,
                        used,
                        older});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void addVacationsResumeAsync(string pToken, string idEmployee, int year, int total, double used, double older) {
            this.addVacationsResumeAsync(pToken, idEmployee, year, total, used, older, null);
        }
        
        /// <remarks/>
        public void addVacationsResumeAsync(string pToken, string idEmployee, int year, int total, double used, double older, object userState) {
            if ((this.addVacationsResumeOperationCompleted == null)) {
                this.addVacationsResumeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddVacationsResumeOperationCompleted);
            }
            this.InvokeAsync("addVacationsResume", new object[] {
                        pToken,
                        idEmployee,
                        year,
                        total,
                        used,
                        older}, this.addVacationsResumeOperationCompleted, userState);
        }
        
        private void OnaddVacationsResumeOperationCompleted(object arg) {
            if ((this.addVacationsResumeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addVacationsResumeCompleted(this, new addVacationsResumeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/updateVacationsResume", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int updateVacationsResume(string pToken, string idVacationsResume, string idEmployee, int year, int total, double used, double older) {
            object[] results = this.Invoke("updateVacationsResume", new object[] {
                        pToken,
                        idVacationsResume,
                        idEmployee,
                        year,
                        total,
                        used,
                        older});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void updateVacationsResumeAsync(string pToken, string idVacationsResume, string idEmployee, int year, int total, double used, double older) {
            this.updateVacationsResumeAsync(pToken, idVacationsResume, idEmployee, year, total, used, older, null);
        }
        
        /// <remarks/>
        public void updateVacationsResumeAsync(string pToken, string idVacationsResume, string idEmployee, int year, int total, double used, double older, object userState) {
            if ((this.updateVacationsResumeOperationCompleted == null)) {
                this.updateVacationsResumeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateVacationsResumeOperationCompleted);
            }
            this.InvokeAsync("updateVacationsResume", new object[] {
                        pToken,
                        idVacationsResume,
                        idEmployee,
                        year,
                        total,
                        used,
                        older}, this.updateVacationsResumeOperationCompleted, userState);
        }
        
        private void OnupdateVacationsResumeOperationCompleted(object arg) {
            if ((this.updateVacationsResumeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateVacationsResumeCompleted(this, new updateVacationsResumeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getSecurityToken", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getSecurityToken(string pUsername, string pPassword, bool isEncrypted) {
            object[] results = this.Invoke("getSecurityToken", new object[] {
                        pUsername,
                        pPassword,
                        isEncrypted});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getSecurityTokenAsync(string pUsername, string pPassword, bool isEncrypted) {
            this.getSecurityTokenAsync(pUsername, pPassword, isEncrypted, null);
        }
        
        /// <remarks/>
        public void getSecurityTokenAsync(string pUsername, string pPassword, bool isEncrypted, object userState) {
            if ((this.getSecurityTokenOperationCompleted == null)) {
                this.getSecurityTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetSecurityTokenOperationCompleted);
            }
            this.InvokeAsync("getSecurityToken", new object[] {
                        pUsername,
                        pPassword,
                        isEncrypted}, this.getSecurityTokenOperationCompleted, userState);
        }
        
        private void OngetSecurityTokenOperationCompleted(object arg) {
            if ((this.getSecurityTokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getSecurityTokenCompleted(this, new getSecurityTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/removeSecurityToken", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void removeSecurityToken(string pToken) {
            this.Invoke("removeSecurityToken", new object[] {
                        pToken});
        }
        
        /// <remarks/>
        public void removeSecurityTokenAsync(string pToken) {
            this.removeSecurityTokenAsync(pToken, null);
        }
        
        /// <remarks/>
        public void removeSecurityTokenAsync(string pToken, object userState) {
            if ((this.removeSecurityTokenOperationCompleted == null)) {
                this.removeSecurityTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnremoveSecurityTokenOperationCompleted);
            }
            this.InvokeAsync("removeSecurityToken", new object[] {
                        pToken}, this.removeSecurityTokenOperationCompleted, userState);
        }
        
        private void OnremoveSecurityTokenOperationCompleted(object arg) {
            if ((this.removeSecurityTokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.removeSecurityTokenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ping", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ping() {
            object[] results = this.Invoke("ping", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void pingAsync() {
            this.pingAsync(null);
        }
        
        /// <remarks/>
        public void pingAsync(object userState) {
            if ((this.pingOperationCompleted == null)) {
                this.pingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnpingOperationCompleted);
            }
            this.InvokeAsync("ping", new object[0], this.pingOperationCompleted, userState);
        }
        
        private void OnpingOperationCompleted(object arg) {
            if ((this.pingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.pingCompleted(this, new pingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/backupDataBase", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int backupDataBase(string pToken, string pathBKLocation) {
            object[] results = this.Invoke("backupDataBase", new object[] {
                        pToken,
                        pathBKLocation});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void backupDataBaseAsync(string pToken, string pathBKLocation) {
            this.backupDataBaseAsync(pToken, pathBKLocation, null);
        }
        
        /// <remarks/>
        public void backupDataBaseAsync(string pToken, string pathBKLocation, object userState) {
            if ((this.backupDataBaseOperationCompleted == null)) {
                this.backupDataBaseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnbackupDataBaseOperationCompleted);
            }
            this.InvokeAsync("backupDataBase", new object[] {
                        pToken,
                        pathBKLocation}, this.backupDataBaseOperationCompleted, userState);
        }
        
        private void OnbackupDataBaseOperationCompleted(object arg) {
            if ((this.backupDataBaseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.backupDataBaseCompleted(this, new backupDataBaseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/backupDB", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int backupDB(string pathBKLocation, string dbName) {
            object[] results = this.Invoke("backupDB", new object[] {
                        pathBKLocation,
                        dbName});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void backupDBAsync(string pathBKLocation, string dbName) {
            this.backupDBAsync(pathBKLocation, dbName, null);
        }
        
        /// <remarks/>
        public void backupDBAsync(string pathBKLocation, string dbName, object userState) {
            if ((this.backupDBOperationCompleted == null)) {
                this.backupDBOperationCompleted = new System.Threading.SendOrPostCallback(this.OnbackupDBOperationCompleted);
            }
            this.InvokeAsync("backupDB", new object[] {
                        pathBKLocation,
                        dbName}, this.backupDBOperationCompleted, userState);
        }
        
        private void OnbackupDBOperationCompleted(object arg) {
            if ((this.backupDBCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.backupDBCompleted(this, new backupDBCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/restoreDB", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int restoreDB(string pToken, string pathFile, string dbName) {
            object[] results = this.Invoke("restoreDB", new object[] {
                        pToken,
                        pathFile,
                        dbName});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void restoreDBAsync(string pToken, string pathFile, string dbName) {
            this.restoreDBAsync(pToken, pathFile, dbName, null);
        }
        
        /// <remarks/>
        public void restoreDBAsync(string pToken, string pathFile, string dbName, object userState) {
            if ((this.restoreDBOperationCompleted == null)) {
                this.restoreDBOperationCompleted = new System.Threading.SendOrPostCallback(this.OnrestoreDBOperationCompleted);
            }
            this.InvokeAsync("restoreDB", new object[] {
                        pToken,
                        pathFile,
                        dbName}, this.restoreDBOperationCompleted, userState);
        }
        
        private void OnrestoreDBOperationCompleted(object arg) {
            if ((this.restoreDBCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.restoreDBCompleted(this, new restoreDBCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/runUpdateScript", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int runUpdateScript(string pToken) {
            object[] results = this.Invoke("runUpdateScript", new object[] {
                        pToken});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void runUpdateScriptAsync(string pToken) {
            this.runUpdateScriptAsync(pToken, null);
        }
        
        /// <remarks/>
        public void runUpdateScriptAsync(string pToken, object userState) {
            if ((this.runUpdateScriptOperationCompleted == null)) {
                this.runUpdateScriptOperationCompleted = new System.Threading.SendOrPostCallback(this.OnrunUpdateScriptOperationCompleted);
            }
            this.InvokeAsync("runUpdateScript", new object[] {
                        pToken}, this.runUpdateScriptOperationCompleted, userState);
        }
        
        private void OnrunUpdateScriptOperationCompleted(object arg) {
            if ((this.runUpdateScriptCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.runUpdateScriptCompleted(this, new runUpdateScriptCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/translateRolesTableDB", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool translateRolesTableDB(string pToken, string Lang) {
            object[] results = this.Invoke("translateRolesTableDB", new object[] {
                        pToken,
                        Lang});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void translateRolesTableDBAsync(string pToken, string Lang) {
            this.translateRolesTableDBAsync(pToken, Lang, null);
        }
        
        /// <remarks/>
        public void translateRolesTableDBAsync(string pToken, string Lang, object userState) {
            if ((this.translateRolesTableDBOperationCompleted == null)) {
                this.translateRolesTableDBOperationCompleted = new System.Threading.SendOrPostCallback(this.OntranslateRolesTableDBOperationCompleted);
            }
            this.InvokeAsync("translateRolesTableDB", new object[] {
                        pToken,
                        Lang}, this.translateRolesTableDBOperationCompleted, userState);
        }
        
        private void OntranslateRolesTableDBOperationCompleted(object arg) {
            if ((this.translateRolesTableDBCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.translateRolesTableDBCompleted(this, new translateRolesTableDBCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/translateExceptionsTableDB", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool translateExceptionsTableDB(string pToken, string Lang) {
            object[] results = this.Invoke("translateExceptionsTableDB", new object[] {
                        pToken,
                        Lang});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void translateExceptionsTableDBAsync(string pToken, string Lang) {
            this.translateExceptionsTableDBAsync(pToken, Lang, null);
        }
        
        /// <remarks/>
        public void translateExceptionsTableDBAsync(string pToken, string Lang, object userState) {
            if ((this.translateExceptionsTableDBOperationCompleted == null)) {
                this.translateExceptionsTableDBOperationCompleted = new System.Threading.SendOrPostCallback(this.OntranslateExceptionsTableDBOperationCompleted);
            }
            this.InvokeAsync("translateExceptionsTableDB", new object[] {
                        pToken,
                        Lang}, this.translateExceptionsTableDBOperationCompleted, userState);
        }
        
        private void OntranslateExceptionsTableDBOperationCompleted(object arg) {
            if ((this.translateExceptionsTableDBCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.translateExceptionsTableDBCompleted(this, new translateExceptionsTableDBCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/hasEmployees", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string hasEmployees(string pToken, string idDepartment) {
            object[] results = this.Invoke("hasEmployees", new object[] {
                        pToken,
                        idDepartment});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void hasEmployeesAsync(string pToken, string idDepartment) {
            this.hasEmployeesAsync(pToken, idDepartment, null);
        }
        
        /// <remarks/>
        public void hasEmployeesAsync(string pToken, string idDepartment, object userState) {
            if ((this.hasEmployeesOperationCompleted == null)) {
                this.hasEmployeesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnhasEmployeesOperationCompleted);
            }
            this.InvokeAsync("hasEmployees", new object[] {
                        pToken,
                        idDepartment}, this.hasEmployeesOperationCompleted, userState);
        }
        
        private void OnhasEmployeesOperationCompleted(object arg) {
            if ((this.hasEmployeesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.hasEmployeesCompleted(this, new hasEmployeesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/unboundUsersDepart", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int unboundUsersDepart(string pToken, string idDepartment) {
            object[] results = this.Invoke("unboundUsersDepart", new object[] {
                        pToken,
                        idDepartment});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void unboundUsersDepartAsync(string pToken, string idDepartment) {
            this.unboundUsersDepartAsync(pToken, idDepartment, null);
        }
        
        /// <remarks/>
        public void unboundUsersDepartAsync(string pToken, string idDepartment, object userState) {
            if ((this.unboundUsersDepartOperationCompleted == null)) {
                this.unboundUsersDepartOperationCompleted = new System.Threading.SendOrPostCallback(this.OnunboundUsersDepartOperationCompleted);
            }
            this.InvokeAsync("unboundUsersDepart", new object[] {
                        pToken,
                        idDepartment}, this.unboundUsersDepartOperationCompleted, userState);
        }
        
        private void OnunboundUsersDepartOperationCompleted(object arg) {
            if ((this.unboundUsersDepartCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.unboundUsersDepartCompleted(this, new unboundUsersDepartCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/hasuser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string hasuser(string pToken, string idDepartment) {
            object[] results = this.Invoke("hasuser", new object[] {
                        pToken,
                        idDepartment});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void hasuserAsync(string pToken, string idDepartment) {
            this.hasuserAsync(pToken, idDepartment, null);
        }
        
        /// <remarks/>
        public void hasuserAsync(string pToken, string idDepartment, object userState) {
            if ((this.hasuserOperationCompleted == null)) {
                this.hasuserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnhasuserOperationCompleted);
            }
            this.InvokeAsync("hasuser", new object[] {
                        pToken,
                        idDepartment}, this.hasuserOperationCompleted, userState);
        }
        
        private void OnhasuserOperationCompleted(object arg) {
            if ((this.hasuserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.hasuserCompleted(this, new hasuserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getDepartmentName", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable getDepartmentName(string pToken, string idDepartment) {
            object[] results = this.Invoke("getDepartmentName", new object[] {
                        pToken,
                        idDepartment});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void getDepartmentNameAsync(string pToken, string idDepartment) {
            this.getDepartmentNameAsync(pToken, idDepartment, null);
        }
        
        /// <remarks/>
        public void getDepartmentNameAsync(string pToken, string idDepartment, object userState) {
            if ((this.getDepartmentNameOperationCompleted == null)) {
                this.getDepartmentNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDepartmentNameOperationCompleted);
            }
            this.InvokeAsync("getDepartmentName", new object[] {
                        pToken,
                        idDepartment}, this.getDepartmentNameOperationCompleted, userState);
        }
        
        private void OngetDepartmentNameOperationCompleted(object arg) {
            if ((this.getDepartmentNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDepartmentNameCompleted(this, new getDepartmentNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getDepartmentByName", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getDepartmentByName(string pToken, string name, string description) {
            object[] results = this.Invoke("getDepartmentByName", new object[] {
                        pToken,
                        name,
                        description});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getDepartmentByNameAsync(string pToken, string name, string description) {
            this.getDepartmentByNameAsync(pToken, name, description, null);
        }
        
        /// <remarks/>
        public void getDepartmentByNameAsync(string pToken, string name, string description, object userState) {
            if ((this.getDepartmentByNameOperationCompleted == null)) {
                this.getDepartmentByNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDepartmentByNameOperationCompleted);
            }
            this.InvokeAsync("getDepartmentByName", new object[] {
                        pToken,
                        name,
                        description}, this.getDepartmentByNameOperationCompleted, userState);
        }
        
        private void OngetDepartmentByNameOperationCompleted(object arg) {
            if ((this.getDepartmentByNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDepartmentByNameCompleted(this, new getDepartmentByNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getDepartmentByNameAndFather", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getDepartmentByNameAndFather(string pToken, string name, string idFather) {
            object[] results = this.Invoke("getDepartmentByNameAndFather", new object[] {
                        pToken,
                        name,
                        idFather});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getDepartmentByNameAndFatherAsync(string pToken, string name, string idFather) {
            this.getDepartmentByNameAndFatherAsync(pToken, name, idFather, null);
        }
        
        /// <remarks/>
        public void getDepartmentByNameAndFatherAsync(string pToken, string name, string idFather, object userState) {
            if ((this.getDepartmentByNameAndFatherOperationCompleted == null)) {
                this.getDepartmentByNameAndFatherOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDepartmentByNameAndFatherOperationCompleted);
            }
            this.InvokeAsync("getDepartmentByNameAndFather", new object[] {
                        pToken,
                        name,
                        idFather}, this.getDepartmentByNameAndFatherOperationCompleted, userState);
        }
        
        private void OngetDepartmentByNameAndFatherOperationCompleted(object arg) {
            if ((this.getDepartmentByNameAndFatherCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDepartmentByNameAndFatherCompleted(this, new getDepartmentByNameAndFatherCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/unboundEmployeesDepart", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int unboundEmployeesDepart(string pToken, string idDepartment) {
            object[] results = this.Invoke("unboundEmployeesDepart", new object[] {
                        pToken,
                        idDepartment});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void unboundEmployeesDepartAsync(string pToken, string idDepartment) {
            this.unboundEmployeesDepartAsync(pToken, idDepartment, null);
        }
        
        /// <remarks/>
        public void unboundEmployeesDepartAsync(string pToken, string idDepartment, object userState) {
            if ((this.unboundEmployeesDepartOperationCompleted == null)) {
                this.unboundEmployeesDepartOperationCompleted = new System.Threading.SendOrPostCallback(this.OnunboundEmployeesDepartOperationCompleted);
            }
            this.InvokeAsync("unboundEmployeesDepart", new object[] {
                        pToken,
                        idDepartment}, this.unboundEmployeesDepartOperationCompleted, userState);
        }
        
        private void OnunboundEmployeesDepartOperationCompleted(object arg) {
            if ((this.unboundEmployeesDepartCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.unboundEmployeesDepartCompleted(this, new unboundEmployeesDepartCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/addDepartment", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string addDepartment(string pToken, string idFather, string name, string description, string id, string code, string css) {
            object[] results = this.Invoke("addDepartment", new object[] {
                        pToken,
                        idFather,
                        name,
                        description,
                        id,
                        code,
                        css});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void addDepartmentAsync(string pToken, string idFather, string name, string description, string id, string code, string css) {
            this.addDepartmentAsync(pToken, idFather, name, description, id, code, css, null);
        }
        
        /// <remarks/>
        public void addDepartmentAsync(string pToken, string idFather, string name, string description, string id, string code, string css, object userState) {
            if ((this.addDepartmentOperationCompleted == null)) {
                this.addDepartmentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddDepartmentOperationCompleted);
            }
            this.InvokeAsync("addDepartment", new object[] {
                        pToken,
                        idFather,
                        name,
                        description,
                        id,
                        code,
                        css}, this.addDepartmentOperationCompleted, userState);
        }
        
        private void OnaddDepartmentOperationCompleted(object arg) {
            if ((this.addDepartmentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addDepartmentCompleted(this, new addDepartmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/addAcademicDegree", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int addAcademicDegree(string pToken, string name, string description) {
            object[] results = this.Invoke("addAcademicDegree", new object[] {
                        pToken,
                        name,
                        description});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void addAcademicDegreeAsync(string pToken, string name, string description) {
            this.addAcademicDegreeAsync(pToken, name, description, null);
        }
        
        /// <remarks/>
        public void addAcademicDegreeAsync(string pToken, string name, string description, object userState) {
            if ((this.addAcademicDegreeOperationCompleted == null)) {
                this.addAcademicDegreeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddAcademicDegreeOperationCompleted);
            }
            this.InvokeAsync("addAcademicDegree", new object[] {
                        pToken,
                        name,
                        description}, this.addAcademicDegreeOperationCompleted, userState);
        }
        
        private void OnaddAcademicDegreeOperationCompleted(object arg) {
            if ((this.addAcademicDegreeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addAcademicDegreeCompleted(this, new addAcademicDegreeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/changeAcademicDegree", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int changeAcademicDegree(string pToken, string idAcademicDegree, string name, string description) {
            object[] results = this.Invoke("changeAcademicDegree", new object[] {
                        pToken,
                        idAcademicDegree,
                        name,
                        description});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void changeAcademicDegreeAsync(string pToken, string idAcademicDegree, string name, string description) {
            this.changeAcademicDegreeAsync(pToken, idAcademicDegree, name, description, null);
        }
        
        /// <remarks/>
        public void changeAcademicDegreeAsync(string pToken, string idAcademicDegree, string name, string description, object userState) {
            if ((this.changeAcademicDegreeOperationCompleted == null)) {
                this.changeAcademicDegreeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnchangeAcademicDegreeOperationCompleted);
            }
            this.InvokeAsync("changeAcademicDegree", new object[] {
                        pToken,
                        idAcademicDegree,
                        name,
                        description}, this.changeAcademicDegreeOperationCompleted, userState);
        }
        
        private void OnchangeAcademicDegreeOperationCompleted(object arg) {
            if ((this.changeAcademicDegreeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.changeAcademicDegreeCompleted(this, new changeAcademicDegreeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/delAcademicDegree", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int delAcademicDegree(string pToken, string idAcademicDegree) {
            object[] results = this.Invoke("delAcademicDegree", new object[] {
                        pToken,
                        idAcademicDegree});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void delAcademicDegreeAsync(string pToken, string idAcademicDegree) {
            this.delAcademicDegreeAsync(pToken, idAcademicDegree, null);
        }
        
        /// <remarks/>
        public void delAcademicDegreeAsync(string pToken, string idAcademicDegree, object userState) {
            if ((this.delAcademicDegreeOperationCompleted == null)) {
                this.delAcademicDegreeOperationCompleted = new System.Threading.SendOrPostCallback(this.OndelAcademicDegreeOperationCompleted);
            }
            this.InvokeAsync("delAcademicDegree", new object[] {
                        pToken,
                        idAcademicDegree}, this.delAcademicDegreeOperationCompleted, userState);
        }
        
        private void OndelAcademicDegreeOperationCompleted(object arg) {
            if ((this.delAcademicDegreeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.delAcademicDegreeCompleted(this, new delAcademicDegreeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getAllAcademicDegree", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getAllAcademicDegree(string pToken) {
            object[] results = this.Invoke("getAllAcademicDegree", new object[] {
                        pToken});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getAllAcademicDegreeAsync(string pToken) {
            this.getAllAcademicDegreeAsync(pToken, null);
        }
        
        /// <remarks/>
        public void getAllAcademicDegreeAsync(string pToken, object userState) {
            if ((this.getAllAcademicDegreeOperationCompleted == null)) {
                this.getAllAcademicDegreeOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllAcademicDegreeOperationCompleted);
            }
            this.InvokeAsync("getAllAcademicDegree", new object[] {
                        pToken}, this.getAllAcademicDegreeOperationCompleted, userState);
        }
        
        private void OngetAllAcademicDegreeOperationCompleted(object arg) {
            if ((this.getAllAcademicDegreeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllAcademicDegreeCompleted(this, new getAllAcademicDegreeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getAllBreakTypes", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getAllBreakTypes(string pToken) {
            object[] results = this.Invoke("getAllBreakTypes", new object[] {
                        pToken});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getAllBreakTypesAsync(string pToken) {
            this.getAllBreakTypesAsync(pToken, null);
        }
        
        /// <remarks/>
        public void getAllBreakTypesAsync(string pToken, object userState) {
            if ((this.getAllBreakTypesOperationCompleted == null)) {
                this.getAllBreakTypesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllBreakTypesOperationCompleted);
            }
            this.InvokeAsync("getAllBreakTypes", new object[] {
                        pToken}, this.getAllBreakTypesOperationCompleted, userState);
        }
        
        private void OngetAllBreakTypesOperationCompleted(object arg) {
            if ((this.getAllBreakTypesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllBreakTypesCompleted(this, new getAllBreakTypesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/addBreakType", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int addBreakType(string pToken, string name, string description, System.DateTime defaultDuration) {
            object[] results = this.Invoke("addBreakType", new object[] {
                        pToken,
                        name,
                        description,
                        defaultDuration});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void addBreakTypeAsync(string pToken, string name, string description, System.DateTime defaultDuration) {
            this.addBreakTypeAsync(pToken, name, description, defaultDuration, null);
        }
        
        /// <remarks/>
        public void addBreakTypeAsync(string pToken, string name, string description, System.DateTime defaultDuration, object userState) {
            if ((this.addBreakTypeOperationCompleted == null)) {
                this.addBreakTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddBreakTypeOperationCompleted);
            }
            this.InvokeAsync("addBreakType", new object[] {
                        pToken,
                        name,
                        description,
                        defaultDuration}, this.addBreakTypeOperationCompleted, userState);
        }
        
        private void OnaddBreakTypeOperationCompleted(object arg) {
            if ((this.addBreakTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addBreakTypeCompleted(this, new addBreakTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/changeBreakType", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int changeBreakType(string pToken, string idBreakType, string name, string description, System.DateTime defaultDuration) {
            object[] results = this.Invoke("changeBreakType", new object[] {
                        pToken,
                        idBreakType,
                        name,
                        description,
                        defaultDuration});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void changeBreakTypeAsync(string pToken, string idBreakType, string name, string description, System.DateTime defaultDuration) {
            this.changeBreakTypeAsync(pToken, idBreakType, name, description, defaultDuration, null);
        }
        
        /// <remarks/>
        public void changeBreakTypeAsync(string pToken, string idBreakType, string name, string description, System.DateTime defaultDuration, object userState) {
            if ((this.changeBreakTypeOperationCompleted == null)) {
                this.changeBreakTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnchangeBreakTypeOperationCompleted);
            }
            this.InvokeAsync("changeBreakType", new object[] {
                        pToken,
                        idBreakType,
                        name,
                        description,
                        defaultDuration}, this.changeBreakTypeOperationCompleted, userState);
        }
        
        private void OnchangeBreakTypeOperationCompleted(object arg) {
            if ((this.changeBreakTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.changeBreakTypeCompleted(this, new changeBreakTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/delBreakType", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int delBreakType(string pToken, string idBreakType) {
            object[] results = this.Invoke("delBreakType", new object[] {
                        pToken,
                        idBreakType});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void delBreakTypeAsync(string pToken, string idBreakType) {
            this.delBreakTypeAsync(pToken, idBreakType, null);
        }
        
        /// <remarks/>
        public void delBreakTypeAsync(string pToken, string idBreakType, object userState) {
            if ((this.delBreakTypeOperationCompleted == null)) {
                this.delBreakTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OndelBreakTypeOperationCompleted);
            }
            this.InvokeAsync("delBreakType", new object[] {
                        pToken,
                        idBreakType}, this.delBreakTypeOperationCompleted, userState);
        }
        
        private void OndelBreakTypeOperationCompleted(object arg) {
            if ((this.delBreakTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.delBreakTypeCompleted(this, new delBreakTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getAllCities", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getAllCities(string pToken) {
            object[] results = this.Invoke("getAllCities", new object[] {
                        pToken});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getAllCitiesAsync(string pToken) {
            this.getAllCitiesAsync(pToken, null);
        }
        
        /// <remarks/>
        public void getAllCitiesAsync(string pToken, object userState) {
            if ((this.getAllCitiesOperationCompleted == null)) {
                this.getAllCitiesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllCitiesOperationCompleted);
            }
            this.InvokeAsync("getAllCities", new object[] {
                        pToken}, this.getAllCitiesOperationCompleted, userState);
        }
        
        private void OngetAllCitiesOperationCompleted(object arg) {
            if ((this.getAllCitiesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllCitiesCompleted(this, new getAllCitiesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getCitiesByName", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getCitiesByName(string pToken, string name) {
            object[] results = this.Invoke("getCitiesByName", new object[] {
                        pToken,
                        name});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getCitiesByNameAsync(string pToken, string name) {
            this.getCitiesByNameAsync(pToken, name, null);
        }
        
        /// <remarks/>
        public void getCitiesByNameAsync(string pToken, string name, object userState) {
            if ((this.getCitiesByNameOperationCompleted == null)) {
                this.getCitiesByNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetCitiesByNameOperationCompleted);
            }
            this.InvokeAsync("getCitiesByName", new object[] {
                        pToken,
                        name}, this.getCitiesByNameOperationCompleted, userState);
        }
        
        private void OngetCitiesByNameOperationCompleted(object arg) {
            if ((this.getCitiesByNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getCitiesByNameCompleted(this, new getCitiesByNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/addCity", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int addCity(string pToken, string name) {
            object[] results = this.Invoke("addCity", new object[] {
                        pToken,
                        name});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void addCityAsync(string pToken, string name) {
            this.addCityAsync(pToken, name, null);
        }
        
        /// <remarks/>
        public void addCityAsync(string pToken, string name, object userState) {
            if ((this.addCityOperationCompleted == null)) {
                this.addCityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddCityOperationCompleted);
            }
            this.InvokeAsync("addCity", new object[] {
                        pToken,
                        name}, this.addCityOperationCompleted, userState);
        }
        
        private void OnaddCityOperationCompleted(object arg) {
            if ((this.addCityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addCityCompleted(this, new addCityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/changeCity", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int changeCity(string pToken, string idCity, string name) {
            object[] results = this.Invoke("changeCity", new object[] {
                        pToken,
                        idCity,
                        name});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void changeCityAsync(string pToken, string idCity, string name) {
            this.changeCityAsync(pToken, idCity, name, null);
        }
        
        /// <remarks/>
        public void changeCityAsync(string pToken, string idCity, string name, object userState) {
            if ((this.changeCityOperationCompleted == null)) {
                this.changeCityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnchangeCityOperationCompleted);
            }
            this.InvokeAsync("changeCity", new object[] {
                        pToken,
                        idCity,
                        name}, this.changeCityOperationCompleted, userState);
        }
        
        private void OnchangeCityOperationCompleted(object arg) {
            if ((this.changeCityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.changeCityCompleted(this, new changeCityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/delCity", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int delCity(string pToken, string idCity) {
            object[] results = this.Invoke("delCity", new object[] {
                        pToken,
                        idCity});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void delCityAsync(string pToken, string idCity) {
            this.delCityAsync(pToken, idCity, null);
        }
        
        /// <remarks/>
        public void delCityAsync(string pToken, string idCity, object userState) {
            if ((this.delCityOperationCompleted == null)) {
                this.delCityOperationCompleted = new System.Threading.SendOrPostCallback(this.OndelCityOperationCompleted);
            }
            this.InvokeAsync("delCity", new object[] {
                        pToken,
                        idCity}, this.delCityOperationCompleted, userState);
        }
        
        private void OndelCityOperationCompleted(object arg) {
            if ((this.delCityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.delCityCompleted(this, new delCityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getAllCountries", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getAllCountries(string pToken) {
            object[] results = this.Invoke("getAllCountries", new object[] {
                        pToken});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getAllCountriesAsync(string pToken) {
            this.getAllCountriesAsync(pToken, null);
        }
        
        /// <remarks/>
        public void getAllCountriesAsync(string pToken, object userState) {
            if ((this.getAllCountriesOperationCompleted == null)) {
                this.getAllCountriesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllCountriesOperationCompleted);
            }
            this.InvokeAsync("getAllCountries", new object[] {
                        pToken}, this.getAllCountriesOperationCompleted, userState);
        }
        
        private void OngetAllCountriesOperationCompleted(object arg) {
            if ((this.getAllCountriesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllCountriesCompleted(this, new getAllCountriesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getCountryByName", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getCountryByName(string pToken, string countryName) {
            object[] results = this.Invoke("getCountryByName", new object[] {
                        pToken,
                        countryName});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getCountryByNameAsync(string pToken, string countryName) {
            this.getCountryByNameAsync(pToken, countryName, null);
        }
        
        /// <remarks/>
        public void getCountryByNameAsync(string pToken, string countryName, object userState) {
            if ((this.getCountryByNameOperationCompleted == null)) {
                this.getCountryByNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetCountryByNameOperationCompleted);
            }
            this.InvokeAsync("getCountryByName", new object[] {
                        pToken,
                        countryName}, this.getCountryByNameOperationCompleted, userState);
        }
        
        private void OngetCountryByNameOperationCompleted(object arg) {
            if ((this.getCountryByNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getCountryByNameCompleted(this, new getCountryByNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/addCountry", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int addCountry(string pToken, string name) {
            object[] results = this.Invoke("addCountry", new object[] {
                        pToken,
                        name});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void addCountryAsync(string pToken, string name) {
            this.addCountryAsync(pToken, name, null);
        }
        
        /// <remarks/>
        public void addCountryAsync(string pToken, string name, object userState) {
            if ((this.addCountryOperationCompleted == null)) {
                this.addCountryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddCountryOperationCompleted);
            }
            this.InvokeAsync("addCountry", new object[] {
                        pToken,
                        name}, this.addCountryOperationCompleted, userState);
        }
        
        private void OnaddCountryOperationCompleted(object arg) {
            if ((this.addCountryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addCountryCompleted(this, new addCountryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/changeCountry", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int changeCountry(string pToken, string idCountry, string name) {
            object[] results = this.Invoke("changeCountry", new object[] {
                        pToken,
                        idCountry,
                        name});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void changeCountryAsync(string pToken, string idCountry, string name) {
            this.changeCountryAsync(pToken, idCountry, name, null);
        }
        
        /// <remarks/>
        public void changeCountryAsync(string pToken, string idCountry, string name, object userState) {
            if ((this.changeCountryOperationCompleted == null)) {
                this.changeCountryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnchangeCountryOperationCompleted);
            }
            this.InvokeAsync("changeCountry", new object[] {
                        pToken,
                        idCountry,
                        name}, this.changeCountryOperationCompleted, userState);
        }
        
        private void OnchangeCountryOperationCompleted(object arg) {
            if ((this.changeCountryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.changeCountryCompleted(this, new changeCountryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/delCountry", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int delCountry(string pToken, string idCountry) {
            object[] results = this.Invoke("delCountry", new object[] {
                        pToken,
                        idCountry});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void delCountryAsync(string pToken, string idCountry) {
            this.delCountryAsync(pToken, idCountry, null);
        }
        
        /// <remarks/>
        public void delCountryAsync(string pToken, string idCountry, object userState) {
            if ((this.delCountryOperationCompleted == null)) {
                this.delCountryOperationCompleted = new System.Threading.SendOrPostCallback(this.OndelCountryOperationCompleted);
            }
            this.InvokeAsync("delCountry", new object[] {
                        pToken,
                        idCountry}, this.delCountryOperationCompleted, userState);
        }
        
        private void OndelCountryOperationCompleted(object arg) {
            if ((this.delCountryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.delCountryCompleted(this, new delCountryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getAllDepartments", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getAllDepartments(string pToken, string idUser) {
            object[] results = this.Invoke("getAllDepartments", new object[] {
                        pToken,
                        idUser});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getAllDepartmentsAsync(string pToken, string idUser) {
            this.getAllDepartmentsAsync(pToken, idUser, null);
        }
        
        /// <remarks/>
        public void getAllDepartmentsAsync(string pToken, string idUser, object userState) {
            if ((this.getAllDepartmentsOperationCompleted == null)) {
                this.getAllDepartmentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllDepartmentsOperationCompleted);
            }
            this.InvokeAsync("getAllDepartments", new object[] {
                        pToken,
                        idUser}, this.getAllDepartmentsOperationCompleted, userState);
        }
        
        private void OngetAllDepartmentsOperationCompleted(object arg) {
            if ((this.getAllDepartmentsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllDepartmentsCompleted(this, new getAllDepartmentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/changeDepartment", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int changeDepartment(string pToken, string idDepartment, string idFather, string name, string description, string code, string css) {
            object[] results = this.Invoke("changeDepartment", new object[] {
                        pToken,
                        idDepartment,
                        idFather,
                        name,
                        description,
                        code,
                        css});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void changeDepartmentAsync(string pToken, string idDepartment, string idFather, string name, string description, string code, string css) {
            this.changeDepartmentAsync(pToken, idDepartment, idFather, name, description, code, css, null);
        }
        
        /// <remarks/>
        public void changeDepartmentAsync(string pToken, string idDepartment, string idFather, string name, string description, string code, string css, object userState) {
            if ((this.changeDepartmentOperationCompleted == null)) {
                this.changeDepartmentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnchangeDepartmentOperationCompleted);
            }
            this.InvokeAsync("changeDepartment", new object[] {
                        pToken,
                        idDepartment,
                        idFather,
                        name,
                        description,
                        code,
                        css}, this.changeDepartmentOperationCompleted, userState);
        }
        
        private void OnchangeDepartmentOperationCompleted(object arg) {
            if ((this.changeDepartmentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.changeDepartmentCompleted(this, new changeDepartmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/changeDepartmentName", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int changeDepartmentName(string pToken, string idDepartment, string name) {
            object[] results = this.Invoke("changeDepartmentName", new object[] {
                        pToken,
                        idDepartment,
                        name});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void changeDepartmentNameAsync(string pToken, string idDepartment, string name) {
            this.changeDepartmentNameAsync(pToken, idDepartment, name, null);
        }
        
        /// <remarks/>
        public void changeDepartmentNameAsync(string pToken, string idDepartment, string name, object userState) {
            if ((this.changeDepartmentNameOperationCompleted == null)) {
                this.changeDepartmentNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnchangeDepartmentNameOperationCompleted);
            }
            this.InvokeAsync("changeDepartmentName", new object[] {
                        pToken,
                        idDepartment,
                        name}, this.changeDepartmentNameOperationCompleted, userState);
        }
        
        private void OnchangeDepartmentNameOperationCompleted(object arg) {
            if ((this.changeDepartmentNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.changeDepartmentNameCompleted(this, new changeDepartmentNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/delDepartment", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int delDepartment(string pToken, string idDepartment) {
            object[] results = this.Invoke("delDepartment", new object[] {
                        pToken,
                        idDepartment});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void delDepartmentAsync(string pToken, string idDepartment) {
            this.delDepartmentAsync(pToken, idDepartment, null);
        }
        
        /// <remarks/>
        public void delDepartmentAsync(string pToken, string idDepartment, object userState) {
            if ((this.delDepartmentOperationCompleted == null)) {
                this.delDepartmentOperationCompleted = new System.Threading.SendOrPostCallback(this.OndelDepartmentOperationCompleted);
            }
            this.InvokeAsync("delDepartment", new object[] {
                        pToken,
                        idDepartment}, this.delDepartmentOperationCompleted, userState);
        }
        
        private void OndelDepartmentOperationCompleted(object arg) {
            if ((this.delDepartmentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.delDepartmentCompleted(this, new delDepartmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getAllDevicesType", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getAllDevicesType(string pToken) {
            object[] results = this.Invoke("getAllDevicesType", new object[] {
                        pToken});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getAllDevicesTypeAsync(string pToken) {
            this.getAllDevicesTypeAsync(pToken, null);
        }
        
        /// <remarks/>
        public void getAllDevicesTypeAsync(string pToken, object userState) {
            if ((this.getAllDevicesTypeOperationCompleted == null)) {
                this.getAllDevicesTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllDevicesTypeOperationCompleted);
            }
            this.InvokeAsync("getAllDevicesType", new object[] {
                        pToken}, this.getAllDevicesTypeOperationCompleted, userState);
        }
        
        private void OngetAllDevicesTypeOperationCompleted(object arg) {
            if ((this.getAllDevicesTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllDevicesTypeCompleted(this, new getAllDevicesTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getAllExceptionType", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getAllExceptionType(string pToken) {
            object[] results = this.Invoke("getAllExceptionType", new object[] {
                        pToken});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getAllExceptionTypeAsync(string pToken) {
            this.getAllExceptionTypeAsync(pToken, null);
        }
        
        /// <remarks/>
        public void getAllExceptionTypeAsync(string pToken, object userState) {
            if ((this.getAllExceptionTypeOperationCompleted == null)) {
                this.getAllExceptionTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllExceptionTypeOperationCompleted);
            }
            this.InvokeAsync("getAllExceptionType", new object[] {
                        pToken}, this.getAllExceptionTypeOperationCompleted, userState);
        }
        
        private void OngetAllExceptionTypeOperationCompleted(object arg) {
            if ((this.getAllExceptionTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllExceptionTypeCompleted(this, new getAllExceptionTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getAllFunctions", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getAllFunctions(string pToken, bool portal) {
            object[] results = this.Invoke("getAllFunctions", new object[] {
                        pToken,
                        portal});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getAllFunctionsAsync(string pToken, bool portal) {
            this.getAllFunctionsAsync(pToken, portal, null);
        }
        
        /// <remarks/>
        public void getAllFunctionsAsync(string pToken, bool portal, object userState) {
            if ((this.getAllFunctionsOperationCompleted == null)) {
                this.getAllFunctionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllFunctionsOperationCompleted);
            }
            this.InvokeAsync("getAllFunctions", new object[] {
                        pToken,
                        portal}, this.getAllFunctionsOperationCompleted, userState);
        }
        
        private void OngetAllFunctionsOperationCompleted(object arg) {
            if ((this.getAllFunctionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllFunctionsCompleted(this, new getAllFunctionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/addFunctionsRoles", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int addFunctionsRoles(string pToken, string idFunction, string idRole) {
            object[] results = this.Invoke("addFunctionsRoles", new object[] {
                        pToken,
                        idFunction,
                        idRole});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void addFunctionsRolesAsync(string pToken, string idFunction, string idRole) {
            this.addFunctionsRolesAsync(pToken, idFunction, idRole, null);
        }
        
        /// <remarks/>
        public void addFunctionsRolesAsync(string pToken, string idFunction, string idRole, object userState) {
            if ((this.addFunctionsRolesOperationCompleted == null)) {
                this.addFunctionsRolesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddFunctionsRolesOperationCompleted);
            }
            this.InvokeAsync("addFunctionsRoles", new object[] {
                        pToken,
                        idFunction,
                        idRole}, this.addFunctionsRolesOperationCompleted, userState);
        }
        
        private void OnaddFunctionsRolesOperationCompleted(object arg) {
            if ((this.addFunctionsRolesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addFunctionsRolesCompleted(this, new addFunctionsRolesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/delFunctionsRoles", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int delFunctionsRoles(string pToken, string idFunctionsRoles) {
            object[] results = this.Invoke("delFunctionsRoles", new object[] {
                        pToken,
                        idFunctionsRoles});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void delFunctionsRolesAsync(string pToken, string idFunctionsRoles) {
            this.delFunctionsRolesAsync(pToken, idFunctionsRoles, null);
        }
        
        /// <remarks/>
        public void delFunctionsRolesAsync(string pToken, string idFunctionsRoles, object userState) {
            if ((this.delFunctionsRolesOperationCompleted == null)) {
                this.delFunctionsRolesOperationCompleted = new System.Threading.SendOrPostCallback(this.OndelFunctionsRolesOperationCompleted);
            }
            this.InvokeAsync("delFunctionsRoles", new object[] {
                        pToken,
                        idFunctionsRoles}, this.delFunctionsRolesOperationCompleted, userState);
        }
        
        private void OndelFunctionsRolesOperationCompleted(object arg) {
            if ((this.delFunctionsRolesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.delFunctionsRolesCompleted(this, new delFunctionsRolesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getRoleFunctions", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getRoleFunctions(string pToken, string idRole) {
            object[] results = this.Invoke("getRoleFunctions", new object[] {
                        pToken,
                        idRole});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getRoleFunctionsAsync(string pToken, string idRole) {
            this.getRoleFunctionsAsync(pToken, idRole, null);
        }
        
        /// <remarks/>
        public void getRoleFunctionsAsync(string pToken, string idRole, object userState) {
            if ((this.getRoleFunctionsOperationCompleted == null)) {
                this.getRoleFunctionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetRoleFunctionsOperationCompleted);
            }
            this.InvokeAsync("getRoleFunctions", new object[] {
                        pToken,
                        idRole}, this.getRoleFunctionsOperationCompleted, userState);
        }
        
        private void OngetRoleFunctionsOperationCompleted(object arg) {
            if ((this.getRoleFunctionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getRoleFunctionsCompleted(this, new getRoleFunctionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getAllHolidays", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getAllHolidays(string pToken) {
            object[] results = this.Invoke("getAllHolidays", new object[] {
                        pToken});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getAllHolidaysAsync(string pToken) {
            this.getAllHolidaysAsync(pToken, null);
        }
        
        /// <remarks/>
        public void getAllHolidaysAsync(string pToken, object userState) {
            if ((this.getAllHolidaysOperationCompleted == null)) {
                this.getAllHolidaysOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllHolidaysOperationCompleted);
            }
            this.InvokeAsync("getAllHolidays", new object[] {
                        pToken}, this.getAllHolidaysOperationCompleted, userState);
        }
        
        private void OngetAllHolidaysOperationCompleted(object arg) {
            if ((this.getAllHolidaysCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllHolidaysCompleted(this, new getAllHolidaysCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getHolidaysByID", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getHolidaysByID(string pToken, string idHoliday) {
            object[] results = this.Invoke("getHolidaysByID", new object[] {
                        pToken,
                        idHoliday});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getHolidaysByIDAsync(string pToken, string idHoliday) {
            this.getHolidaysByIDAsync(pToken, idHoliday, null);
        }
        
        /// <remarks/>
        public void getHolidaysByIDAsync(string pToken, string idHoliday, object userState) {
            if ((this.getHolidaysByIDOperationCompleted == null)) {
                this.getHolidaysByIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetHolidaysByIDOperationCompleted);
            }
            this.InvokeAsync("getHolidaysByID", new object[] {
                        pToken,
                        idHoliday}, this.getHolidaysByIDOperationCompleted, userState);
        }
        
        private void OngetHolidaysByIDOperationCompleted(object arg) {
            if ((this.getHolidaysByIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getHolidaysByIDCompleted(this, new getHolidaysByIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/addHolidays", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int addHolidays(string pToken, int day, int month, int year, bool fixe, string name, string description, string holidayCity) {
            object[] results = this.Invoke("addHolidays", new object[] {
                        pToken,
                        day,
                        month,
                        year,
                        fixe,
                        name,
                        description,
                        holidayCity});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void addHolidaysAsync(string pToken, int day, int month, int year, bool fixe, string name, string description, string holidayCity) {
            this.addHolidaysAsync(pToken, day, month, year, fixe, name, description, holidayCity, null);
        }
        
        /// <remarks/>
        public void addHolidaysAsync(string pToken, int day, int month, int year, bool fixe, string name, string description, string holidayCity, object userState) {
            if ((this.addHolidaysOperationCompleted == null)) {
                this.addHolidaysOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddHolidaysOperationCompleted);
            }
            this.InvokeAsync("addHolidays", new object[] {
                        pToken,
                        day,
                        month,
                        year,
                        fixe,
                        name,
                        description,
                        holidayCity}, this.addHolidaysOperationCompleted, userState);
        }
        
        private void OnaddHolidaysOperationCompleted(object arg) {
            if ((this.addHolidaysCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addHolidaysCompleted(this, new addHolidaysCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/changeHolidays", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int changeHolidays(string pToken, string idHolidays, int day, int month, int year, bool fixe, string name, string description, string holidayCity) {
            object[] results = this.Invoke("changeHolidays", new object[] {
                        pToken,
                        idHolidays,
                        day,
                        month,
                        year,
                        fixe,
                        name,
                        description,
                        holidayCity});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void changeHolidaysAsync(string pToken, string idHolidays, int day, int month, int year, bool fixe, string name, string description, string holidayCity) {
            this.changeHolidaysAsync(pToken, idHolidays, day, month, year, fixe, name, description, holidayCity, null);
        }
        
        /// <remarks/>
        public void changeHolidaysAsync(string pToken, string idHolidays, int day, int month, int year, bool fixe, string name, string description, string holidayCity, object userState) {
            if ((this.changeHolidaysOperationCompleted == null)) {
                this.changeHolidaysOperationCompleted = new System.Threading.SendOrPostCallback(this.OnchangeHolidaysOperationCompleted);
            }
            this.InvokeAsync("changeHolidays", new object[] {
                        pToken,
                        idHolidays,
                        day,
                        month,
                        year,
                        fixe,
                        name,
                        description,
                        holidayCity}, this.changeHolidaysOperationCompleted, userState);
        }
        
        private void OnchangeHolidaysOperationCompleted(object arg) {
            if ((this.changeHolidaysCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.changeHolidaysCompleted(this, new changeHolidaysCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getHolidayFromDate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getHolidayFromDate(string pToken, System.DateTime date) {
            object[] results = this.Invoke("getHolidayFromDate", new object[] {
                        pToken,
                        date});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getHolidayFromDateAsync(string pToken, System.DateTime date) {
            this.getHolidayFromDateAsync(pToken, date, null);
        }
        
        /// <remarks/>
        public void getHolidayFromDateAsync(string pToken, System.DateTime date, object userState) {
            if ((this.getHolidayFromDateOperationCompleted == null)) {
                this.getHolidayFromDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetHolidayFromDateOperationCompleted);
            }
            this.InvokeAsync("getHolidayFromDate", new object[] {
                        pToken,
                        date}, this.getHolidayFromDateOperationCompleted, userState);
        }
        
        private void OngetHolidayFromDateOperationCompleted(object arg) {
            if ((this.getHolidayFromDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getHolidayFromDateCompleted(this, new getHolidayFromDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/delHolidays", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int delHolidays(string pToken, string idHolidays) {
            object[] results = this.Invoke("delHolidays", new object[] {
                        pToken,
                        idHolidays});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void delHolidaysAsync(string pToken, string idHolidays) {
            this.delHolidaysAsync(pToken, idHolidays, null);
        }
        
        /// <remarks/>
        public void delHolidaysAsync(string pToken, string idHolidays, object userState) {
            if ((this.delHolidaysOperationCompleted == null)) {
                this.delHolidaysOperationCompleted = new System.Threading.SendOrPostCallback(this.OndelHolidaysOperationCompleted);
            }
            this.InvokeAsync("delHolidays", new object[] {
                        pToken,
                        idHolidays}, this.delHolidaysOperationCompleted, userState);
        }
        
        private void OndelHolidaysOperationCompleted(object arg) {
            if ((this.delHolidaysCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.delHolidaysCompleted(this, new delHolidaysCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getAllMovimentsType", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getAllMovimentsType(string pToken) {
            object[] results = this.Invoke("getAllMovimentsType", new object[] {
                        pToken});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getAllMovimentsTypeAsync(string pToken) {
            this.getAllMovimentsTypeAsync(pToken, null);
        }
        
        /// <remarks/>
        public void getAllMovimentsTypeAsync(string pToken, object userState) {
            if ((this.getAllMovimentsTypeOperationCompleted == null)) {
                this.getAllMovimentsTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllMovimentsTypeOperationCompleted);
            }
            this.InvokeAsync("getAllMovimentsType", new object[] {
                        pToken}, this.getAllMovimentsTypeOperationCompleted, userState);
        }
        
        private void OngetAllMovimentsTypeOperationCompleted(object arg) {
            if ((this.getAllMovimentsTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllMovimentsTypeCompleted(this, new getAllMovimentsTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getAllNationalities", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getAllNationalities(string pToken) {
            object[] results = this.Invoke("getAllNationalities", new object[] {
                        pToken});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getAllNationalitiesAsync(string pToken) {
            this.getAllNationalitiesAsync(pToken, null);
        }
        
        /// <remarks/>
        public void getAllNationalitiesAsync(string pToken, object userState) {
            if ((this.getAllNationalitiesOperationCompleted == null)) {
                this.getAllNationalitiesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllNationalitiesOperationCompleted);
            }
            this.InvokeAsync("getAllNationalities", new object[] {
                        pToken}, this.getAllNationalitiesOperationCompleted, userState);
        }
        
        private void OngetAllNationalitiesOperationCompleted(object arg) {
            if ((this.getAllNationalitiesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllNationalitiesCompleted(this, new getAllNationalitiesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getNationalitiesByName", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getNationalitiesByName(string pToken, string name) {
            object[] results = this.Invoke("getNationalitiesByName", new object[] {
                        pToken,
                        name});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getNationalitiesByNameAsync(string pToken, string name) {
            this.getNationalitiesByNameAsync(pToken, name, null);
        }
        
        /// <remarks/>
        public void getNationalitiesByNameAsync(string pToken, string name, object userState) {
            if ((this.getNationalitiesByNameOperationCompleted == null)) {
                this.getNationalitiesByNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetNationalitiesByNameOperationCompleted);
            }
            this.InvokeAsync("getNationalitiesByName", new object[] {
                        pToken,
                        name}, this.getNationalitiesByNameOperationCompleted, userState);
        }
        
        private void OngetNationalitiesByNameOperationCompleted(object arg) {
            if ((this.getNationalitiesByNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getNationalitiesByNameCompleted(this, new getNationalitiesByNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/addNationality", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int addNationality(string pToken, string name) {
            object[] results = this.Invoke("addNationality", new object[] {
                        pToken,
                        name});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void addNationalityAsync(string pToken, string name) {
            this.addNationalityAsync(pToken, name, null);
        }
        
        /// <remarks/>
        public void addNationalityAsync(string pToken, string name, object userState) {
            if ((this.addNationalityOperationCompleted == null)) {
                this.addNationalityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddNationalityOperationCompleted);
            }
            this.InvokeAsync("addNationality", new object[] {
                        pToken,
                        name}, this.addNationalityOperationCompleted, userState);
        }
        
        private void OnaddNationalityOperationCompleted(object arg) {
            if ((this.addNationalityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addNationalityCompleted(this, new addNationalityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/changeNationality", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int changeNationality(string pToken, string idNationality, string name) {
            object[] results = this.Invoke("changeNationality", new object[] {
                        pToken,
                        idNationality,
                        name});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void changeNationalityAsync(string pToken, string idNationality, string name) {
            this.changeNationalityAsync(pToken, idNationality, name, null);
        }
        
        /// <remarks/>
        public void changeNationalityAsync(string pToken, string idNationality, string name, object userState) {
            if ((this.changeNationalityOperationCompleted == null)) {
                this.changeNationalityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnchangeNationalityOperationCompleted);
            }
            this.InvokeAsync("changeNationality", new object[] {
                        pToken,
                        idNationality,
                        name}, this.changeNationalityOperationCompleted, userState);
        }
        
        private void OnchangeNationalityOperationCompleted(object arg) {
            if ((this.changeNationalityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.changeNationalityCompleted(this, new changeNationalityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/delNationality", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int delNationality(string pToken, string idNationality) {
            object[] results = this.Invoke("delNationality", new object[] {
                        pToken,
                        idNationality});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void delNationalityAsync(string pToken, string idNationality) {
            this.delNationalityAsync(pToken, idNationality, null);
        }
        
        /// <remarks/>
        public void delNationalityAsync(string pToken, string idNationality, object userState) {
            if ((this.delNationalityOperationCompleted == null)) {
                this.delNationalityOperationCompleted = new System.Threading.SendOrPostCallback(this.OndelNationalityOperationCompleted);
            }
            this.InvokeAsync("delNationality", new object[] {
                        pToken,
                        idNationality}, this.delNationalityOperationCompleted, userState);
        }
        
        private void OndelNationalityOperationCompleted(object arg) {
            if ((this.delNationalityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.delNationalityCompleted(this, new delNationalityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/changeParameters", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int changeParameters(string pToken, string idParameters, string value) {
            object[] results = this.Invoke("changeParameters", new object[] {
                        pToken,
                        idParameters,
                        value});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void changeParametersAsync(string pToken, string idParameters, string value) {
            this.changeParametersAsync(pToken, idParameters, value, null);
        }
        
        /// <remarks/>
        public void changeParametersAsync(string pToken, string idParameters, string value, object userState) {
            if ((this.changeParametersOperationCompleted == null)) {
                this.changeParametersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnchangeParametersOperationCompleted);
            }
            this.InvokeAsync("changeParameters", new object[] {
                        pToken,
                        idParameters,
                        value}, this.changeParametersOperationCompleted, userState);
        }
        
        private void OnchangeParametersOperationCompleted(object arg) {
            if ((this.changeParametersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.changeParametersCompleted(this, new changeParametersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/changeParametersByName", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int changeParametersByName(string pToken, string name, string value) {
            object[] results = this.Invoke("changeParametersByName", new object[] {
                        pToken,
                        name,
                        value});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void changeParametersByNameAsync(string pToken, string name, string value) {
            this.changeParametersByNameAsync(pToken, name, value, null);
        }
        
        /// <remarks/>
        public void changeParametersByNameAsync(string pToken, string name, string value, object userState) {
            if ((this.changeParametersByNameOperationCompleted == null)) {
                this.changeParametersByNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnchangeParametersByNameOperationCompleted);
            }
            this.InvokeAsync("changeParametersByName", new object[] {
                        pToken,
                        name,
                        value}, this.changeParametersByNameOperationCompleted, userState);
        }
        
        private void OnchangeParametersByNameOperationCompleted(object arg) {
            if ((this.changeParametersByNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.changeParametersByNameCompleted(this, new changeParametersByNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/setParametersDefault", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int setParametersDefault(string pToken, string idParameters) {
            object[] results = this.Invoke("setParametersDefault", new object[] {
                        pToken,
                        idParameters});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void setParametersDefaultAsync(string pToken, string idParameters) {
            this.setParametersDefaultAsync(pToken, idParameters, null);
        }
        
        /// <remarks/>
        public void setParametersDefaultAsync(string pToken, string idParameters, object userState) {
            if ((this.setParametersDefaultOperationCompleted == null)) {
                this.setParametersDefaultOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetParametersDefaultOperationCompleted);
            }
            this.InvokeAsync("setParametersDefault", new object[] {
                        pToken,
                        idParameters}, this.setParametersDefaultOperationCompleted, userState);
        }
        
        private void OnsetParametersDefaultOperationCompleted(object arg) {
            if ((this.setParametersDefaultCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setParametersDefaultCompleted(this, new setParametersDefaultCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getAllParameters", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getAllParameters() {
            object[] results = this.Invoke("getAllParameters", new object[0]);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getAllParametersAsync() {
            this.getAllParametersAsync(null);
        }
        
        /// <remarks/>
        public void getAllParametersAsync(object userState) {
            if ((this.getAllParametersOperationCompleted == null)) {
                this.getAllParametersOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllParametersOperationCompleted);
            }
            this.InvokeAsync("getAllParameters", new object[0], this.getAllParametersOperationCompleted, userState);
        }
        
        private void OngetAllParametersOperationCompleted(object arg) {
            if ((this.getAllParametersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllParametersCompleted(this, new getAllParametersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getAllProfiles", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getAllProfiles(string pToken, string filter) {
            object[] results = this.Invoke("getAllProfiles", new object[] {
                        pToken,
                        filter});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getAllProfilesAsync(string pToken, string filter) {
            this.getAllProfilesAsync(pToken, filter, null);
        }
        
        /// <remarks/>
        public void getAllProfilesAsync(string pToken, string filter, object userState) {
            if ((this.getAllProfilesOperationCompleted == null)) {
                this.getAllProfilesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllProfilesOperationCompleted);
            }
            this.InvokeAsync("getAllProfiles", new object[] {
                        pToken,
                        filter}, this.getAllProfilesOperationCompleted, userState);
        }
        
        private void OngetAllProfilesOperationCompleted(object arg) {
            if ((this.getAllProfilesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllProfilesCompleted(this, new getAllProfilesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/addProfile", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string addProfile(string pToken, string name, string desc, string worktype, bool availableToAllDepartments) {
            object[] results = this.Invoke("addProfile", new object[] {
                        pToken,
                        name,
                        desc,
                        worktype,
                        availableToAllDepartments});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void addProfileAsync(string pToken, string name, string desc, string worktype, bool availableToAllDepartments) {
            this.addProfileAsync(pToken, name, desc, worktype, availableToAllDepartments, null);
        }
        
        /// <remarks/>
        public void addProfileAsync(string pToken, string name, string desc, string worktype, bool availableToAllDepartments, object userState) {
            if ((this.addProfileOperationCompleted == null)) {
                this.addProfileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddProfileOperationCompleted);
            }
            this.InvokeAsync("addProfile", new object[] {
                        pToken,
                        name,
                        desc,
                        worktype,
                        availableToAllDepartments}, this.addProfileOperationCompleted, userState);
        }
        
        private void OnaddProfileOperationCompleted(object arg) {
            if ((this.addProfileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addProfileCompleted(this, new addProfileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/changeProfile", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int changeProfile(string pToken, string idProfile, string name, string desc, string workType, bool availableToAllDepartments) {
            object[] results = this.Invoke("changeProfile", new object[] {
                        pToken,
                        idProfile,
                        name,
                        desc,
                        workType,
                        availableToAllDepartments});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void changeProfileAsync(string pToken, string idProfile, string name, string desc, string workType, bool availableToAllDepartments) {
            this.changeProfileAsync(pToken, idProfile, name, desc, workType, availableToAllDepartments, null);
        }
        
        /// <remarks/>
        public void changeProfileAsync(string pToken, string idProfile, string name, string desc, string workType, bool availableToAllDepartments, object userState) {
            if ((this.changeProfileOperationCompleted == null)) {
                this.changeProfileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnchangeProfileOperationCompleted);
            }
            this.InvokeAsync("changeProfile", new object[] {
                        pToken,
                        idProfile,
                        name,
                        desc,
                        workType,
                        availableToAllDepartments}, this.changeProfileOperationCompleted, userState);
        }
        
        private void OnchangeProfileOperationCompleted(object arg) {
            if ((this.changeProfileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.changeProfileCompleted(this, new changeProfileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/delProfile", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int delProfile(string pToken, string idProfile) {
            object[] results = this.Invoke("delProfile", new object[] {
                        pToken,
                        idProfile});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void delProfileAsync(string pToken, string idProfile) {
            this.delProfileAsync(pToken, idProfile, null);
        }
        
        /// <remarks/>
        public void delProfileAsync(string pToken, string idProfile, object userState) {
            if ((this.delProfileOperationCompleted == null)) {
                this.delProfileOperationCompleted = new System.Threading.SendOrPostCallback(this.OndelProfileOperationCompleted);
            }
            this.InvokeAsync("delProfile", new object[] {
                        pToken,
                        idProfile}, this.delProfileOperationCompleted, userState);
        }
        
        private void OndelProfileOperationCompleted(object arg) {
            if ((this.delProfileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.delProfileCompleted(this, new delProfileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getProfileWorktype", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getProfileWorktype(string pToken, string idProfile) {
            object[] results = this.Invoke("getProfileWorktype", new object[] {
                        pToken,
                        idProfile});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getProfileWorktypeAsync(string pToken, string idProfile) {
            this.getProfileWorktypeAsync(pToken, idProfile, null);
        }
        
        /// <remarks/>
        public void getProfileWorktypeAsync(string pToken, string idProfile, object userState) {
            if ((this.getProfileWorktypeOperationCompleted == null)) {
                this.getProfileWorktypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetProfileWorktypeOperationCompleted);
            }
            this.InvokeAsync("getProfileWorktype", new object[] {
                        pToken,
                        idProfile}, this.getProfileWorktypeOperationCompleted, userState);
        }
        
        private void OngetProfileWorktypeOperationCompleted(object arg) {
            if ((this.getProfileWorktypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getProfileWorktypeCompleted(this, new getProfileWorktypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getAllReasons", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getAllReasons(string pToken) {
            object[] results = this.Invoke("getAllReasons", new object[] {
                        pToken});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getAllReasonsAsync(string pToken) {
            this.getAllReasonsAsync(pToken, null);
        }
        
        /// <remarks/>
        public void getAllReasonsAsync(string pToken, object userState) {
            if ((this.getAllReasonsOperationCompleted == null)) {
                this.getAllReasonsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllReasonsOperationCompleted);
            }
            this.InvokeAsync("getAllReasons", new object[] {
                        pToken}, this.getAllReasonsOperationCompleted, userState);
        }
        
        private void OngetAllReasonsOperationCompleted(object arg) {
            if ((this.getAllReasonsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllReasonsCompleted(this, new getAllReasonsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/addReasons", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string addReasons(
                    string pToken, 
                    string name, 
                    string description, 
                    string code, 
                    string backColor, 
                    string textColor, 
                    int minDuration, 
                    int maxDuration, 
                    bool workDays, 
                    bool calendarDays, 
                    bool needContingent, 
                    bool countAbsenteeism, 
                    bool discountFromExpectedHours, 
                    bool adjustFixedPeriod, 
                    bool separateFixedPeriod, 
                    bool discountFromPackageHours, 
                    bool addToEffectiveHours, 
                    bool discountFromVacations, 
                    bool countAsPresence, 
                    bool countToMealAllowance, 
                    bool discountFromSalary, 
                    bool justifiedAbsences, 
                    bool discountMealAllowance) {
            object[] results = this.Invoke("addReasons", new object[] {
                        pToken,
                        name,
                        description,
                        code,
                        backColor,
                        textColor,
                        minDuration,
                        maxDuration,
                        workDays,
                        calendarDays,
                        needContingent,
                        countAbsenteeism,
                        discountFromExpectedHours,
                        adjustFixedPeriod,
                        separateFixedPeriod,
                        discountFromPackageHours,
                        addToEffectiveHours,
                        discountFromVacations,
                        countAsPresence,
                        countToMealAllowance,
                        discountFromSalary,
                        justifiedAbsences,
                        discountMealAllowance});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void addReasonsAsync(
                    string pToken, 
                    string name, 
                    string description, 
                    string code, 
                    string backColor, 
                    string textColor, 
                    int minDuration, 
                    int maxDuration, 
                    bool workDays, 
                    bool calendarDays, 
                    bool needContingent, 
                    bool countAbsenteeism, 
                    bool discountFromExpectedHours, 
                    bool adjustFixedPeriod, 
                    bool separateFixedPeriod, 
                    bool discountFromPackageHours, 
                    bool addToEffectiveHours, 
                    bool discountFromVacations, 
                    bool countAsPresence, 
                    bool countToMealAllowance, 
                    bool discountFromSalary, 
                    bool justifiedAbsences, 
                    bool discountMealAllowance) {
            this.addReasonsAsync(pToken, name, description, code, backColor, textColor, minDuration, maxDuration, workDays, calendarDays, needContingent, countAbsenteeism, discountFromExpectedHours, adjustFixedPeriod, separateFixedPeriod, discountFromPackageHours, addToEffectiveHours, discountFromVacations, countAsPresence, countToMealAllowance, discountFromSalary, justifiedAbsences, discountMealAllowance, null);
        }
        
        /// <remarks/>
        public void addReasonsAsync(
                    string pToken, 
                    string name, 
                    string description, 
                    string code, 
                    string backColor, 
                    string textColor, 
                    int minDuration, 
                    int maxDuration, 
                    bool workDays, 
                    bool calendarDays, 
                    bool needContingent, 
                    bool countAbsenteeism, 
                    bool discountFromExpectedHours, 
                    bool adjustFixedPeriod, 
                    bool separateFixedPeriod, 
                    bool discountFromPackageHours, 
                    bool addToEffectiveHours, 
                    bool discountFromVacations, 
                    bool countAsPresence, 
                    bool countToMealAllowance, 
                    bool discountFromSalary, 
                    bool justifiedAbsences, 
                    bool discountMealAllowance, 
                    object userState) {
            if ((this.addReasonsOperationCompleted == null)) {
                this.addReasonsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddReasonsOperationCompleted);
            }
            this.InvokeAsync("addReasons", new object[] {
                        pToken,
                        name,
                        description,
                        code,
                        backColor,
                        textColor,
                        minDuration,
                        maxDuration,
                        workDays,
                        calendarDays,
                        needContingent,
                        countAbsenteeism,
                        discountFromExpectedHours,
                        adjustFixedPeriod,
                        separateFixedPeriod,
                        discountFromPackageHours,
                        addToEffectiveHours,
                        discountFromVacations,
                        countAsPresence,
                        countToMealAllowance,
                        discountFromSalary,
                        justifiedAbsences,
                        discountMealAllowance}, this.addReasonsOperationCompleted, userState);
        }
        
        private void OnaddReasonsOperationCompleted(object arg) {
            if ((this.addReasonsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addReasonsCompleted(this, new addReasonsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/changeReasons", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int changeReasons(
                    string pToken, 
                    string idReasons, 
                    string name, 
                    string description, 
                    string code, 
                    string backColor, 
                    string textColor, 
                    int minDuration, 
                    int maxDuration, 
                    bool workDays, 
                    bool calendarDays, 
                    bool needContingent, 
                    bool countAbsenteeism, 
                    bool discountFromExpectedHours, 
                    bool adjustFixedPeriod, 
                    bool separateFixedPeriod, 
                    bool discountFromPackageHours, 
                    bool addToEffectiveHours, 
                    bool discountFromVacations, 
                    bool countAsPresence, 
                    bool countToMealAllowance, 
                    bool discountFromSalary, 
                    bool justifiedAbsences, 
                    bool discountMealAllowance) {
            object[] results = this.Invoke("changeReasons", new object[] {
                        pToken,
                        idReasons,
                        name,
                        description,
                        code,
                        backColor,
                        textColor,
                        minDuration,
                        maxDuration,
                        workDays,
                        calendarDays,
                        needContingent,
                        countAbsenteeism,
                        discountFromExpectedHours,
                        adjustFixedPeriod,
                        separateFixedPeriod,
                        discountFromPackageHours,
                        addToEffectiveHours,
                        discountFromVacations,
                        countAsPresence,
                        countToMealAllowance,
                        discountFromSalary,
                        justifiedAbsences,
                        discountMealAllowance});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void changeReasonsAsync(
                    string pToken, 
                    string idReasons, 
                    string name, 
                    string description, 
                    string code, 
                    string backColor, 
                    string textColor, 
                    int minDuration, 
                    int maxDuration, 
                    bool workDays, 
                    bool calendarDays, 
                    bool needContingent, 
                    bool countAbsenteeism, 
                    bool discountFromExpectedHours, 
                    bool adjustFixedPeriod, 
                    bool separateFixedPeriod, 
                    bool discountFromPackageHours, 
                    bool addToEffectiveHours, 
                    bool discountFromVacations, 
                    bool countAsPresence, 
                    bool countToMealAllowance, 
                    bool discountFromSalary, 
                    bool justifiedAbsences, 
                    bool discountMealAllowance) {
            this.changeReasonsAsync(pToken, idReasons, name, description, code, backColor, textColor, minDuration, maxDuration, workDays, calendarDays, needContingent, countAbsenteeism, discountFromExpectedHours, adjustFixedPeriod, separateFixedPeriod, discountFromPackageHours, addToEffectiveHours, discountFromVacations, countAsPresence, countToMealAllowance, discountFromSalary, justifiedAbsences, discountMealAllowance, null);
        }
        
        /// <remarks/>
        public void changeReasonsAsync(
                    string pToken, 
                    string idReasons, 
                    string name, 
                    string description, 
                    string code, 
                    string backColor, 
                    string textColor, 
                    int minDuration, 
                    int maxDuration, 
                    bool workDays, 
                    bool calendarDays, 
                    bool needContingent, 
                    bool countAbsenteeism, 
                    bool discountFromExpectedHours, 
                    bool adjustFixedPeriod, 
                    bool separateFixedPeriod, 
                    bool discountFromPackageHours, 
                    bool addToEffectiveHours, 
                    bool discountFromVacations, 
                    bool countAsPresence, 
                    bool countToMealAllowance, 
                    bool discountFromSalary, 
                    bool justifiedAbsences, 
                    bool discountMealAllowance, 
                    object userState) {
            if ((this.changeReasonsOperationCompleted == null)) {
                this.changeReasonsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnchangeReasonsOperationCompleted);
            }
            this.InvokeAsync("changeReasons", new object[] {
                        pToken,
                        idReasons,
                        name,
                        description,
                        code,
                        backColor,
                        textColor,
                        minDuration,
                        maxDuration,
                        workDays,
                        calendarDays,
                        needContingent,
                        countAbsenteeism,
                        discountFromExpectedHours,
                        adjustFixedPeriod,
                        separateFixedPeriod,
                        discountFromPackageHours,
                        addToEffectiveHours,
                        discountFromVacations,
                        countAsPresence,
                        countToMealAllowance,
                        discountFromSalary,
                        justifiedAbsences,
                        discountMealAllowance}, this.changeReasonsOperationCompleted, userState);
        }
        
        private void OnchangeReasonsOperationCompleted(object arg) {
            if ((this.changeReasonsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.changeReasonsCompleted(this, new changeReasonsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/delReasons", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int delReasons(string pToken, string idReasons) {
            object[] results = this.Invoke("delReasons", new object[] {
                        pToken,
                        idReasons});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void delReasonsAsync(string pToken, string idReasons) {
            this.delReasonsAsync(pToken, idReasons, null);
        }
        
        /// <remarks/>
        public void delReasonsAsync(string pToken, string idReasons, object userState) {
            if ((this.delReasonsOperationCompleted == null)) {
                this.delReasonsOperationCompleted = new System.Threading.SendOrPostCallback(this.OndelReasonsOperationCompleted);
            }
            this.InvokeAsync("delReasons", new object[] {
                        pToken,
                        idReasons}, this.delReasonsOperationCompleted, userState);
        }
        
        private void OndelReasonsOperationCompleted(object arg) {
            if ((this.delReasonsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.delReasonsCompleted(this, new delReasonsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getAllRoles", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getAllRoles(string pToken) {
            object[] results = this.Invoke("getAllRoles", new object[] {
                        pToken});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getAllRolesAsync(string pToken) {
            this.getAllRolesAsync(pToken, null);
        }
        
        /// <remarks/>
        public void getAllRolesAsync(string pToken, object userState) {
            if ((this.getAllRolesOperationCompleted == null)) {
                this.getAllRolesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllRolesOperationCompleted);
            }
            this.InvokeAsync("getAllRoles", new object[] {
                        pToken}, this.getAllRolesOperationCompleted, userState);
        }
        
        private void OngetAllRolesOperationCompleted(object arg) {
            if ((this.getAllRolesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllRolesCompleted(this, new getAllRolesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/addRoles", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string addRoles(string pToken, string name, string description, bool timeRole, bool accessRole, bool onlyIsData) {
            object[] results = this.Invoke("addRoles", new object[] {
                        pToken,
                        name,
                        description,
                        timeRole,
                        accessRole,
                        onlyIsData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void addRolesAsync(string pToken, string name, string description, bool timeRole, bool accessRole, bool onlyIsData) {
            this.addRolesAsync(pToken, name, description, timeRole, accessRole, onlyIsData, null);
        }
        
        /// <remarks/>
        public void addRolesAsync(string pToken, string name, string description, bool timeRole, bool accessRole, bool onlyIsData, object userState) {
            if ((this.addRolesOperationCompleted == null)) {
                this.addRolesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddRolesOperationCompleted);
            }
            this.InvokeAsync("addRoles", new object[] {
                        pToken,
                        name,
                        description,
                        timeRole,
                        accessRole,
                        onlyIsData}, this.addRolesOperationCompleted, userState);
        }
        
        private void OnaddRolesOperationCompleted(object arg) {
            if ((this.addRolesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addRolesCompleted(this, new addRolesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/changeRoles", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int changeRoles(string pToken, string idRoles, string name, string description, bool timeRole, bool accessRole, bool onlyIsData) {
            object[] results = this.Invoke("changeRoles", new object[] {
                        pToken,
                        idRoles,
                        name,
                        description,
                        timeRole,
                        accessRole,
                        onlyIsData});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void changeRolesAsync(string pToken, string idRoles, string name, string description, bool timeRole, bool accessRole, bool onlyIsData) {
            this.changeRolesAsync(pToken, idRoles, name, description, timeRole, accessRole, onlyIsData, null);
        }
        
        /// <remarks/>
        public void changeRolesAsync(string pToken, string idRoles, string name, string description, bool timeRole, bool accessRole, bool onlyIsData, object userState) {
            if ((this.changeRolesOperationCompleted == null)) {
                this.changeRolesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnchangeRolesOperationCompleted);
            }
            this.InvokeAsync("changeRoles", new object[] {
                        pToken,
                        idRoles,
                        name,
                        description,
                        timeRole,
                        accessRole,
                        onlyIsData}, this.changeRolesOperationCompleted, userState);
        }
        
        private void OnchangeRolesOperationCompleted(object arg) {
            if ((this.changeRolesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.changeRolesCompleted(this, new changeRolesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/delRoles", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int delRoles(string pToken, string idRoles) {
            object[] results = this.Invoke("delRoles", new object[] {
                        pToken,
                        idRoles});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void delRolesAsync(string pToken, string idRoles) {
            this.delRolesAsync(pToken, idRoles, null);
        }
        
        /// <remarks/>
        public void delRolesAsync(string pToken, string idRoles, object userState) {
            if ((this.delRolesOperationCompleted == null)) {
                this.delRolesOperationCompleted = new System.Threading.SendOrPostCallback(this.OndelRolesOperationCompleted);
            }
            this.InvokeAsync("delRoles", new object[] {
                        pToken,
                        idRoles}, this.delRolesOperationCompleted, userState);
        }
        
        private void OndelRolesOperationCompleted(object arg) {
            if ((this.delRolesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.delRolesCompleted(this, new delRolesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getStatisticsFromDate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getStatisticsFromDate(string pToken, System.DateTime date) {
            object[] results = this.Invoke("getStatisticsFromDate", new object[] {
                        pToken,
                        date});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getStatisticsFromDateAsync(string pToken, System.DateTime date) {
            this.getStatisticsFromDateAsync(pToken, date, null);
        }
        
        /// <remarks/>
        public void getStatisticsFromDateAsync(string pToken, System.DateTime date, object userState) {
            if ((this.getStatisticsFromDateOperationCompleted == null)) {
                this.getStatisticsFromDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetStatisticsFromDateOperationCompleted);
            }
            this.InvokeAsync("getStatisticsFromDate", new object[] {
                        pToken,
                        date}, this.getStatisticsFromDateOperationCompleted, userState);
        }
        
        private void OngetStatisticsFromDateOperationCompleted(object arg) {
            if ((this.getStatisticsFromDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getStatisticsFromDateCompleted(this, new getStatisticsFromDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/addStatistic", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int addStatistic(string pToken, System.DateTime date, string employeesIn, string employeesLate, string employeesLateOut, string employeesOnBreak, string employeesFault, string employeesVacation, string employeesAbsences, string employeesExtraHours, string connectedDevices, string employeesOthers) {
            object[] results = this.Invoke("addStatistic", new object[] {
                        pToken,
                        date,
                        employeesIn,
                        employeesLate,
                        employeesLateOut,
                        employeesOnBreak,
                        employeesFault,
                        employeesVacation,
                        employeesAbsences,
                        employeesExtraHours,
                        connectedDevices,
                        employeesOthers});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void addStatisticAsync(string pToken, System.DateTime date, string employeesIn, string employeesLate, string employeesLateOut, string employeesOnBreak, string employeesFault, string employeesVacation, string employeesAbsences, string employeesExtraHours, string connectedDevices, string employeesOthers) {
            this.addStatisticAsync(pToken, date, employeesIn, employeesLate, employeesLateOut, employeesOnBreak, employeesFault, employeesVacation, employeesAbsences, employeesExtraHours, connectedDevices, employeesOthers, null);
        }
        
        /// <remarks/>
        public void addStatisticAsync(string pToken, System.DateTime date, string employeesIn, string employeesLate, string employeesLateOut, string employeesOnBreak, string employeesFault, string employeesVacation, string employeesAbsences, string employeesExtraHours, string connectedDevices, string employeesOthers, object userState) {
            if ((this.addStatisticOperationCompleted == null)) {
                this.addStatisticOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddStatisticOperationCompleted);
            }
            this.InvokeAsync("addStatistic", new object[] {
                        pToken,
                        date,
                        employeesIn,
                        employeesLate,
                        employeesLateOut,
                        employeesOnBreak,
                        employeesFault,
                        employeesVacation,
                        employeesAbsences,
                        employeesExtraHours,
                        connectedDevices,
                        employeesOthers}, this.addStatisticOperationCompleted, userState);
        }
        
        private void OnaddStatisticOperationCompleted(object arg) {
            if ((this.addStatisticCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addStatisticCompleted(this, new addStatisticCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/changeStatistics", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int changeStatistics(string pToken, string idStatistics, System.DateTime date, string employeesIn, string employeesLate, string employeesLateOut, string employeesOnBreak, string employeesFault, string employeesVacation, string employeesAbsences, string employeesExtraHours, string connectedDevices, string employeesOthers) {
            object[] results = this.Invoke("changeStatistics", new object[] {
                        pToken,
                        idStatistics,
                        date,
                        employeesIn,
                        employeesLate,
                        employeesLateOut,
                        employeesOnBreak,
                        employeesFault,
                        employeesVacation,
                        employeesAbsences,
                        employeesExtraHours,
                        connectedDevices,
                        employeesOthers});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void changeStatisticsAsync(string pToken, string idStatistics, System.DateTime date, string employeesIn, string employeesLate, string employeesLateOut, string employeesOnBreak, string employeesFault, string employeesVacation, string employeesAbsences, string employeesExtraHours, string connectedDevices, string employeesOthers) {
            this.changeStatisticsAsync(pToken, idStatistics, date, employeesIn, employeesLate, employeesLateOut, employeesOnBreak, employeesFault, employeesVacation, employeesAbsences, employeesExtraHours, connectedDevices, employeesOthers, null);
        }
        
        /// <remarks/>
        public void changeStatisticsAsync(string pToken, string idStatistics, System.DateTime date, string employeesIn, string employeesLate, string employeesLateOut, string employeesOnBreak, string employeesFault, string employeesVacation, string employeesAbsences, string employeesExtraHours, string connectedDevices, string employeesOthers, object userState) {
            if ((this.changeStatisticsOperationCompleted == null)) {
                this.changeStatisticsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnchangeStatisticsOperationCompleted);
            }
            this.InvokeAsync("changeStatistics", new object[] {
                        pToken,
                        idStatistics,
                        date,
                        employeesIn,
                        employeesLate,
                        employeesLateOut,
                        employeesOnBreak,
                        employeesFault,
                        employeesVacation,
                        employeesAbsences,
                        employeesExtraHours,
                        connectedDevices,
                        employeesOthers}, this.changeStatisticsOperationCompleted, userState);
        }
        
        private void OnchangeStatisticsOperationCompleted(object arg) {
            if ((this.changeStatisticsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.changeStatisticsCompleted(this, new changeStatisticsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getAllTypeExtraHours", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getAllTypeExtraHours(string pToken) {
            object[] results = this.Invoke("getAllTypeExtraHours", new object[] {
                        pToken});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getAllTypeExtraHoursAsync(string pToken) {
            this.getAllTypeExtraHoursAsync(pToken, null);
        }
        
        /// <remarks/>
        public void getAllTypeExtraHoursAsync(string pToken, object userState) {
            if ((this.getAllTypeExtraHoursOperationCompleted == null)) {
                this.getAllTypeExtraHoursOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllTypeExtraHoursOperationCompleted);
            }
            this.InvokeAsync("getAllTypeExtraHours", new object[] {
                        pToken}, this.getAllTypeExtraHoursOperationCompleted, userState);
        }
        
        private void OngetAllTypeExtraHoursOperationCompleted(object arg) {
            if ((this.getAllTypeExtraHoursCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllTypeExtraHoursCompleted(this, new getAllTypeExtraHoursCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/changeTypeExtraHours", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int changeTypeExtraHours(string pToken, string idTypeExtrahours, string code, string factor) {
            object[] results = this.Invoke("changeTypeExtraHours", new object[] {
                        pToken,
                        idTypeExtrahours,
                        code,
                        factor});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void changeTypeExtraHoursAsync(string pToken, string idTypeExtrahours, string code, string factor) {
            this.changeTypeExtraHoursAsync(pToken, idTypeExtrahours, code, factor, null);
        }
        
        /// <remarks/>
        public void changeTypeExtraHoursAsync(string pToken, string idTypeExtrahours, string code, string factor, object userState) {
            if ((this.changeTypeExtraHoursOperationCompleted == null)) {
                this.changeTypeExtraHoursOperationCompleted = new System.Threading.SendOrPostCallback(this.OnchangeTypeExtraHoursOperationCompleted);
            }
            this.InvokeAsync("changeTypeExtraHours", new object[] {
                        pToken,
                        idTypeExtrahours,
                        code,
                        factor}, this.changeTypeExtraHoursOperationCompleted, userState);
        }
        
        private void OnchangeTypeExtraHoursOperationCompleted(object arg) {
            if ((this.changeTypeExtraHoursCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.changeTypeExtraHoursCompleted(this, new changeTypeExtraHoursCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getAllUsers", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getAllUsers(string pToken, string idUsers) {
            object[] results = this.Invoke("getAllUsers", new object[] {
                        pToken,
                        idUsers});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getAllUsersAsync(string pToken, string idUsers) {
            this.getAllUsersAsync(pToken, idUsers, null);
        }
        
        /// <remarks/>
        public void getAllUsersAsync(string pToken, string idUsers, object userState) {
            if ((this.getAllUsersOperationCompleted == null)) {
                this.getAllUsersOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllUsersOperationCompleted);
            }
            this.InvokeAsync("getAllUsers", new object[] {
                        pToken,
                        idUsers}, this.getAllUsersOperationCompleted, userState);
        }
        
        private void OngetAllUsersOperationCompleted(object arg) {
            if ((this.getAllUsersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllUsersCompleted(this, new getAllUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getUserData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getUserData(string pToken, string idUser) {
            object[] results = this.Invoke("getUserData", new object[] {
                        pToken,
                        idUser});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getUserDataAsync(string pToken, string idUser) {
            this.getUserDataAsync(pToken, idUser, null);
        }
        
        /// <remarks/>
        public void getUserDataAsync(string pToken, string idUser, object userState) {
            if ((this.getUserDataOperationCompleted == null)) {
                this.getUserDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetUserDataOperationCompleted);
            }
            this.InvokeAsync("getUserData", new object[] {
                        pToken,
                        idUser}, this.getUserDataOperationCompleted, userState);
        }
        
        private void OngetUserDataOperationCompleted(object arg) {
            if ((this.getUserDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getUserDataCompleted(this, new getUserDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getAllWarningsCompletedEventHandler(object sender, getAllWarningsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllWarningsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAllWarningsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getAllTaskManagementProfileCompletedEventHandler(object sender, getAllTaskManagementProfileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllTaskManagementProfileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAllTaskManagementProfileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void addTaskManagementProfileCompletedEventHandler(object sender, addTaskManagementProfileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addTaskManagementProfileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addTaskManagementProfileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void changeTaskManagementProfileCompletedEventHandler(object sender, changeTaskManagementProfileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class changeTaskManagementProfileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal changeTaskManagementProfileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void deleteTaskManagementProfileCompletedEventHandler(object sender, deleteTaskManagementProfileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class deleteTaskManagementProfileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal deleteTaskManagementProfileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getEmployeesWithFingerPrintCompletedEventHandler(object sender, getEmployeesWithFingerPrintCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getEmployeesWithFingerPrintCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getEmployeesWithFingerPrintCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void addEmployeesFingerPrintBioMiniCompletedEventHandler(object sender, addEmployeesFingerPrintBioMiniCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addEmployeesFingerPrintBioMiniCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addEmployeesFingerPrintBioMiniCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void addEmployeesFingerPrintBioMini2CompletedEventHandler(object sender, addEmployeesFingerPrintBioMini2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addEmployeesFingerPrintBioMini2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addEmployeesFingerPrintBioMini2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getEmployeesFingerPrintBioMiniCompletedEventHandler(object sender, getEmployeesFingerPrintBioMiniCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getEmployeesFingerPrintBioMiniCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getEmployeesFingerPrintBioMiniCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void addEmployeesMovimentBioMiniCompletedEventHandler(object sender, addEmployeesMovimentBioMiniCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addEmployeesMovimentBioMiniCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addEmployeesMovimentBioMiniCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void employeesTransitDataCompletedEventHandler(object sender, employeesTransitDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class employeesTransitDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal employeesTransitDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getEmployeesAbsencesDetailsCompletedEventHandler(object sender, getEmployeesAbsencesDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getEmployeesAbsencesDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getEmployeesAbsencesDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getJustificationFromDatabaseCompletedEventHandler(object sender, getJustificationFromDatabaseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getJustificationFromDatabaseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getJustificationFromDatabaseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void saveJustificationToDatabaseCompletedEventHandler(object sender, saveJustificationToDatabaseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class saveJustificationToDatabaseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal saveJustificationToDatabaseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void updateAbsencesApprovedAdminCompletedEventHandler(object sender, updateAbsencesApprovedAdminCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateAbsencesApprovedAdminCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateAbsencesApprovedAdminCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void updateAbsencesApprovedCompletedEventHandler(object sender, updateAbsencesApprovedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateAbsencesApprovedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateAbsencesApprovedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void deleteEmployeeAbsencesWithJustificationCompletedEventHandler(object sender, deleteEmployeeAbsencesWithJustificationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class deleteEmployeeAbsencesWithJustificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal deleteEmployeeAbsencesWithJustificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getTrackingRequestsByIdGeneralCompletedEventHandler(object sender, getTrackingRequestsByIdGeneralCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getTrackingRequestsByIdGeneralCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getTrackingRequestsByIdGeneralCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void addTrackingRequestsCompletedEventHandler(object sender, addTrackingRequestsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addTrackingRequestsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addTrackingRequestsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void updateTrackingRequestsApprovedCompletedEventHandler(object sender, updateTrackingRequestsApprovedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateTrackingRequestsApprovedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateTrackingRequestsApprovedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void updateTrackingRequestsDeletedCompletedEventHandler(object sender, updateTrackingRequestsDeletedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateTrackingRequestsDeletedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateTrackingRequestsDeletedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getEmployeesAbsencesDetailsWithStatesCompletedEventHandler(object sender, getEmployeesAbsencesDetailsWithStatesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getEmployeesAbsencesDetailsWithStatesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getEmployeesAbsencesDetailsWithStatesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void addOrUpdateEmployeeSimpleCompletedEventHandler(object sender, addOrUpdateEmployeeSimpleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addOrUpdateEmployeeSimpleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addOrUpdateEmployeeSimpleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void addEmployeeVacationsTPFCompletedEventHandler(object sender, addEmployeeVacationsTPFCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addEmployeeVacationsTPFCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addEmployeeVacationsTPFCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void deleteEmployeeVacationsTPFCompletedEventHandler(object sender, deleteEmployeeVacationsTPFCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class deleteEmployeeVacationsTPFCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal deleteEmployeeVacationsTPFCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void sendysGetEmployeeDatePeriodResumeCompletedEventHandler(object sender, sendysGetEmployeeDatePeriodResumeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class sendysGetEmployeeDatePeriodResumeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal sendysGetEmployeeDatePeriodResumeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void sendysGetHoursPackageResumeCompletedEventHandler(object sender, sendysGetHoursPackageResumeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class sendysGetHoursPackageResumeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal sendysGetHoursPackageResumeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void sendysCalcWorkHoursCompletedEventHandler(object sender, sendysCalcWorkHoursCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class sendysCalcWorkHoursCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal sendysCalcWorkHoursCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void sendysAddAbsencesCompletedEventHandler(object sender, sendysAddAbsencesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class sendysAddAbsencesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal sendysAddAbsencesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string idAbsence {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void sendysGetEmployeesMovimentsFromDateCompletedEventHandler(object sender, sendysGetEmployeesMovimentsFromDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class sendysGetEmployeesMovimentsFromDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal sendysGetEmployeesMovimentsFromDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void sendysAddMovimentCompletedEventHandler(object sender, sendysAddMovimentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class sendysAddMovimentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal sendysAddMovimentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void sendysGetMovimentsWithStatesCompletedEventHandler(object sender, sendysGetMovimentsWithStatesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class sendysGetMovimentsWithStatesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal sendysGetMovimentsWithStatesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void sendysUpdateMovimentCompletedEventHandler(object sender, sendysUpdateMovimentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class sendysUpdateMovimentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal sendysUpdateMovimentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void sendysGetHoursPackageTotalCompletedEventHandler(object sender, sendysGetHoursPackageTotalCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class sendysGetHoursPackageTotalCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal sendysGetHoursPackageTotalCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void addInTicketCompletedEventHandler(object sender, addInTicketCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addInTicketCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addInTicketCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getCardInformationCompletedEventHandler(object sender, getCardInformationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getCardInformationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getCardInformationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void addInCardCompletedEventHandler(object sender, addInCardCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addInCardCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addInCardCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getTicketInformationCompletedEventHandler(object sender, getTicketInformationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getTicketInformationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getTicketInformationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void payTicketCompletedEventHandler(object sender, payTicketCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class payTicketCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal payTicketCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void payCardCompletedEventHandler(object sender, payCardCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class payCardCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal payCardCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void isTicketValidCompletedEventHandler(object sender, isTicketValidCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class isTicketValidCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal isTicketValidCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void ticketExitCompletedEventHandler(object sender, ticketExitCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ticketExitCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ticketExitCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void isCardValidCompletedEventHandler(object sender, isCardValidCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class isCardValidCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal isCardValidCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getDateTimeCompletedEventHandler(object sender, getDateTimeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDateTimeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDateTimeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void addTaskMoveCompletedEventHandler(object sender, addTaskMoveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addTaskMoveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addTaskMoveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void addUpdateAccessZonesCompletedEventHandler(object sender, addUpdateAccessZonesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addUpdateAccessZonesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addUpdateAccessZonesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void activateCardInAccessZoneCompletedEventHandler(object sender, activateCardInAccessZoneCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class activateCardInAccessZoneCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal activateCardInAccessZoneCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void disableCardInAccessZoneCompletedEventHandler(object sender, disableCardInAccessZoneCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class disableCardInAccessZoneCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal disableCardInAccessZoneCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getMovimentsCompletedEventHandler(object sender, getMovimentsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getMovimentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getMovimentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void addMovimentCompletedEventHandler(object sender, addMovimentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addMovimentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addMovimentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void addMovimentFromTimeTrackMobileCompletedEventHandler(object sender, addMovimentFromTimeTrackMobileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addMovimentFromTimeTrackMobileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addMovimentFromTimeTrackMobileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void addMovimentFromMobilePhoneCompletedEventHandler(object sender, addMovimentFromMobilePhoneCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addMovimentFromMobilePhoneCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addMovimentFromMobilePhoneCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void setMovimentIgnoredCompletedEventHandler(object sender, setMovimentIgnoredCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class setMovimentIgnoredCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal setMovimentIgnoredCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void updateMovimentTypeCompletedEventHandler(object sender, updateMovimentTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateMovimentTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateMovimentTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void updateMovimentTypeAndDateCompletedEventHandler(object sender, updateMovimentTypeAndDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateMovimentTypeAndDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateMovimentTypeAndDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void updateMovimentWorkCodeCompletedEventHandler(object sender, updateMovimentWorkCodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateMovimentWorkCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateMovimentWorkCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void updateManualyClassifiedCompletedEventHandler(object sender, updateManualyClassifiedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateManualyClassifiedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateManualyClassifiedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getMovimentCompletedEventHandler(object sender, getMovimentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getMovimentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getMovimentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getMovimentFromDeviceCompletedEventHandler(object sender, getMovimentFromDeviceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getMovimentFromDeviceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getMovimentFromDeviceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getLastMovimentFromDateTimeCompletedEventHandler(object sender, getLastMovimentFromDateTimeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getLastMovimentFromDateTimeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getLastMovimentFromDateTimeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getLastMovimentLogFromDateTimeCompletedEventHandler(object sender, getLastMovimentLogFromDateTimeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getLastMovimentLogFromDateTimeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getLastMovimentLogFromDateTimeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getLastMovimentFromDateCompletedEventHandler(object sender, getLastMovimentFromDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getLastMovimentFromDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getLastMovimentFromDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getLastMovimentFromDateFiltredByMovimentTypeCompletedEventHandler(object sender, getLastMovimentFromDateFiltredByMovimentTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getLastMovimentFromDateFiltredByMovimentTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getLastMovimentFromDateFiltredByMovimentTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getLastEmployeeMovimentsCompletedEventHandler(object sender, getLastEmployeeMovimentsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getLastEmployeeMovimentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getLastEmployeeMovimentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getLastMovimentsCompletedEventHandler(object sender, getLastMovimentsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getLastMovimentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getLastMovimentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getLastEmployeeMovimentsFromintervalCompletedEventHandler(object sender, getLastEmployeeMovimentsFromintervalCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getLastEmployeeMovimentsFromintervalCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getLastEmployeeMovimentsFromintervalCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getLastEmployeeMovimentsWorkCodeFromintervalCompletedEventHandler(object sender, getLastEmployeeMovimentsWorkCodeFromintervalCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getLastEmployeeMovimentsWorkCodeFromintervalCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getLastEmployeeMovimentsWorkCodeFromintervalCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getEmployeeAllMovimentsFromintervalCompletedEventHandler(object sender, getEmployeeAllMovimentsFromintervalCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getEmployeeAllMovimentsFromintervalCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getEmployeeAllMovimentsFromintervalCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getMovimentsFromIntervalByDepCompletedEventHandler(object sender, getMovimentsFromIntervalByDepCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getMovimentsFromIntervalByDepCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getMovimentsFromIntervalByDepCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getMovimentsFromIntervalByEmplCompletedEventHandler(object sender, getMovimentsFromIntervalByEmplCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getMovimentsFromIntervalByEmplCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getMovimentsFromIntervalByEmplCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void addMovimentsLogsCompletedEventHandler(object sender, addMovimentsLogsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addMovimentsLogsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addMovimentsLogsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getMovimentLogCompletedEventHandler(object sender, getMovimentLogCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getMovimentLogCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getMovimentLogCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getDeviceLastMovimentLogCompletedEventHandler(object sender, getDeviceLastMovimentLogCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDeviceLastMovimentLogCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDeviceLastMovimentLogCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getEmployeeAllMovimentsLogsFromintervalCompletedEventHandler(object sender, getEmployeeAllMovimentsLogsFromintervalCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getEmployeeAllMovimentsLogsFromintervalCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getEmployeeAllMovimentsLogsFromintervalCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void addMovimentSuggestedCompletedEventHandler(object sender, addMovimentSuggestedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addMovimentSuggestedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addMovimentSuggestedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getExceptionSuggestedMovsCompletedEventHandler(object sender, getExceptionSuggestedMovsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getExceptionSuggestedMovsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getExceptionSuggestedMovsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getGprsMovimentNotTratedCompletedEventHandler(object sender, getGprsMovimentNotTratedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getGprsMovimentNotTratedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getGprsMovimentNotTratedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void setGPRSMovimentIgnoredCompletedEventHandler(object sender, setGPRSMovimentIgnoredCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class setGPRSMovimentIgnoredCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal setGPRSMovimentIgnoredCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getLastStepCompletedEventHandler(object sender, getLastStepCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getLastStepCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getLastStepCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getPreviousRespCompletedEventHandler(object sender, getPreviousRespCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getPreviousRespCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getPreviousRespCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getProcessActStateCompletedEventHandler(object sender, getProcessActStateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getProcessActStateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getProcessActStateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getProcessDataCompletedEventHandler(object sender, getProcessDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getProcessDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getProcessDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getAllVacationsCompletedEventHandler(object sender, getAllVacationsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllVacationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAllVacationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getUseridEmployeeCompletedEventHandler(object sender, getUseridEmployeeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getUseridEmployeeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getUseridEmployeeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getStateTypesCompletedEventHandler(object sender, getStateTypesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getStateTypesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getStateTypesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void changeStateCompletedEventHandler(object sender, changeStateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class changeStateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal changeStateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void initializeProcHistoryCompletedEventHandler(object sender, initializeProcHistoryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class initializeProcHistoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal initializeProcHistoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void newNotificationCompletedEventHandler(object sender, newNotificationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class newNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal newNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getProcessDataAbsencesCompletedEventHandler(object sender, getProcessDataAbsencesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getProcessDataAbsencesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getProcessDataAbsencesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void addGprsMovimentCompletedEventHandler(object sender, addGprsMovimentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addGprsMovimentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addGprsMovimentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void insertHourBalanceDateCompletedEventHandler(object sender, insertHourBalanceDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class insertHourBalanceDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal insertHourBalanceDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getRealHourBalanceByEmployeeBetweenDateCompletedEventHandler(object sender, getRealHourBalanceByEmployeeBetweenDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getRealHourBalanceByEmployeeBetweenDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getRealHourBalanceByEmployeeBetweenDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getRealHourBalanceByEmployeeDateCompletedEventHandler(object sender, getRealHourBalanceByEmployeeDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getRealHourBalanceByEmployeeDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getRealHourBalanceByEmployeeDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getRealHourBalanceByEmployeeDateTypeCompletedEventHandler(object sender, getRealHourBalanceByEmployeeDateTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getRealHourBalanceByEmployeeDateTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getRealHourBalanceByEmployeeDateTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void insertHourPackageRealTimeDBCompletedEventHandler(object sender, insertHourPackageRealTimeDBCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class insertHourPackageRealTimeDBCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal insertHourPackageRealTimeDBCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void updateHourPackageRealDBCompletedEventHandler(object sender, updateHourPackageRealDBCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateHourPackageRealDBCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateHourPackageRealDBCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void deleteHourPackageRealDBCompletedEventHandler(object sender, deleteHourPackageRealDBCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class deleteHourPackageRealDBCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal deleteHourPackageRealDBCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getRealHourBalanceByEmployeeTotalByTypeDTCompletedEventHandler(object sender, getRealHourBalanceByEmployeeTotalByTypeDTCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getRealHourBalanceByEmployeeTotalByTypeDTCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getRealHourBalanceByEmployeeTotalByTypeDTCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getRealHourBalanceByEmployeeTotalByTypeCompletedEventHandler(object sender, getRealHourBalanceByEmployeeTotalByTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getRealHourBalanceByEmployeeTotalByTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getRealHourBalanceByEmployeeTotalByTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getRealHourBalanceByEmployeeTotalCompletedEventHandler(object sender, getRealHourBalanceByEmployeeTotalCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getRealHourBalanceByEmployeeTotalCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getRealHourBalanceByEmployeeTotalCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void insertHourPackageRealTimeResumeDBCompletedEventHandler(object sender, insertHourPackageRealTimeResumeDBCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class insertHourPackageRealTimeResumeDBCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal insertHourPackageRealTimeResumeDBCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void updateHourPackageRealResumeDBCompletedEventHandler(object sender, updateHourPackageRealResumeDBCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateHourPackageRealResumeDBCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateHourPackageRealResumeDBCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void updateHourPackageRealResumeOfEmpAndTypeDBCompletedEventHandler(object sender, updateHourPackageRealResumeOfEmpAndTypeDBCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateHourPackageRealResumeOfEmpAndTypeDBCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateHourPackageRealResumeOfEmpAndTypeDBCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void deleteHourPackageRealResumeDBCompletedEventHandler(object sender, deleteHourPackageRealResumeDBCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class deleteHourPackageRealResumeDBCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal deleteHourPackageRealResumeDBCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void hasConstructionCompletedEventHandler(object sender, hasConstructionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class hasConstructionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal hasConstructionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void newOrUpdateConstructionCompletedEventHandler(object sender, newOrUpdateConstructionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class newOrUpdateConstructionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal newOrUpdateConstructionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getCentroCustoNameCompletedEventHandler(object sender, getCentroCustoNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getCentroCustoNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getCentroCustoNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void delCentrosCustoCompletedEventHandler(object sender, delCentrosCustoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class delCentrosCustoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal delCentrosCustoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void changeCentrosCustoCompletedEventHandler(object sender, changeCentrosCustoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class changeCentrosCustoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal changeCentrosCustoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void addCentrosCustoCompletedEventHandler(object sender, addCentrosCustoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addCentrosCustoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addCentrosCustoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getAllCentrosCustoCompletedEventHandler(object sender, getAllCentrosCustoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllCentrosCustoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAllCentrosCustoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void addConstructionsEmployeesCompletedEventHandler(object sender, addConstructionsEmployeesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addConstructionsEmployeesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addConstructionsEmployeesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void delConstructionsEmployeesCompletedEventHandler(object sender, delConstructionsEmployeesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class delConstructionsEmployeesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal delConstructionsEmployeesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getConstructionsEmployeesByIdConstructionsCompletedEventHandler(object sender, getConstructionsEmployeesByIdConstructionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getConstructionsEmployeesByIdConstructionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getConstructionsEmployeesByIdConstructionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getDevicesByNameCompletedEventHandler(object sender, getDevicesByNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDevicesByNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDevicesByNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void delConstructionsDevicesCompletedEventHandler(object sender, delConstructionsDevicesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class delConstructionsDevicesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal delConstructionsDevicesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void addConstructionsDevicesCompletedEventHandler(object sender, addConstructionsDevicesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addConstructionsDevicesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addConstructionsDevicesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getConstructionDevicesByIdConstructionsAndIdDevicesCompletedEventHandler(object sender, getConstructionDevicesByIdConstructionsAndIdDevicesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getConstructionDevicesByIdConstructionsAndIdDevicesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getConstructionDevicesByIdConstructionsAndIdDevicesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getConstructionDevicesByDateCompletedEventHandler(object sender, getConstructionDevicesByDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getConstructionDevicesByDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getConstructionDevicesByDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getConstructionDevicesByIdDevicesCompletedEventHandler(object sender, getConstructionDevicesByIdDevicesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getConstructionDevicesByIdDevicesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getConstructionDevicesByIdDevicesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getConstructionDevicesByIdConstructionCompletedEventHandler(object sender, getConstructionDevicesByIdConstructionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getConstructionDevicesByIdConstructionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getConstructionDevicesByIdConstructionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getEmployeesInMobileDeviceCompletedEventHandler(object sender, getEmployeesInMobileDeviceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getEmployeesInMobileDeviceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getEmployeesInMobileDeviceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getAllEmployeesDetailsToMobileCompletedEventHandler(object sender, getAllEmployeesDetailsToMobileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllEmployeesDetailsToMobileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAllEmployeesDetailsToMobileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void addEmployeesInMobileCompletedEventHandler(object sender, addEmployeesInMobileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addEmployeesInMobileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addEmployeesInMobileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void delEmployeesInMobileCompletedEventHandler(object sender, delEmployeesInMobileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class delEmployeesInMobileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal delEmployeesInMobileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getMovimentsFromMobileCompletedEventHandler(object sender, getMovimentsFromMobileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getMovimentsFromMobileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getMovimentsFromMobileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getVacationsTypeCompletedEventHandler(object sender, getVacationsTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getVacationsTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getVacationsTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getVersionFingerPrintCompletedEventHandler(object sender, getVersionFingerPrintCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getVersionFingerPrintCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getVersionFingerPrintCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void addEmployeesInGPRSCompletedEventHandler(object sender, addEmployeesInGPRSCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addEmployeesInGPRSCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addEmployeesInGPRSCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void delEmployeesInGPRSCompletedEventHandler(object sender, delEmployeesInGPRSCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class delEmployeesInGPRSCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal delEmployeesInGPRSCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getAllEmployeesDetailsToGPRSCompletedEventHandler(object sender, getAllEmployeesDetailsToGPRSCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllEmployeesDetailsToGPRSCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAllEmployeesDetailsToGPRSCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getEmployeesInGPRSCompletedEventHandler(object sender, getEmployeesInGPRSCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getEmployeesInGPRSCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getEmployeesInGPRSCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void addProfileMonthScheduleCompletedEventHandler(object sender, addProfileMonthScheduleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addProfileMonthScheduleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addProfileMonthScheduleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void addEmployeeProfileCompletedEventHandler(object sender, addEmployeeProfileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addEmployeeProfileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addEmployeeProfileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void updateEmployeeProfileCompletedEventHandler(object sender, updateEmployeeProfileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateEmployeeProfileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateEmployeeProfileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void deleteEmployeeProfileCompletedEventHandler(object sender, deleteEmployeeProfileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class deleteEmployeeProfileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal deleteEmployeeProfileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getAllProfileMonthSchedulesCompletedEventHandler(object sender, getAllProfileMonthSchedulesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllProfileMonthSchedulesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAllProfileMonthSchedulesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getAllProfileYearMonthSchedulesCompletedEventHandler(object sender, getAllProfileYearMonthSchedulesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllProfileYearMonthSchedulesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAllProfileYearMonthSchedulesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getProfileMonthSchedulesCompletedEventHandler(object sender, getProfileMonthSchedulesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getProfileMonthSchedulesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getProfileMonthSchedulesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getEmployeeProfileByDateCompletedEventHandler(object sender, getEmployeeProfileByDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getEmployeeProfileByDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getEmployeeProfileByDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getTodayIdMonthSchedulesCompletedEventHandler(object sender, getTodayIdMonthSchedulesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getTodayIdMonthSchedulesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getTodayIdMonthSchedulesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void addSchedulesCompletedEventHandler(object sender, addSchedulesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addSchedulesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addSchedulesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void delScheduleCompletedEventHandler(object sender, delScheduleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class delScheduleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal delScheduleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void updateSchedulesCompletedEventHandler(object sender, updateSchedulesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateSchedulesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateSchedulesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getAllSchedulesCompletedEventHandler(object sender, getAllSchedulesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllSchedulesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAllSchedulesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getScheduleFromEnrollNumberAndDateCompletedEventHandler(object sender, getScheduleFromEnrollNumberAndDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getScheduleFromEnrollNumberAndDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getScheduleFromEnrollNumberAndDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getScalesFromEmployeeBetweenDateCompletedEventHandler(object sender, getScalesFromEmployeeBetweenDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getScalesFromEmployeeBetweenDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getScalesFromEmployeeBetweenDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void setScaleFromEmployeeDateCompletedEventHandler(object sender, setScaleFromEmployeeDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class setScaleFromEmployeeDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal setScaleFromEmployeeDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void delAllScalesFromEmployeeDateCompletedEventHandler(object sender, delAllScalesFromEmployeeDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class delAllScalesFromEmployeeDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal delAllScalesFromEmployeeDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getScheduleCompletedEventHandler(object sender, getScheduleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getScheduleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getScheduleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getScheduleByNameCompletedEventHandler(object sender, getScheduleByNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getScheduleByNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getScheduleByNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getAllSchedulesProfileMonthCompletedEventHandler(object sender, getAllSchedulesProfileMonthCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllSchedulesProfileMonthCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAllSchedulesProfileMonthCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getTodayIdScheduleCompletedEventHandler(object sender, getTodayIdScheduleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getTodayIdScheduleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getTodayIdScheduleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getDateIdSchedulesCompletedEventHandler(object sender, getDateIdSchedulesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDateIdSchedulesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDateIdSchedulesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getEmployeeScheduleFromDateCompletedEventHandler(object sender, getEmployeeScheduleFromDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getEmployeeScheduleFromDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getEmployeeScheduleFromDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getEmployeeShiftScheduleFromDateCompletedEventHandler(object sender, getEmployeeShiftScheduleFromDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getEmployeeShiftScheduleFromDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getEmployeeShiftScheduleFromDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void addSchedulesBreaksCompletedEventHandler(object sender, addSchedulesBreaksCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addSchedulesBreaksCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addSchedulesBreaksCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void delSchedulesBreaksCompletedEventHandler(object sender, delSchedulesBreaksCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class delSchedulesBreaksCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal delSchedulesBreaksCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void delRelationSchedulesBreaksCompletedEventHandler(object sender, delRelationSchedulesBreaksCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class delRelationSchedulesBreaksCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal delRelationSchedulesBreaksCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getAllSchedulesBreaksCompletedEventHandler(object sender, getAllSchedulesBreaksCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllSchedulesBreaksCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAllSchedulesBreaksCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getSchedulesBreaksCompletedEventHandler(object sender, getSchedulesBreaksCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getSchedulesBreaksCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getSchedulesBreaksCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void addSchedulesChangesCompletedEventHandler(object sender, addSchedulesChangesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addSchedulesChangesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addSchedulesChangesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void updateSchedulesChangesCompletedEventHandler(object sender, updateSchedulesChangesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateSchedulesChangesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateSchedulesChangesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void delSchedulesChangesCompletedEventHandler(object sender, delSchedulesChangesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class delSchedulesChangesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal delSchedulesChangesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getEmployeeScheduleChangeFromDateCompletedEventHandler(object sender, getEmployeeScheduleChangeFromDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getEmployeeScheduleChangeFromDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getEmployeeScheduleChangeFromDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void addWorkResumeCompletedEventHandler(object sender, addWorkResumeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addWorkResumeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addWorkResumeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void delWorkResumeCompletedEventHandler(object sender, delWorkResumeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class delWorkResumeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal delWorkResumeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void changeWorkResumeCompletedEventHandler(object sender, changeWorkResumeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class changeWorkResumeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal changeWorkResumeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void changeWorkResumeClosedStateCompletedEventHandler(object sender, changeWorkResumeClosedStateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class changeWorkResumeClosedStateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal changeWorkResumeClosedStateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getEmployeeDateResumeCompletedEventHandler(object sender, getEmployeeDateResumeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getEmployeeDateResumeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getEmployeeDateResumeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getEmployeeDatePeriodResumeCompletedEventHandler(object sender, getEmployeeDatePeriodResumeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getEmployeeDatePeriodResumeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getEmployeeDatePeriodResumeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getDatePeriodResumeByDepCompletedEventHandler(object sender, getDatePeriodResumeByDepCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDatePeriodResumeByDepCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDatePeriodResumeByDepCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void addExtraHoursCompletedEventHandler(object sender, addExtraHoursCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addExtraHoursCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addExtraHoursCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void delExtraHoursCompletedEventHandler(object sender, delExtraHoursCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class delExtraHoursCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal delExtraHoursCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void delExtraHoursFromEmployeeOnDateCompletedEventHandler(object sender, delExtraHoursFromEmployeeOnDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class delExtraHoursFromEmployeeOnDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal delExtraHoursFromEmployeeOnDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getEmployeeExtraHoursCompletedEventHandler(object sender, getEmployeeExtraHoursCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getEmployeeExtraHoursCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getEmployeeExtraHoursCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getEmployeeDatePeriodExtraHoursCompletedEventHandler(object sender, getEmployeeDatePeriodExtraHoursCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getEmployeeDatePeriodExtraHoursCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getEmployeeDatePeriodExtraHoursCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getEmployeeDatePeriodExtraHoursFromWorkResumeCompletedEventHandler(object sender, getEmployeeDatePeriodExtraHoursFromWorkResumeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getEmployeeDatePeriodExtraHoursFromWorkResumeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getEmployeeDatePeriodExtraHoursFromWorkResumeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void addScheduleSequenceCompletedEventHandler(object sender, addScheduleSequenceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addScheduleSequenceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addScheduleSequenceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void updateScheduleSequenceCompletedEventHandler(object sender, updateScheduleSequenceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateScheduleSequenceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateScheduleSequenceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void delScheduleSequenceCompletedEventHandler(object sender, delScheduleSequenceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class delScheduleSequenceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal delScheduleSequenceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getAllScheduleSequenceCompletedEventHandler(object sender, getAllScheduleSequenceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllScheduleSequenceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAllScheduleSequenceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getScheduleSequenceCompletedEventHandler(object sender, getScheduleSequenceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getScheduleSequenceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getScheduleSequenceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void addSSElementCompletedEventHandler(object sender, addSSElementCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addSSElementCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addSSElementCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void updateSSElementCompletedEventHandler(object sender, updateSSElementCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateSSElementCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateSSElementCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void delSSElementCompletedEventHandler(object sender, delSSElementCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class delSSElementCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal delSSElementCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getAllSSElementFromScheduleSequenceCompletedEventHandler(object sender, getAllSSElementFromScheduleSequenceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllSSElementFromScheduleSequenceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAllSSElementFromScheduleSequenceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void setMonthScheduleIdScheduleInDayCompletedEventHandler(object sender, setMonthScheduleIdScheduleInDayCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class setMonthScheduleIdScheduleInDayCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal setMonthScheduleIdScheduleInDayCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getProfileIdScheduleAndIdMonthScheduleFromDateCompletedEventHandler(object sender, getProfileIdScheduleAndIdMonthScheduleFromDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getProfileIdScheduleAndIdMonthScheduleFromDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getProfileIdScheduleAndIdMonthScheduleFromDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getPcMovementsLogsCompletedEventHandler(object sender, getPcMovementsLogsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getPcMovementsLogsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getPcMovementsLogsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void addPcMovimentLogCompletedEventHandler(object sender, addPcMovimentLogCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addPcMovimentLogCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addPcMovimentLogCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void setImportedPcMovCompletedEventHandler(object sender, setImportedPcMovCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class setImportedPcMovCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal setImportedPcMovCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getEnrollNumberCompletedEventHandler(object sender, getEnrollNumberCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getEnrollNumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getEnrollNumberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getIdDeviceByCodeCompletedEventHandler(object sender, getIdDeviceByCodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getIdDeviceByCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getIdDeviceByCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getAllDevicesCompletedEventHandler(object sender, getAllDevicesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllDevicesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAllDevicesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getIpServerCompletedEventHandler(object sender, getIpServerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getIpServerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getIpServerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void addDevicesCompletedEventHandler(object sender, addDevicesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addDevicesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addDevicesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void changeDevicesCompletedEventHandler(object sender, changeDevicesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class changeDevicesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal changeDevicesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getIdDeviceFromMachineNumberCompletedEventHandler(object sender, getIdDeviceFromMachineNumberCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getIdDeviceFromMachineNumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getIdDeviceFromMachineNumberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getIpDeviceFromIdDeviceCompletedEventHandler(object sender, getIpDeviceFromIdDeviceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getIpDeviceFromIdDeviceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getIpDeviceFromIdDeviceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void delDeviceCompletedEventHandler(object sender, delDeviceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class delDeviceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal delDeviceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void addDeviceEmployeesCompletedEventHandler(object sender, addDeviceEmployeesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addDeviceEmployeesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addDeviceEmployeesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void changeDeviceEmployeesCompletedEventHandler(object sender, changeDeviceEmployeesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class changeDeviceEmployeesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal changeDeviceEmployeesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void delDeviceEmployeesCompletedEventHandler(object sender, delDeviceEmployeesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class delDeviceEmployeesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal delDeviceEmployeesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getLastDeviceEnrollNumberCompletedEventHandler(object sender, getLastDeviceEnrollNumberCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getLastDeviceEnrollNumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getLastDeviceEnrollNumberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getAllDeviceEmployeesCompletedEventHandler(object sender, getAllDeviceEmployeesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllDeviceEmployeesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAllDeviceEmployeesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getAllDeviceEmployeesFromDeviceCompletedEventHandler(object sender, getAllDeviceEmployeesFromDeviceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllDeviceEmployeesFromDeviceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAllDeviceEmployeesFromDeviceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getDeviceEmployeesFromEnrollNumberCompletedEventHandler(object sender, getDeviceEmployeesFromEnrollNumberCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDeviceEmployeesFromEnrollNumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDeviceEmployeesFromEnrollNumberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getNextMovimentFromDateTimeCompletedEventHandler(object sender, getNextMovimentFromDateTimeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getNextMovimentFromDateTimeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getNextMovimentFromDateTimeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void translateMovimentsTableDBCompletedEventHandler(object sender, translateMovimentsTableDBCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class translateMovimentsTableDBCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal translateMovimentsTableDBCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getEmployeeExceptionFromDateCompletedEventHandler(object sender, getEmployeeExceptionFromDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getEmployeeExceptionFromDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getEmployeeExceptionFromDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getNotTratedExceptionsCompletedEventHandler(object sender, getNotTratedExceptionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getNotTratedExceptionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getNotTratedExceptionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getEmployeeExceptionFromDateIntervalCompletedEventHandler(object sender, getEmployeeExceptionFromDateIntervalCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getEmployeeExceptionFromDateIntervalCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getEmployeeExceptionFromDateIntervalCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void addExceptionCompletedEventHandler(object sender, addExceptionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addExceptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addExceptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void changeExceptionCompletedEventHandler(object sender, changeExceptionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class changeExceptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal changeExceptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void setExceptionTratedCompletedEventHandler(object sender, setExceptionTratedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class setExceptionTratedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal setExceptionTratedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void setExceptionIgnoredCompletedEventHandler(object sender, setExceptionIgnoredCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class setExceptionIgnoredCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal setExceptionIgnoredCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void deleteVacationsResumeCompletedEventHandler(object sender, deleteVacationsResumeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class deleteVacationsResumeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal deleteVacationsResumeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getEmployeeFingerPrintCompletedEventHandler(object sender, getEmployeeFingerPrintCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getEmployeeFingerPrintCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getEmployeeFingerPrintCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getEmployeeFacesCompletedEventHandler(object sender, getEmployeeFacesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getEmployeeFacesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getEmployeeFacesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getFingerPrintCompletedEventHandler(object sender, getFingerPrintCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getFingerPrintCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getFingerPrintCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getRelationShipEmployeesFingerprintsCompletedEventHandler(object sender, getRelationShipEmployeesFingerprintsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getRelationShipEmployeesFingerprintsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getRelationShipEmployeesFingerprintsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void addFingerPrintCompletedEventHandler(object sender, addFingerPrintCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addFingerPrintCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addFingerPrintCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void delFingerPrintCompletedEventHandler(object sender, delFingerPrintCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class delFingerPrintCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal delFingerPrintCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void updateFingerPrintCompletedEventHandler(object sender, updateFingerPrintCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateFingerPrintCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateFingerPrintCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void delEmployeeFingerPrintCompletedEventHandler(object sender, delEmployeeFingerPrintCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class delEmployeeFingerPrintCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal delEmployeeFingerPrintCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getRfidCardCompletedEventHandler(object sender, getRfidCardCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getRfidCardCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getRfidCardCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void addRfidCardsCompletedEventHandler(object sender, addRfidCardsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addRfidCardsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addRfidCardsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getEmployeeRfidCardsCompletedEventHandler(object sender, getEmployeeRfidCardsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getEmployeeRfidCardsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getEmployeeRfidCardsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void updateRfidCardCompletedEventHandler(object sender, updateRfidCardCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateRfidCardCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateRfidCardCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getEmployeeCardNumberCompletedEventHandler(object sender, getEmployeeCardNumberCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getEmployeeCardNumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getEmployeeCardNumberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public uint Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((uint)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getAllEmployeeCardNumberCompletedEventHandler(object sender, getAllEmployeeCardNumberCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllEmployeeCardNumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAllEmployeeCardNumberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getAllSkillsCompletedEventHandler(object sender, getAllSkillsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllSkillsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAllSkillsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getAllProfessionalCategoriesCompletedEventHandler(object sender, getAllProfessionalCategoriesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllProfessionalCategoriesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAllProfessionalCategoriesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void addSkillsCompletedEventHandler(object sender, addSkillsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addSkillsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addSkillsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void changeSkillsCompletedEventHandler(object sender, changeSkillsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class changeSkillsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal changeSkillsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void delSkillsCompletedEventHandler(object sender, delSkillsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class delSkillsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal delSkillsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getScaleServiceSkillsCompletedEventHandler(object sender, getScaleServiceSkillsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getScaleServiceSkillsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getScaleServiceSkillsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void delAllScaleServiceSkillsCompletedEventHandler(object sender, delAllScaleServiceSkillsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class delAllScaleServiceSkillsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal delAllScaleServiceSkillsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getScalesServicesSchedulesCompletedEventHandler(object sender, getScalesServicesSchedulesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getScalesServicesSchedulesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getScalesServicesSchedulesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getEmployeeScalesCompletedEventHandler(object sender, getEmployeeScalesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getEmployeeScalesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getEmployeeScalesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void delAllScaleServiceSchedulesCompletedEventHandler(object sender, delAllScaleServiceSchedulesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class delAllScaleServiceSchedulesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal delAllScaleServiceSchedulesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void addScaleServiceSchedulesCompletedEventHandler(object sender, addScaleServiceSchedulesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addScaleServiceSchedulesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addScaleServiceSchedulesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void addScaleServiceSkillsCompletedEventHandler(object sender, addScaleServiceSkillsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addScaleServiceSkillsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addScaleServiceSkillsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getEmployeeSkillsCompletedEventHandler(object sender, getEmployeeSkillsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getEmployeeSkillsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getEmployeeSkillsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void delEmployeeSkillCompletedEventHandler(object sender, delEmployeeSkillCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class delEmployeeSkillCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal delEmployeeSkillCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void addEmployeeSkillCompletedEventHandler(object sender, addEmployeeSkillCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addEmployeeSkillCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addEmployeeSkillCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void updateEmployeeSkillsCompletedEventHandler(object sender, updateEmployeeSkillsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateEmployeeSkillsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateEmployeeSkillsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getAllContractsCompletedEventHandler(object sender, getAllContractsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllContractsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAllContractsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void addContractsCompletedEventHandler(object sender, addContractsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addContractsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addContractsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void changeContractsCompletedEventHandler(object sender, changeContractsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class changeContractsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal changeContractsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void delContractsCompletedEventHandler(object sender, delContractsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class delContractsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal delContractsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getEmployeeContractsCompletedEventHandler(object sender, getEmployeeContractsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getEmployeeContractsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getEmployeeContractsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void delEmployeeContractsCompletedEventHandler(object sender, delEmployeeContractsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class delEmployeeContractsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal delEmployeeContractsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void addEmployeeContractsCompletedEventHandler(object sender, addEmployeeContractsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addEmployeeContractsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addEmployeeContractsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void updateEmployeeContractsCompletedEventHandler(object sender, updateEmployeeContractsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateEmployeeContractsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateEmployeeContractsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void updateEmployeeOperationalSkillsCompletedEventHandler(object sender, updateEmployeeOperationalSkillsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateEmployeeOperationalSkillsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateEmployeeOperationalSkillsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getEmployeeOperationalSkillsCompletedEventHandler(object sender, getEmployeeOperationalSkillsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getEmployeeOperationalSkillsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getEmployeeOperationalSkillsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void delEmployeeOperationalSkillCompletedEventHandler(object sender, delEmployeeOperationalSkillCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class delEmployeeOperationalSkillCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal delEmployeeOperationalSkillCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void addEmployeeOperationalSkillCompletedEventHandler(object sender, addEmployeeOperationalSkillCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addEmployeeOperationalSkillCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addEmployeeOperationalSkillCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getAllCareerFunctionsCompletedEventHandler(object sender, getAllCareerFunctionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllCareerFunctionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAllCareerFunctionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void addCareerFunctionsCompletedEventHandler(object sender, addCareerFunctionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addCareerFunctionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addCareerFunctionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void changeCareerFunctionsCompletedEventHandler(object sender, changeCareerFunctionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class changeCareerFunctionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal changeCareerFunctionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void delCareerFunctionsCompletedEventHandler(object sender, delCareerFunctionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class delCareerFunctionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal delCareerFunctionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getEmployeeCareerFunctionCompletedEventHandler(object sender, getEmployeeCareerFunctionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getEmployeeCareerFunctionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getEmployeeCareerFunctionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void delEmployeeCareerFunctionCompletedEventHandler(object sender, delEmployeeCareerFunctionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class delEmployeeCareerFunctionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal delEmployeeCareerFunctionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void updateEmployeeCareerFunctionCompletedEventHandler(object sender, updateEmployeeCareerFunctionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateEmployeeCareerFunctionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateEmployeeCareerFunctionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void addEmployeeCareerFunctionCompletedEventHandler(object sender, addEmployeeCareerFunctionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addEmployeeCareerFunctionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addEmployeeCareerFunctionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getAllAptitudeExamsCompletedEventHandler(object sender, getAllAptitudeExamsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllAptitudeExamsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAllAptitudeExamsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void addAptitudeExamsCompletedEventHandler(object sender, addAptitudeExamsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addAptitudeExamsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addAptitudeExamsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void changeAptitudeExamsCompletedEventHandler(object sender, changeAptitudeExamsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class changeAptitudeExamsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal changeAptitudeExamsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void delAptitudeExamsCompletedEventHandler(object sender, delAptitudeExamsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class delAptitudeExamsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal delAptitudeExamsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getAllAptitudeExamsEmployeeCompletedEventHandler(object sender, getAllAptitudeExamsEmployeeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllAptitudeExamsEmployeeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAllAptitudeExamsEmployeeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void delEmployeeAptitudeExamCompletedEventHandler(object sender, delEmployeeAptitudeExamCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class delEmployeeAptitudeExamCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal delEmployeeAptitudeExamCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void addEmployeeAptitudeExamsCompletedEventHandler(object sender, addEmployeeAptitudeExamsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addEmployeeAptitudeExamsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addEmployeeAptitudeExamsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void updateEmployeeExamsCompletedEventHandler(object sender, updateEmployeeExamsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateEmployeeExamsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateEmployeeExamsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getEmployeeDocumentsCompletedEventHandler(object sender, getEmployeeDocumentsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getEmployeeDocumentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getEmployeeDocumentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void addEmployeeDocumentsCompletedEventHandler(object sender, addEmployeeDocumentsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addEmployeeDocumentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addEmployeeDocumentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void updateEmployeeDocumentsCompletedEventHandler(object sender, updateEmployeeDocumentsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateEmployeeDocumentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateEmployeeDocumentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void delEmployeeDocumentsCompletedEventHandler(object sender, delEmployeeDocumentsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class delEmployeeDocumentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal delEmployeeDocumentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getAllTrainingCompletedEventHandler(object sender, getAllTrainingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllTrainingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAllTrainingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void addTrainingCompletedEventHandler(object sender, addTrainingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addTrainingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addTrainingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void updateTrainingCompletedEventHandler(object sender, updateTrainingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateTrainingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateTrainingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void delTrainingCompletedEventHandler(object sender, delTrainingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class delTrainingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal delTrainingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getAllActivationsEmployCompletedEventHandler(object sender, getAllActivationsEmployCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllActivationsEmployCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAllActivationsEmployCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void delEmployeeActivationCompletedEventHandler(object sender, delEmployeeActivationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class delEmployeeActivationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal delEmployeeActivationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void addEmployeeActivationCompletedEventHandler(object sender, addEmployeeActivationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addEmployeeActivationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addEmployeeActivationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void delBreakCompletedEventHandler(object sender, delBreakCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class delBreakCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal delBreakCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void updateBreaksCompletedEventHandler(object sender, updateBreaksCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateBreaksCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateBreaksCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void addMonthSchedulesCompletedEventHandler(object sender, addMonthSchedulesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addMonthSchedulesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addMonthSchedulesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void updateMonthSchedulesCompletedEventHandler(object sender, updateMonthSchedulesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateMonthSchedulesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateMonthSchedulesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void delWorkPlaneCompletedEventHandler(object sender, delWorkPlaneCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class delWorkPlaneCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal delWorkPlaneCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getAllMonthSchedulesCompletedEventHandler(object sender, getAllMonthSchedulesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllMonthSchedulesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAllMonthSchedulesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getAllscalesServicesCompletedEventHandler(object sender, getAllscalesServicesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllscalesServicesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAllscalesServicesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getScalesServicesCompletedEventHandler(object sender, getScalesServicesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getScalesServicesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getScalesServicesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getScalesServicesEmployeeCompletedEventHandler(object sender, getScalesServicesEmployeeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getScalesServicesEmployeeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getScalesServicesEmployeeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void delScalesServicesCompletedEventHandler(object sender, delScalesServicesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class delScalesServicesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal delScalesServicesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void updateScalesServicesCompletedEventHandler(object sender, updateScalesServicesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateScalesServicesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateScalesServicesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void addScalesServicesCompletedEventHandler(object sender, addScalesServicesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addScalesServicesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addScalesServicesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void delEmployeeScalesServicesCompletedEventHandler(object sender, delEmployeeScalesServicesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class delEmployeeScalesServicesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal delEmployeeScalesServicesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getScalesServicesOfEmployeeCompletedEventHandler(object sender, getScalesServicesOfEmployeeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getScalesServicesOfEmployeeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getScalesServicesOfEmployeeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void setEmployeeScalesServicesCompletedEventHandler(object sender, setEmployeeScalesServicesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class setEmployeeScalesServicesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal setEmployeeScalesServicesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void addUsersCompletedEventHandler(object sender, addUsersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void changeUsersCompletedEventHandler(object sender, changeUsersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class changeUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal changeUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void changeUsersPassCompletedEventHandler(object sender, changeUsersPassCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class changeUsersPassCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal changeUsersPassCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void delUsersCompletedEventHandler(object sender, delUsersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class delUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal delUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getUsersCompletedEventHandler(object sender, getUsersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getUsersByLoginCompletedEventHandler(object sender, getUsersByLoginCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getUsersByLoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getUsersByLoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getUserIdCompletedEventHandler(object sender, getUserIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getUserIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getUserIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getIdEmployeeCompletedEventHandler(object sender, getIdEmployeeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getIdEmployeeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getIdEmployeeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getIdEmployeeByNumberCompletedEventHandler(object sender, getIdEmployeeByNumberCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getIdEmployeeByNumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getIdEmployeeByNumberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void addUsersDepartmentCompletedEventHandler(object sender, addUsersDepartmentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addUsersDepartmentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addUsersDepartmentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void changeUsersDepartmentCompletedEventHandler(object sender, changeUsersDepartmentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class changeUsersDepartmentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal changeUsersDepartmentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void delUsersDepartmentCompletedEventHandler(object sender, delUsersDepartmentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class delUsersDepartmentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal delUsersDepartmentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getUserDepartmentsCompletedEventHandler(object sender, getUserDepartmentsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getUserDepartmentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getUserDepartmentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getUserFunctionsCompletedEventHandler(object sender, getUserFunctionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getUserFunctionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getUserFunctionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getUserRolesCompletedEventHandler(object sender, getUserRolesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getUserRolesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getUserRolesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void addUserRolesCompletedEventHandler(object sender, addUserRolesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addUserRolesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addUserRolesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void addUserFunctionsCompletedEventHandler(object sender, addUserFunctionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addUserFunctionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addUserFunctionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void delUserRolesCompletedEventHandler(object sender, delUserRolesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class delUserRolesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal delUserRolesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void delAllUserRolesCompletedEventHandler(object sender, delAllUserRolesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class delAllUserRolesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal delAllUserRolesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void delUserFunctionsCompletedEventHandler(object sender, delUserFunctionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class delUserFunctionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal delUserFunctionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getAllOperationalRequirementsCompletedEventHandler(object sender, getAllOperationalRequirementsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllOperationalRequirementsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAllOperationalRequirementsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void addOperationalRequirementsCompletedEventHandler(object sender, addOperationalRequirementsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addOperationalRequirementsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addOperationalRequirementsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void changeOperationalRequirementsCompletedEventHandler(object sender, changeOperationalRequirementsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class changeOperationalRequirementsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal changeOperationalRequirementsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void delOperationalRequirementsCompletedEventHandler(object sender, delOperationalRequirementsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class delOperationalRequirementsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal delOperationalRequirementsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getOperatRequirementsServiceCompletedEventHandler(object sender, getOperatRequirementsServiceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getOperatRequirementsServiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getOperatRequirementsServiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void delOperatRequirementsServiceCompletedEventHandler(object sender, delOperatRequirementsServiceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class delOperatRequirementsServiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal delOperatRequirementsServiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void addOperatRequirementsServiceCompletedEventHandler(object sender, addOperatRequirementsServiceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addOperatRequirementsServiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addOperatRequirementsServiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void updateOperatRequirementsServiceCompletedEventHandler(object sender, updateOperatRequirementsServiceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateOperatRequirementsServiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateOperatRequirementsServiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void delAbsencesFromDateCompletedEventHandler(object sender, delAbsencesFromDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class delAbsencesFromDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal delAbsencesFromDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void delEmployeeAbsencesRelationFromDateCompletedEventHandler(object sender, delEmployeeAbsencesRelationFromDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class delEmployeeAbsencesRelationFromDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal delEmployeeAbsencesRelationFromDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void addOrUpdateEmployeeCompletedEventHandler(object sender, addOrUpdateEmployeeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addOrUpdateEmployeeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addOrUpdateEmployeeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void addOrUpdateEmployeeFCPCompletedEventHandler(object sender, addOrUpdateEmployeeFCPCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addOrUpdateEmployeeFCPCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addOrUpdateEmployeeFCPCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void updateEmployeeCompletedEventHandler(object sender, updateEmployeeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateEmployeeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateEmployeeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void delEmployeeCompletedEventHandler(object sender, delEmployeeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class delEmployeeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal delEmployeeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getAllFingerPrintsCompletedEventHandler(object sender, getAllFingerPrintsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllFingerPrintsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAllFingerPrintsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getEmployeeByNumberAndPasswordCompletedEventHandler(object sender, getEmployeeByNumberAndPasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getEmployeeByNumberAndPasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getEmployeeByNumberAndPasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getAllEmployeesCompletedEventHandler(object sender, getAllEmployeesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllEmployeesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAllEmployeesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getAllEmployeesDetailsCompletedEventHandler(object sender, getAllEmployeesDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllEmployeesDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAllEmployeesDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getEmployeesDetailsByIdDepartmentCompletedEventHandler(object sender, getEmployeesDetailsByIdDepartmentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getEmployeesDetailsByIdDepartmentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getEmployeesDetailsByIdDepartmentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getPictureFromDatabaseCompletedEventHandler(object sender, getPictureFromDatabaseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getPictureFromDatabaseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getPictureFromDatabaseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getEmployeeCompletedEventHandler(object sender, getEmployeeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getEmployeeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getEmployeeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getEmployeeFromNumberCompletedEventHandler(object sender, getEmployeeFromNumberCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getEmployeeFromNumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getEmployeeFromNumberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void changeEmployeeProfileCompletedEventHandler(object sender, changeEmployeeProfileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class changeEmployeeProfileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal changeEmployeeProfileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void changeEmployeeDeviceParamCompletedEventHandler(object sender, changeEmployeeDeviceParamCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class changeEmployeeDeviceParamCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal changeEmployeeDeviceParamCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getEmployeeLastNumberCompletedEventHandler(object sender, getEmployeeLastNumberCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getEmployeeLastNumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getEmployeeLastNumberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getEmployeeProfileCompletedEventHandler(object sender, getEmployeeProfileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getEmployeeProfileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getEmployeeProfileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getEmployeeAllProfilesCompletedEventHandler(object sender, getEmployeeAllProfilesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getEmployeeAllProfilesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getEmployeeAllProfilesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getAllProfileEmployeesCompletedEventHandler(object sender, getAllProfileEmployeesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllProfileEmployeesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAllProfileEmployeesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void saveEmployeePictureCompletedEventHandler(object sender, saveEmployeePictureCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class saveEmployeePictureCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal saveEmployeePictureCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getEmployeePictureCompletedEventHandler(object sender, getEmployeePictureCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getEmployeePictureCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getEmployeePictureCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getEmployeeAbsencesCompletedEventHandler(object sender, getEmployeeAbsencesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getEmployeeAbsencesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getEmployeeAbsencesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getEmployeeAbsencesApprovedCompletedEventHandler(object sender, getEmployeeAbsencesApprovedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getEmployeeAbsencesApprovedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getEmployeeAbsencesApprovedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void addEmployeeAbsencesCompletedEventHandler(object sender, addEmployeeAbsencesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addEmployeeAbsencesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addEmployeeAbsencesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string idAbsence {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void updateAbsencesCompletedEventHandler(object sender, updateAbsencesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateAbsencesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateAbsencesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void delEmployeeAbsencesCompletedEventHandler(object sender, delEmployeeAbsencesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class delEmployeeAbsencesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal delEmployeeAbsencesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getEmployeesOnAbsencesFromDateCompletedEventHandler(object sender, getEmployeesOnAbsencesFromDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getEmployeesOnAbsencesFromDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getEmployeesOnAbsencesFromDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getEmployeeMonthAbsencesCompletedEventHandler(object sender, getEmployeeMonthAbsencesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getEmployeeMonthAbsencesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getEmployeeMonthAbsencesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getEmployeeAbsencesFromDateCompletedEventHandler(object sender, getEmployeeAbsencesFromDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getEmployeeAbsencesFromDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getEmployeeAbsencesFromDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getEmployeeAbsencesFromBeginDateAndEndDateCompletedEventHandler(object sender, getEmployeeAbsencesFromBeginDateAndEndDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getEmployeeAbsencesFromBeginDateAndEndDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getEmployeeAbsencesFromBeginDateAndEndDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getEmployeeDatePeriodAbsencesCompletedEventHandler(object sender, getEmployeeDatePeriodAbsencesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getEmployeeDatePeriodAbsencesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getEmployeeDatePeriodAbsencesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getEmployeeDatePeriodAbsencesByReasonCompletedEventHandler(object sender, getEmployeeDatePeriodAbsencesByReasonCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getEmployeeDatePeriodAbsencesByReasonCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getEmployeeDatePeriodAbsencesByReasonCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getAllAbsencesWDetailsYearCompletedEventHandler(object sender, getAllAbsencesWDetailsYearCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllAbsencesWDetailsYearCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAllAbsencesWDetailsYearCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getAllAbsencesWDetailsCompletedEventHandler(object sender, getAllAbsencesWDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllAbsencesWDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAllAbsencesWDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getAllAbsencesCompletedEventHandler(object sender, getAllAbsencesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllAbsencesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAllAbsencesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getAllAbsencesApprovedCompletedEventHandler(object sender, getAllAbsencesApprovedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllAbsencesApprovedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAllAbsencesApprovedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getLastInsertedAbsenceCompletedEventHandler(object sender, getLastInsertedAbsenceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getLastInsertedAbsenceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getLastInsertedAbsenceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getEmployeeVacationsCompletedEventHandler(object sender, getEmployeeVacationsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getEmployeeVacationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getEmployeeVacationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getEmployeeVacationsByPeriodCompletedEventHandler(object sender, getEmployeeVacationsByPeriodCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getEmployeeVacationsByPeriodCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getEmployeeVacationsByPeriodCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getEmployeeVacationsByPeriodToPrimaveraCompletedEventHandler(object sender, getEmployeeVacationsByPeriodToPrimaveraCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getEmployeeVacationsByPeriodToPrimaveraCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getEmployeeVacationsByPeriodToPrimaveraCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getEmployeeMonthVacationsCompletedEventHandler(object sender, getEmployeeMonthVacationsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getEmployeeMonthVacationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getEmployeeMonthVacationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void addEmployeeVacationsCompletedEventHandler(object sender, addEmployeeVacationsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addEmployeeVacationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addEmployeeVacationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void updateVacationsCompletedEventHandler(object sender, updateVacationsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateVacationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateVacationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void delEmployeeVacationsCompletedEventHandler(object sender, delEmployeeVacationsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class delEmployeeVacationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal delEmployeeVacationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getEmployeesOnVacationsFromDateCompletedEventHandler(object sender, getEmployeesOnVacationsFromDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getEmployeesOnVacationsFromDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getEmployeesOnVacationsFromDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getEmployeeVacationFromDateCompletedEventHandler(object sender, getEmployeeVacationFromDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getEmployeeVacationFromDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getEmployeeVacationFromDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getEmployeeVacationFromBeginAndEndDateCompletedEventHandler(object sender, getEmployeeVacationFromBeginAndEndDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getEmployeeVacationFromBeginAndEndDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getEmployeeVacationFromBeginAndEndDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getEmployeeDatePeriodVacationsCompletedEventHandler(object sender, getEmployeeDatePeriodVacationsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getEmployeeDatePeriodVacationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getEmployeeDatePeriodVacationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getAllVacationsYearCompletedEventHandler(object sender, getAllVacationsYearCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllVacationsYearCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAllVacationsYearCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getVacationsApprovedCompletedEventHandler(object sender, getVacationsApprovedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getVacationsApprovedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getVacationsApprovedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getEmployeeAllMonthVacationsCompletedEventHandler(object sender, getEmployeeAllMonthVacationsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getEmployeeAllMonthVacationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getEmployeeAllMonthVacationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getAllVacationsOrderByIdVacationsCompletedEventHandler(object sender, getAllVacationsOrderByIdVacationsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllVacationsOrderByIdVacationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAllVacationsOrderByIdVacationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getEmployeeAllVacationsResumeCompletedEventHandler(object sender, getEmployeeAllVacationsResumeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getEmployeeAllVacationsResumeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getEmployeeAllVacationsResumeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getEmployeeYearVacationsResumeCompletedEventHandler(object sender, getEmployeeYearVacationsResumeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getEmployeeYearVacationsResumeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getEmployeeYearVacationsResumeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void addVacationsResumeCompletedEventHandler(object sender, addVacationsResumeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addVacationsResumeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addVacationsResumeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void updateVacationsResumeCompletedEventHandler(object sender, updateVacationsResumeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateVacationsResumeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateVacationsResumeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getSecurityTokenCompletedEventHandler(object sender, getSecurityTokenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getSecurityTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getSecurityTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void removeSecurityTokenCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void pingCompletedEventHandler(object sender, pingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class pingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal pingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void backupDataBaseCompletedEventHandler(object sender, backupDataBaseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class backupDataBaseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal backupDataBaseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void backupDBCompletedEventHandler(object sender, backupDBCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class backupDBCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal backupDBCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void restoreDBCompletedEventHandler(object sender, restoreDBCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class restoreDBCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal restoreDBCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void runUpdateScriptCompletedEventHandler(object sender, runUpdateScriptCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class runUpdateScriptCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal runUpdateScriptCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void translateRolesTableDBCompletedEventHandler(object sender, translateRolesTableDBCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class translateRolesTableDBCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal translateRolesTableDBCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void translateExceptionsTableDBCompletedEventHandler(object sender, translateExceptionsTableDBCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class translateExceptionsTableDBCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal translateExceptionsTableDBCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void hasEmployeesCompletedEventHandler(object sender, hasEmployeesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class hasEmployeesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal hasEmployeesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void unboundUsersDepartCompletedEventHandler(object sender, unboundUsersDepartCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class unboundUsersDepartCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal unboundUsersDepartCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void hasuserCompletedEventHandler(object sender, hasuserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class hasuserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal hasuserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getDepartmentNameCompletedEventHandler(object sender, getDepartmentNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDepartmentNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDepartmentNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getDepartmentByNameCompletedEventHandler(object sender, getDepartmentByNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDepartmentByNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDepartmentByNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getDepartmentByNameAndFatherCompletedEventHandler(object sender, getDepartmentByNameAndFatherCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDepartmentByNameAndFatherCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDepartmentByNameAndFatherCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void unboundEmployeesDepartCompletedEventHandler(object sender, unboundEmployeesDepartCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class unboundEmployeesDepartCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal unboundEmployeesDepartCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void addDepartmentCompletedEventHandler(object sender, addDepartmentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addDepartmentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addDepartmentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void addAcademicDegreeCompletedEventHandler(object sender, addAcademicDegreeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addAcademicDegreeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addAcademicDegreeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void changeAcademicDegreeCompletedEventHandler(object sender, changeAcademicDegreeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class changeAcademicDegreeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal changeAcademicDegreeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void delAcademicDegreeCompletedEventHandler(object sender, delAcademicDegreeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class delAcademicDegreeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal delAcademicDegreeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getAllAcademicDegreeCompletedEventHandler(object sender, getAllAcademicDegreeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllAcademicDegreeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAllAcademicDegreeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getAllBreakTypesCompletedEventHandler(object sender, getAllBreakTypesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllBreakTypesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAllBreakTypesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void addBreakTypeCompletedEventHandler(object sender, addBreakTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addBreakTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addBreakTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void changeBreakTypeCompletedEventHandler(object sender, changeBreakTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class changeBreakTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal changeBreakTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void delBreakTypeCompletedEventHandler(object sender, delBreakTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class delBreakTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal delBreakTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getAllCitiesCompletedEventHandler(object sender, getAllCitiesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllCitiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAllCitiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getCitiesByNameCompletedEventHandler(object sender, getCitiesByNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getCitiesByNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getCitiesByNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void addCityCompletedEventHandler(object sender, addCityCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addCityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addCityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void changeCityCompletedEventHandler(object sender, changeCityCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class changeCityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal changeCityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void delCityCompletedEventHandler(object sender, delCityCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class delCityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal delCityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getAllCountriesCompletedEventHandler(object sender, getAllCountriesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllCountriesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAllCountriesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getCountryByNameCompletedEventHandler(object sender, getCountryByNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getCountryByNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getCountryByNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void addCountryCompletedEventHandler(object sender, addCountryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addCountryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addCountryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void changeCountryCompletedEventHandler(object sender, changeCountryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class changeCountryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal changeCountryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void delCountryCompletedEventHandler(object sender, delCountryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class delCountryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal delCountryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getAllDepartmentsCompletedEventHandler(object sender, getAllDepartmentsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllDepartmentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAllDepartmentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void changeDepartmentCompletedEventHandler(object sender, changeDepartmentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class changeDepartmentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal changeDepartmentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void changeDepartmentNameCompletedEventHandler(object sender, changeDepartmentNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class changeDepartmentNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal changeDepartmentNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void delDepartmentCompletedEventHandler(object sender, delDepartmentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class delDepartmentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal delDepartmentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getAllDevicesTypeCompletedEventHandler(object sender, getAllDevicesTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllDevicesTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAllDevicesTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getAllExceptionTypeCompletedEventHandler(object sender, getAllExceptionTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllExceptionTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAllExceptionTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getAllFunctionsCompletedEventHandler(object sender, getAllFunctionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllFunctionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAllFunctionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void addFunctionsRolesCompletedEventHandler(object sender, addFunctionsRolesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addFunctionsRolesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addFunctionsRolesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void delFunctionsRolesCompletedEventHandler(object sender, delFunctionsRolesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class delFunctionsRolesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal delFunctionsRolesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getRoleFunctionsCompletedEventHandler(object sender, getRoleFunctionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getRoleFunctionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getRoleFunctionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getAllHolidaysCompletedEventHandler(object sender, getAllHolidaysCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllHolidaysCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAllHolidaysCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getHolidaysByIDCompletedEventHandler(object sender, getHolidaysByIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getHolidaysByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getHolidaysByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void addHolidaysCompletedEventHandler(object sender, addHolidaysCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addHolidaysCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addHolidaysCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void changeHolidaysCompletedEventHandler(object sender, changeHolidaysCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class changeHolidaysCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal changeHolidaysCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getHolidayFromDateCompletedEventHandler(object sender, getHolidayFromDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getHolidayFromDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getHolidayFromDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void delHolidaysCompletedEventHandler(object sender, delHolidaysCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class delHolidaysCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal delHolidaysCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getAllMovimentsTypeCompletedEventHandler(object sender, getAllMovimentsTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllMovimentsTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAllMovimentsTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getAllNationalitiesCompletedEventHandler(object sender, getAllNationalitiesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllNationalitiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAllNationalitiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getNationalitiesByNameCompletedEventHandler(object sender, getNationalitiesByNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getNationalitiesByNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getNationalitiesByNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void addNationalityCompletedEventHandler(object sender, addNationalityCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addNationalityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addNationalityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void changeNationalityCompletedEventHandler(object sender, changeNationalityCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class changeNationalityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal changeNationalityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void delNationalityCompletedEventHandler(object sender, delNationalityCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class delNationalityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal delNationalityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void changeParametersCompletedEventHandler(object sender, changeParametersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class changeParametersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal changeParametersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void changeParametersByNameCompletedEventHandler(object sender, changeParametersByNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class changeParametersByNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal changeParametersByNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void setParametersDefaultCompletedEventHandler(object sender, setParametersDefaultCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class setParametersDefaultCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal setParametersDefaultCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getAllParametersCompletedEventHandler(object sender, getAllParametersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllParametersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAllParametersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getAllProfilesCompletedEventHandler(object sender, getAllProfilesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllProfilesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAllProfilesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void addProfileCompletedEventHandler(object sender, addProfileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addProfileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addProfileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void changeProfileCompletedEventHandler(object sender, changeProfileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class changeProfileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal changeProfileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void delProfileCompletedEventHandler(object sender, delProfileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class delProfileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal delProfileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getProfileWorktypeCompletedEventHandler(object sender, getProfileWorktypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getProfileWorktypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getProfileWorktypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getAllReasonsCompletedEventHandler(object sender, getAllReasonsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllReasonsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAllReasonsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void addReasonsCompletedEventHandler(object sender, addReasonsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addReasonsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addReasonsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void changeReasonsCompletedEventHandler(object sender, changeReasonsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class changeReasonsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal changeReasonsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void delReasonsCompletedEventHandler(object sender, delReasonsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class delReasonsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal delReasonsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getAllRolesCompletedEventHandler(object sender, getAllRolesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllRolesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAllRolesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void addRolesCompletedEventHandler(object sender, addRolesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addRolesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addRolesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void changeRolesCompletedEventHandler(object sender, changeRolesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class changeRolesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal changeRolesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void delRolesCompletedEventHandler(object sender, delRolesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class delRolesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal delRolesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getStatisticsFromDateCompletedEventHandler(object sender, getStatisticsFromDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getStatisticsFromDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getStatisticsFromDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void addStatisticCompletedEventHandler(object sender, addStatisticCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addStatisticCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addStatisticCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void changeStatisticsCompletedEventHandler(object sender, changeStatisticsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class changeStatisticsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal changeStatisticsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getAllTypeExtraHoursCompletedEventHandler(object sender, getAllTypeExtraHoursCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllTypeExtraHoursCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAllTypeExtraHoursCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void changeTypeExtraHoursCompletedEventHandler(object sender, changeTypeExtraHoursCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class changeTypeExtraHoursCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal changeTypeExtraHoursCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getAllUsersCompletedEventHandler(object sender, getAllUsersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAllUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getUserDataCompletedEventHandler(object sender, getUserDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getUserDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getUserDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591